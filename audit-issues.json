{
  "metadata": {
    "audit_date": "2025-10-18",
    "project": "KEYHUNT-ECC",
    "version": "1.0",
    "branch": "chore/consolidated-audit-reporting-deliverables",
    "total_issues": 47,
    "by_severity": {
      "critical": 3,
      "high": 12,
      "medium": 18,
      "low": 14
    }
  },
  "issues": {
    "critical": [
      {
        "id": "CRITICAL-001",
        "title": "Memory Pool Cleanup on Failure",
        "category": "Memory Management",
        "severity": "CRITICAL",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "42-69",
        "description": "Memory pool allocation function does not properly clean up on partial allocation failures. If d_x_pool or d_y_pool allocation fails, previously allocated memory may not be freed consistently.",
        "impact": "GPU memory leaks in error paths, potential double-free if function called again after partial failure, resource exhaustion in long-running processes",
        "cwe": ["CWE-415", "CWE-772"],
        "remediation": "Add proper cleanup order and null checks. Set all pointers to nullptr after freeing.",
        "effort_hours": 2,
        "priority": "P0"
      },
      {
        "id": "CRITICAL-002",
        "title": "Unimplemented CUDA Functions Return Stub Errors",
        "category": "Incomplete Implementation",
        "severity": "CRITICAL",
        "file": "KEYHUNT-ECC/api/bridge.cu",
        "lines": "28-53, 58-88",
        "description": "Two critical GPU functions (kh_ecc_pmul_batch_soa and kh_ecc_pmul_batch_coop) are stubbed out and always return cudaErrorNotYetImplemented",
        "impact": "Reduced performance for SoA memory layout optimizations, missing warp-cooperative optimization path, API surface suggests features that don't exist",
        "cwe": [],
        "remediation": "Short-term: Document stub status in header files and README. Medium-term: Implement SoA and cooperative kernels. Long-term: Add feature flags to detect available implementations at runtime",
        "effort_hours": 40,
        "priority": "P0"
      },
      {
        "id": "CRITICAL-003",
        "title": "Temporary Buffer Allocation Without Error Propagation",
        "category": "Error Handling / Memory Management",
        "severity": "CRITICAL",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "194-203",
        "description": "GPU_BatchPrivToPub_Bytes32BE allocates three large temporary buffers with malloc but only checks for allocation failure locally. Large batch sizes could cause out-of-memory failures",
        "impact": "Large batch sizes (count > 10,000) could cause OOM, no validation that count * 8 * sizeof(uint32_t) doesn't overflow, repeated calls with large count can fragment heap memory",
        "cwe": ["CWE-190", "CWE-789"],
        "remediation": "Add overflow check and reasonable limits. Use calloc for zero-initialization",
        "effort_hours": 3,
        "priority": "P0"
      }
    ],
    "high": [
      {
        "id": "HIGH-001",
        "title": "Debug Code Patterns in Production",
        "category": "Code Quality / Security",
        "severity": "HIGH",
        "file": "Multiple files",
        "lines": "75 instances throughout codebase",
        "description": "Extensive debug code remains in production builds, including global debug flags that can be enabled via command-line and commented-out debug printf statements throughout critical paths",
        "impact": "Debug output may leak sensitive information (private keys, memory addresses), performance degradation when debug mode enabled, code clutter reduces maintainability",
        "cwe": ["CWE-209"],
        "remediation": "Use compile-time debug macros instead of runtime flags, remove or properly gate 75 commented debug lines, implement structured logging with severity levels",
        "effort_hours": 16,
        "priority": "P1"
      },
      {
        "id": "HIGH-002",
        "title": "Unsafe String Functions",
        "category": "Security",
        "severity": "HIGH",
        "file": "Various",
        "lines": "Multiple",
        "description": "Use of potentially unsafe string functions like sprintf without bounds checking",
        "impact": "Buffer overflow potential if input validation is insufficient, CWE-120: Buffer Copy without Checking Size of Input, memory corruption leading to crashes or code execution",
        "cwe": ["CWE-120", "CWE-676"],
        "remediation": "Replace sprintf with snprintf throughout codebase, replace strcpy with strncpy or safer alternatives, add static analysis to CI/CD to catch future instances",
        "effort_hours": 8,
        "priority": "P1"
      },
      {
        "id": "HIGH-003",
        "title": "Missing CUDA Error Checks",
        "category": "Error Handling",
        "severity": "HIGH",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "111, 119-123",
        "description": "Several CUDA API calls don't check return values immediately, potentially masking errors",
        "impact": "Silent failures in GPU operations, incorrect results propagated to CPU, difficult debugging when GPU operations fail",
        "cwe": ["CWE-252"],
        "remediation": "Create CUDA_CHECK macro for consistent error checking and apply throughout",
        "effort_hours": 8,
        "priority": "P1"
      },
      {
        "id": "HIGH-004",
        "title": "Integer Overflow in Buffer Size Calculations",
        "category": "Integer Overflow",
        "severity": "HIGH",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "35, 107, 194",
        "description": "Buffer size calculations multiply user-provided count without overflow checks",
        "impact": "Large count values can cause integer overflow, resulting in undersized allocations, leading to buffer overflows in subsequent operations",
        "cwe": ["CWE-190", "CWE-131"],
        "remediation": "Add overflow detection using SIZE_MAX checks or compiler builtins",
        "effort_hours": 8,
        "priority": "P1"
      },
      {
        "id": "HIGH-005",
        "title": "Global Mutable State in GPU Backend",
        "category": "Concurrency / Design",
        "severity": "HIGH",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "14-24",
        "description": "Multiple global variables maintain GPU state without thread synchronization",
        "impact": "Not thread-safe for multi-threaded applications, memory pool shared across all callers (no isolation), performance counters race without synchronization, difficult to support multiple GPUs",
        "cwe": ["CWE-543"],
        "remediation": "Encapsulate state in a context object with create/destroy functions, add mutex protection for performance counters",
        "effort_hours": 24,
        "priority": "P1"
      },
      {
        "id": "HIGH-006",
        "title": "Missing Input Validation",
        "category": "Input Validation",
        "severity": "HIGH",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "90-96",
        "description": "GPU_BatchPrivToPub validates pointers and count, but doesn't validate block_dim parameter",
        "impact": "Invalid block dimensions could cause kernel launch failures, large block_dim values waste GPU resources",
        "cwe": ["CWE-20"],
        "remediation": "Add validation for block_dim range (MIN_BLOCK_DIM to MAX_BLOCK_DIM)",
        "effort_hours": 2,
        "priority": "P1"
      },
      {
        "id": "HIGH-007",
        "title": "Memory Fragmentation from Repeated Allocations",
        "category": "Performance / Memory Management",
        "severity": "HIGH",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "194-224",
        "description": "GPU_BatchPrivToPub_Bytes32BE allocates three large temporary buffers on every call without reusing memory",
        "impact": "Heap fragmentation, repeated malloc/free overhead, cache thrashing in high-frequency calls",
        "cwe": [],
        "remediation": "Use memory pool pattern similar to the GPU device memory pool for host-side buffers",
        "effort_hours": 8,
        "priority": "P1"
      },
      {
        "id": "HIGH-008",
        "title": "TODO/FIXME Items Indicating Incomplete Code",
        "category": "Code Completeness",
        "severity": "HIGH",
        "file": "Multiple files",
        "lines": "75 instances",
        "description": "Multiple TODO/FIXME markers throughout codebase indicating incomplete optimizations and unhandled edge cases",
        "impact": "Incomplete optimizations reduce performance, unhandled edge cases (e.g., large keys in SHA-512), technical debt accumulation",
        "cwe": [],
        "remediation": "Catalog all TODOs in issue tracker, prioritize by impact (security > correctness > performance), create implementation roadmap",
        "effort_hours": 40,
        "priority": "P1"
      },
      {
        "id": "HIGH-009",
        "title": "Endianness Conversion Not Validated",
        "category": "Data Integrity",
        "severity": "HIGH",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "149-183",
        "description": "Convert_BE32_to_LE32_Array and Convert_LE32_to_BE32_Array perform byte swapping without validation or comprehensive tests",
        "impact": "Silent data corruption in big-endian to little-endian conversion, incorrect public keys generated from valid private keys, difficult to debug without comprehensive tests",
        "cwe": ["CWE-704"],
        "remediation": "Add roundtrip tests and property-based tests with random inputs",
        "effort_hours": 8,
        "priority": "P1"
      },
      {
        "id": "HIGH-010",
        "title": "Performance Monitoring Variables Not Atomic",
        "category": "Concurrency",
        "severity": "HIGH",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "14-17, 126-142",
        "description": "Performance counters are updated without synchronization",
        "impact": "Inaccurate performance metrics in multi-threaded usage, potential undefined behavior (data races on non-atomic types), misleading profiling information",
        "cwe": ["CWE-362"],
        "remediation": "Use atomic types from stdatomic.h for all performance counters",
        "effort_hours": 4,
        "priority": "P1"
      },
      {
        "id": "HIGH-011",
        "title": "No GPU Memory Pool Cleanup on Exit",
        "category": "Resource Management",
        "severity": "HIGH",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "N/A - missing function",
        "description": "GPU memory pool (d_priv_pool, d_x_pool, d_y_pool) is never explicitly freed. No cleanup function is provided or documented",
        "impact": "GPU memory leaks on program exit, resources not returned to system, issues in long-running daemons or when library is dynamically loaded/unloaded",
        "cwe": ["CWE-772"],
        "remediation": "Implement GPU_Cleanup() function and call at exit or provide automatic cleanup via atexit()",
        "effort_hours": 4,
        "priority": "P1"
      },
      {
        "id": "HIGH-012",
        "title": "Time-of-Check to Time-of-Use (TOCTOU) in GPU Availability",
        "category": "Race Condition",
        "severity": "HIGH",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "79-87, 96",
        "description": "GPU_IsAvailable() is called separately from GPU operations, introducing a TOCTOU window",
        "impact": "GPU could become unavailable between check and use, error handling delayed until actual operation, misleading error codes returned",
        "cwe": ["CWE-367"],
        "remediation": "Remove separate availability check; let CUDA operations fail naturally with appropriate error codes",
        "effort_hours": 2,
        "priority": "P1"
      }
    ],
    "medium": [
      {
        "id": "MEDIUM-001",
        "title": "Commented-Out Code Throughout Codebase",
        "category": "Code Quality",
        "severity": "MEDIUM",
        "file": "Multiple files",
        "lines": "75 instances",
        "description": "75 instances of commented debug code, 50+ commented-out if statements, multiple blocks of 10+ consecutive commented lines",
        "impact": "Code clutter reduces readability, unclear if comments represent historical bugs or future features, increases cognitive load for maintainers",
        "cwe": [],
        "remediation": "Remove obsolete commented code, use version control to preserve history, document intent for truly necessary commented sections",
        "effort_hours": 8,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-002",
        "title": "Hard-Coded Magic Numbers",
        "category": "Maintainability",
        "severity": "MEDIUM",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "12, 137",
        "description": "Magic numbers like 256 for block_dim and 1000/10.0 for reporting intervals",
        "impact": "Reduced maintainability, unclear intent",
        "cwe": [],
        "remediation": "Define constants with descriptive names",
        "effort_hours": 2,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-003",
        "title": "Inconsistent Error Code Convention",
        "category": "API Design",
        "severity": "MEDIUM",
        "file": "Multiple",
        "lines": "Various",
        "description": "Error codes are not consistently defined across API functions",
        "impact": "Callers cannot reliably distinguish error types, makes debugging difficult, API is user-unfriendly",
        "cwe": [],
        "remediation": "Define error code enum with clear semantics",
        "effort_hours": 4,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-004",
        "title": "Lack of Const Correctness",
        "category": "Code Quality",
        "severity": "MEDIUM",
        "file": "Multiple",
        "lines": "Various",
        "description": "Many functions don't use const for read-only parameters",
        "impact": "Reduced compiler optimization opportunities and clarity",
        "cwe": [],
        "remediation": "Audit all function signatures and add const where appropriate",
        "effort_hours": 8,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-005",
        "title": "Performance Reporting Uses fprintf to stderr",
        "category": "Design",
        "severity": "MEDIUM",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "73, 83, 139",
        "description": "Performance and debug output hardcoded to stderr with no way to disable or redirect",
        "impact": "No way to disable performance logging without recompiling, mixed with actual error messages, cannot redirect to log files easily",
        "cwe": [],
        "remediation": "Implement callback-based logging system",
        "effort_hours": 8,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-006",
        "title": "No Bounds Check on Block Dimension Parameter",
        "category": "Input Validation",
        "severity": "MEDIUM",
        "file": "KEYHUNT-ECC/api/bridge.cu",
        "lines": "12",
        "description": "Block dimension parameter has default but no maximum check (CUDA typically limits to 1024)",
        "impact": "Kernel launch may fail with invalid configuration",
        "cwe": ["CWE-20"],
        "remediation": "Add maximum check against CUDA limits",
        "effort_hours": 2,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-007",
        "title": "Shared Memory Size Not Validated",
        "category": "Resource Limits",
        "severity": "MEDIUM",
        "file": "KEYHUNT-ECC/api/bridge.cu",
        "lines": "14",
        "description": "Shared memory size calculation does not check against GPU hardware limits",
        "impact": "Kernel launch may fail silently if shared memory exceeds limits",
        "cwe": [],
        "remediation": "Query device properties and validate against sharedMemPerBlock limit",
        "effort_hours": 4,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-008",
        "title": "No Multi-GPU Support",
        "category": "Feature Limitation",
        "severity": "MEDIUM",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "N/A",
        "description": "Code assumes single GPU (device 0), no API to select specific GPU or use multiple GPUs",
        "impact": "Cannot utilize multi-GPU systems, reduced performance on high-end hardware",
        "cwe": [],
        "remediation": "Add device selection API (GPU_SetDevice, GPU_GetDeviceCount)",
        "effort_hours": 16,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-009",
        "title": "Timing Code Uses gettimeofday()",
        "category": "Portability / Accuracy",
        "severity": "MEDIUM",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "27-31",
        "description": "Uses deprecated gettimeofday() instead of modern clock_gettime()",
        "impact": "Lower precision than modern alternatives, not portable to all platforms",
        "cwe": [],
        "remediation": "Replace with clock_gettime(CLOCK_MONOTONIC)",
        "effort_hours": 1,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-010",
        "title": "Memory Pool Not Size-Limited",
        "category": "Resource Management",
        "severity": "MEDIUM",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "34-77",
        "description": "Memory pool can grow without bounds, no maximum size check",
        "impact": "Could allocate entire GPU memory, no graceful degradation, OOM killer risk",
        "cwe": ["CWE-770"],
        "remediation": "Define MAX_GPU_POOL_SIZE and enforce limit",
        "effort_hours": 2,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-011",
        "title": "Endian Conversion Loop Inefficiency",
        "category": "Performance",
        "severity": "MEDIUM",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "157-163, 175-182",
        "description": "Endian conversion uses byte-by-byte operations rather than optimized SIMD or intrinsics",
        "impact": "Suboptimal performance for large batch conversions",
        "cwe": [],
        "remediation": "Use platform intrinsics like __builtin_bswap32 where available",
        "effort_hours": 4,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-012",
        "title": "Struct Packing Not Specified",
        "category": "Portability",
        "severity": "MEDIUM",
        "file": "albertobsd-keyhunt/gpu_backend.h",
        "lines": "N/A",
        "description": "Performance monitoring structs may have different layouts on different platforms/compilers",
        "impact": "Potential ABI issues across platforms",
        "cwe": [],
        "remediation": "Use explicit packing directives (#pragma pack)",
        "effort_hours": 2,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-013",
        "title": "No Null Pointer Checks in Conversion Functions",
        "category": "Defensive Programming",
        "severity": "MEDIUM",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "149-183",
        "description": "Conversion functions check for null but fail silently with no error signaling",
        "impact": "Silent failures hard to debug, caller has no way to know conversion succeeded",
        "cwe": ["CWE-252"],
        "remediation": "Return error codes instead of void",
        "effort_hours": 2,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-014",
        "title": "Unused Parameter Suppression Could Hide Bugs",
        "category": "Code Quality",
        "severity": "MEDIUM",
        "file": "KEYHUNT-ECC/api/bridge.cu",
        "lines": "33-37, 63-67",
        "description": "Stub functions explicitly void-cast parameters to suppress warnings",
        "impact": "Could accidentally suppress warnings for real unused parameters, makes it harder to detect when stubs are mistakenly called",
        "cwe": [],
        "remediation": "Use compile-time checks (#ifdef or #error) instead",
        "effort_hours": 1,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-015",
        "title": "Performance Report Interval Not Configurable",
        "category": "Configurability",
        "severity": "MEDIUM",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "137",
        "description": "Hard-coded reporting interval (every 1000 calls or 10 seconds) cannot be changed at runtime",
        "impact": "Limited flexibility for different use cases",
        "cwe": [],
        "remediation": "Add GPU_SetPerfReportInterval() function",
        "effort_hours": 2,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-016",
        "title": "Grid Dimension Calculation May Overflow",
        "category": "Integer Overflow",
        "severity": "MEDIUM",
        "file": "KEYHUNT-ECC/api/bridge.cu",
        "lines": "13",
        "description": "Grid dimension calculation (count + block_dim - 1) may overflow if count is close to UINT32_MAX",
        "impact": "Incorrect grid dimensions leading to kernel launch failures",
        "cwe": ["CWE-190"],
        "remediation": "Add overflow check before calculation",
        "effort_hours": 1,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-017",
        "title": "No Validation of cudaDeviceSynchronize Success",
        "category": "Error Handling",
        "severity": "MEDIUM",
        "file": "KEYHUNT-ECC/api/bridge.cu",
        "lines": "21",
        "description": "Both kernel launch error and synchronization error use same return path",
        "impact": "Makes debugging harder to distinguish launch vs execution failures",
        "cwe": ["CWE-252"],
        "remediation": "Return different error codes for launch vs sync errors",
        "effort_hours": 1,
        "priority": "P2"
      },
      {
        "id": "MEDIUM-018",
        "title": "Missing Documentation for Error Codes",
        "category": "Documentation",
        "severity": "MEDIUM",
        "file": "API headers",
        "lines": "N/A",
        "description": "Public API functions return various error codes without documentation explaining meanings",
        "impact": "Difficult for API consumers to handle errors properly",
        "cwe": [],
        "remediation": "Add comprehensive documentation in header files with @return annotations",
        "effort_hours": 4,
        "priority": "P2"
      }
    ],
    "low": [
      {
        "id": "LOW-001",
        "title": "Inconsistent Comment Language",
        "category": "Documentation",
        "severity": "LOW",
        "file": "Multiple",
        "lines": "Various",
        "description": "Mix of English and Chinese comments throughout codebase",
        "impact": "Reduced readability for international developers",
        "cwe": [],
        "remediation": "Standardize on English for international collaboration",
        "effort_hours": 8,
        "priority": "P3"
      },
      {
        "id": "LOW-002",
        "title": "Inconsistent Naming Conventions",
        "category": "Code Style",
        "severity": "LOW",
        "file": "Multiple",
        "lines": "Various",
        "description": "Mix of snake_case and PascalCase, inconsistent use of prefixes",
        "impact": "Reduced code readability",
        "cwe": [],
        "remediation": "Establish and enforce coding style guide",
        "effort_hours": 16,
        "priority": "P3"
      },
      {
        "id": "LOW-003",
        "title": "Verbose Debug Output",
        "category": "Noise",
        "severity": "LOW",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "86",
        "description": "Debug output always printed to stderr",
        "impact": "Cluttered output in production",
        "cwe": [],
        "remediation": "Use log levels to control verbosity",
        "effort_hours": 2,
        "priority": "P3"
      },
      {
        "id": "LOW-004",
        "title": "Redundant Type Casts",
        "category": "Code Clarity",
        "severity": "LOW",
        "file": "Multiple",
        "lines": "Various",
        "description": "Some type casts are redundant due to implicit conversions",
        "impact": "Minor code clarity issue",
        "cwe": [],
        "remediation": "Keep for clarity in error returns, remove in other contexts",
        "effort_hours": 2,
        "priority": "P3"
      },
      {
        "id": "LOW-005",
        "title": "Magic Number 8 for Limb Count",
        "category": "Maintainability",
        "severity": "LOW",
        "file": "Multiple",
        "lines": "Various",
        "description": "The constant 8 (for 8 × 32-bit limbs = 256 bits) appears throughout without symbolic name",
        "impact": "Reduced maintainability",
        "cwe": [],
        "remediation": "Define SECP256K1_LIMBS constant",
        "effort_hours": 1,
        "priority": "P3"
      },
      {
        "id": "LOW-006",
        "title": "Trailing Whitespace",
        "category": "Code Style",
        "severity": "LOW",
        "file": "Various",
        "lines": "Multiple",
        "description": "Trailing whitespace present in source files",
        "impact": "Git diff noise",
        "cwe": [],
        "remediation": "Configure editor to remove trailing whitespace on save",
        "effort_hours": 1,
        "priority": "P3"
      },
      {
        "id": "LOW-007",
        "title": "Inconsistent Bracket Style",
        "category": "Code Style",
        "severity": "LOW",
        "file": "Multiple",
        "lines": "Various",
        "description": "Mix of K&R and Allman bracket styles",
        "impact": "Inconsistent code appearance",
        "cwe": [],
        "remediation": "Run code formatter (clang-format) with consistent config",
        "effort_hours": 1,
        "priority": "P3"
      },
      {
        "id": "LOW-008",
        "title": "Long Function Names",
        "category": "Readability",
        "severity": "LOW",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "186",
        "description": "Function name GPU_BatchPrivToPub_Bytes32BE is very long",
        "impact": "Minor readability issue",
        "cwe": [],
        "remediation": "Consider shorter alias or restructure API",
        "effort_hours": 1,
        "priority": "P3"
      },
      {
        "id": "LOW-009",
        "title": "Unnecessary Include Guards in .cu Files",
        "category": "Code Quality",
        "severity": "LOW",
        "file": "Potentially in CUDA files",
        "lines": "N/A",
        "description": ".cu implementation files don't need include guards (only headers do)",
        "impact": "Minor code quality issue",
        "cwe": [],
        "remediation": "Remove from .cu files, keep in .cuh/.h files",
        "effort_hours": 1,
        "priority": "P3"
      },
      {
        "id": "LOW-010",
        "title": "Missing Newline at End of File",
        "category": "Code Style",
        "severity": "LOW",
        "file": "KEYHUNT-ECC/api/bridge.cu",
        "lines": "89",
        "description": "File doesn't end with newline (POSIX standard)",
        "impact": "Minor standards compliance issue",
        "cwe": [],
        "remediation": "Add newline at EOF",
        "effort_hours": 0.25,
        "priority": "P3"
      },
      {
        "id": "LOW-011",
        "title": "Commented Code in Production",
        "category": "Code Hygiene",
        "severity": "LOW",
        "file": "KEYHUNT-ECC/api/bridge.cu",
        "lines": "40-52, 70-87",
        "description": "Large blocks of commented-out code in production files",
        "impact": "Code clutter",
        "cwe": [],
        "remediation": "Remove and rely on version control",
        "effort_hours": 0.5,
        "priority": "P3"
      },
      {
        "id": "LOW-012",
        "title": "Variable Shadowing",
        "category": "Code Quality",
        "severity": "LOW",
        "file": "Potentially throughout",
        "lines": "N/A",
        "description": "Local variables may shadow outer scope variables",
        "impact": "Potential confusion",
        "cwe": [],
        "remediation": "Enable compiler warning -Wshadow and fix instances",
        "effort_hours": 4,
        "priority": "P3"
      },
      {
        "id": "LOW-013",
        "title": "Missing Copyright Headers",
        "category": "Legal",
        "severity": "LOW",
        "file": "Some source files",
        "lines": "N/A",
        "description": "Not all files have consistent copyright/license headers",
        "impact": "Licensing ambiguity",
        "cwe": [],
        "remediation": "Add standard header to all source files per LICENSE file",
        "effort_hours": 2,
        "priority": "P3"
      },
      {
        "id": "LOW-014",
        "title": "Potential for Off-by-One in Array Indexing",
        "category": "Code Review Needed",
        "severity": "LOW",
        "file": "albertobsd-keyhunt/gpu_backend.cpp",
        "lines": "158",
        "description": "Index calculation needs verification: const uint8_t* src = &be_bytes[(7-i) * 4];",
        "impact": "Potential bounds issue (appears correct but warrants testing)",
        "cwe": [],
        "remediation": "Add unit tests to verify bounds",
        "effort_hours": 2,
        "priority": "P3"
      }
    ]
  },
  "build_status": {
    "status": "FAILED",
    "dependencies_missing": [
      {
        "name": "CMake",
        "required_version": ">=3.18",
        "found": false
      },
      {
        "name": "CUDA Toolkit",
        "required_version": ">=11.0",
        "found": false
      }
    ],
    "dependencies_found": [
      {
        "name": "GCC",
        "version": "11.4.0",
        "status": "OK"
      },
      {
        "name": "G++",
        "version": "11.4.0",
        "status": "OK"
      }
    ],
    "error_summary": "Build failed due to missing CMake. Cannot compile KEYHUNT-ECC CUDA library.",
    "resolution_steps": [
      "Install CMake >= 3.18",
      "Install CUDA Toolkit >= 11.0",
      "Verify installations with cmake --version and nvcc --version",
      "Re-run make command"
    ]
  },
  "summary": {
    "risk_level": "MODERATE",
    "recommendation": "CONDITIONAL GO - Address critical issues before production use",
    "top_priorities": [
      "CRITICAL-001: Fix memory pool cleanup",
      "CRITICAL-003: Add buffer allocation overflow checks",
      "HIGH-005: Refactor global state to context-based API",
      "HIGH-003: Add comprehensive CUDA error checking"
    ],
    "estimated_remediation_effort_hours": 267,
    "code_quality_score": 6.5,
    "security_posture": "MODERATE_RISK"
  }
}
