Enabled checks:
    clang-analyzer-core.BitwiseShift
    clang-analyzer-core.CallAndMessage
    clang-analyzer-core.CallAndMessageModeling
    clang-analyzer-core.DivideZero
    clang-analyzer-core.DynamicTypePropagation
    clang-analyzer-core.NonNullParamChecker
    clang-analyzer-core.NonnilStringConstants
    clang-analyzer-core.NullDereference
    clang-analyzer-core.StackAddrEscapeBase
    clang-analyzer-core.StackAddressEscape
    clang-analyzer-core.UndefinedBinaryOperatorResult
    clang-analyzer-core.VLASize
    clang-analyzer-core.builtin.BuiltinFunctions
    clang-analyzer-core.builtin.NoReturnFunctions
    clang-analyzer-core.uninitialized.ArraySubscript
    clang-analyzer-core.uninitialized.Assign
    clang-analyzer-core.uninitialized.Branch
    clang-analyzer-core.uninitialized.CapturedBlockVariable
    clang-analyzer-core.uninitialized.NewArraySize
    clang-analyzer-core.uninitialized.UndefReturn
    clang-analyzer-deadcode.DeadStores
    misc-unused-alias-decls
    misc-unused-parameters
    misc-unused-using-decls
    readability-avoid-const-params-in-decls
    readability-avoid-nested-conditional-operator
    readability-avoid-return-with-void-value
    readability-avoid-unconditional-preprocessor-if
    readability-braces-around-statements
    readability-const-return-type
    readability-container-contains
    readability-container-data-pointer
    readability-container-size-empty
    readability-convert-member-functions-to-static
    readability-delete-null-pointer
    readability-duplicate-include
    readability-else-after-return
    readability-function-cognitive-complexity
    readability-function-size
    readability-identifier-length
    readability-identifier-naming
    readability-implicit-bool-conversion
    readability-inconsistent-declaration-parameter-name
    readability-isolate-declaration
    readability-magic-numbers
    readability-make-member-function-const
    readability-misleading-indentation
    readability-misplaced-array-index
    readability-named-parameter
    readability-non-const-parameter
    readability-operators-representation
    readability-qualified-auto
    readability-redundant-access-specifiers
    readability-redundant-casting
    readability-redundant-control-flow
    readability-redundant-declaration
    readability-redundant-function-ptr-dereference
    readability-redundant-inline-specifier
    readability-redundant-member-init
    readability-redundant-preprocessor
    readability-redundant-smartptr-get
    readability-redundant-string-cstr
    readability-redundant-string-init
    readability-reference-to-constructed-temporary
    readability-simplify-boolean-expr
    readability-simplify-subscript-expr
    readability-static-accessed-through-instance
    readability-static-definition-in-anonymous-namespace
    readability-string-compare
    readability-suspicious-call-argument
    readability-uniqueptr-delete-release
    readability-uppercase-literal-suffix
    readability-use-anyofallof

clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/secp256k1/Point.cpp
secp256k1/Point.cpp:23:27: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   23 | Point::Point(const Point &p) {
      |                           ^
secp256k1/Point.cpp:29:19: warning: parameter name 'cx' is too short, expected at least 3 characters [readability-identifier-length]
   29 | Point::Point(Int *cx,Int *cy,Int *cz) {
      |                   ^
secp256k1/Point.cpp:29:27: warning: parameter name 'cy' is too short, expected at least 3 characters [readability-identifier-length]
   29 | Point::Point(Int *cx,Int *cy,Int *cz) {
      |                           ^
secp256k1/Point.cpp:29:35: warning: parameter name 'cz' is too short, expected at least 3 characters [readability-identifier-length]
   29 | Point::Point(Int *cx,Int *cy,Int *cz) {
      |                                   ^
secp256k1/Point.cpp:35:19: warning: parameter name 'cx' is too short, expected at least 3 characters [readability-identifier-length]
   35 | Point::Point(Int *cx, Int *cz) {
      |                   ^
secp256k1/Point.cpp:35:28: warning: parameter name 'cz' is too short, expected at least 3 characters [readability-identifier-length]
   35 | Point::Point(Int *cx, Int *cz) {
      |                            ^
secp256k1/Point.cpp:46:22: warning: parameter name 'cx' is too short, expected at least 3 characters [readability-identifier-length]
   46 | void Point::Set(Int *cx, Int *cy,Int *cz) {
      |                      ^
secp256k1/Point.cpp:46:31: warning: parameter name 'cy' is too short, expected at least 3 characters [readability-identifier-length]
   46 | void Point::Set(Int *cx, Int *cy,Int *cz) {
      |                               ^
secp256k1/Point.cpp:46:39: warning: parameter name 'cz' is too short, expected at least 3 characters [readability-identifier-length]
   46 | void Point::Set(Int *cx, Int *cy,Int *cz) {
      |                                       ^
secp256k1/Point.cpp:55:24: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   55 | void Point::Set(Point &p) {
      |                        ^
secp256k1/Point.cpp:67:7: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
   67 |   Int i(&z);
      |       ^
secp256k1/Point.cpp:75:27: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   75 | bool Point::equals(Point &p) {
      |                           ^
128 warnings generated.
Suppressed 116 warnings (116 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/util.c
util.c:27:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
   27 |         int i;
      |             ^
util.c:43:19: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
   43 | int indexOf(char *s,const char **array,int length_array)        {
      |                   ^
util.c:44:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   44 |         int index = -1,i,continuar = 1;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
util.c:44:17: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
   44 |         int index = -1,i,continuar = 1;
      |                        ^
util.c:45:32: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   45 |         for(i = 0; i <length_array && continuar; i++)   {
      |                                       ^        
      |                                       (         != 0)
util.c:54:28: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
   54 | char *nextToken(Tokenizer *t)   {
      |                            ^
util.c:59:2: warning: do not use 'else' after 'return' [readability-else-after-return]
   59 |         else {
      |         ^~~~~~
   60 |                 return  NULL;
      |                 ~~~~~~~~~~~~~
   61 |         }
      |         ~
util.c:63:30: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
   63 | int hasMoreTokens(Tokenizer *t) {
      |                              ^
util.c:64:9: warning: implicit conversion 'bool' -> 'int' [readability-implicit-bool-conversion]
   64 |         return (t->current < t->n);
      |                ^
      |                static_cast<int>
util.c:67:44: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
   67 | void stringtokenizer(char *data,Tokenizer *t)   {
      |                                            ^
util.c:86:31: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
   86 | void freetokenizer(Tokenizer *t)        {
      |                               ^
util.c:97:19: warning: pointer parameter 'ptr' can be pointer to const [readability-non-const-parameter]
   97 | char *tohex(char *ptr,int length){
      |                   ^
      |             const 
util.c:100:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  100 |   unsigned char c;
      |                 ^
util.c:111:22: warning: pointer parameter 'ptr' can be pointer to const [readability-non-const-parameter]
  111 | void tohex_dst(char *ptr,int length,char *dst)  {
      |                      ^
      |                const 
util.c:113:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  113 |   unsigned char c;
      |                 ^
util.c:124:9: warning: variable name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
  124 |         char   b1;
      |                ^
util.c:125:9: warning: variable name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
  125 |         char   b2;
      |                ^
util.c:126:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  126 |         int i;
      |             ^
util.c:128:49: warning: statement should be inside braces [readability-braces-around-statements]
  128 |         if (hex == NULL || *hex == '\0' || out == NULL)
      |                                                        ^
      |                                                         {
  129 |                 return 0;
      |                          
util.c:132:19: warning: statement should be inside braces [readability-braces-around-statements]
  132 |         if (len % 2 != 0)
      |                          ^
      |                           {
  133 |                 return 0;
      |                          
util.c:138:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  138 |                 if (!hexchr2bin(hex[i*2], &b1) || !hexchr2bin(hex[i*2+1], &b2)) {
      |                     ~^
      |                     (                          == 0)
util.c:138:38: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  138 |                 if (!hexchr2bin(hex[i*2], &b1) || !hexchr2bin(hex[i*2+1], &b2)) {
      |                                                   ~^                          
      |                                                   (                            == 0)
util.c:147:18: warning: statement should be inside braces [readability-braces-around-statements]
  147 |         if (out == NULL)
      |                         ^
      |                          {
  148 |                 return 0;
      |                          
util.c:153:22: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  153 |                 *out = hex - 'A' + 10;
      |                                    ^
util.c:155:22: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  155 |                 *out = hex - 'a' + 10;
      |                                    ^
util.c:163:36: warning: parameter name 'l' is too short, expected at least 3 characters [readability-identifier-length]
  163 | void addItemList(char *data, List *l)   {
      |                                    ^
util.c:170:7: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  170 |         char c;
      |              ^
util.c:171:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  171 |         int len,i,valid = 1;
      |         ^~~~~~~~~~~~~~~~~~~~
util.c:171:10: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  171 |         int len,i,valid = 1;
      |                 ^
util.c:173:26: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  173 |         for(i = 0 ; i <  len && valid ;i++ )    {
      |                                 ^
      |                                 (     != 0)
util.c:175:11: warning: implicit conversion 'bool' -> 'int' [readability-implicit-bool-conversion]
  175 |                 valid = ( (c >= '0' && c <='9') || (c >= 'A' && c <='F' ) || (c >= 'a' && c <='f' ) );
      |                         ^
      |                         static_cast<int>
58 warnings generated.
Suppressed 27 warnings (26 in non-user code, 1 with check filters).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/oldbloom/bloom.cpp
oldbloom/bloom.cpp:34:48: warning: parameter name 'bf' is too short, expected at least 3 characters [readability-identifier-length]
   34 | inline static int oldtest_bit_set_bit(uint8_t *bf, uint64_t bit, int set_bit)
      |                                                ^
oldbloom/bloom.cpp:37:11: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   37 |   uint8_t c = bf[byte];  // expensive memory access
      |           ^
oldbloom/bloom.cpp:38:30: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   38 |   uint8_t mask = 1 << (bit % 8);
      |                              ^
oldbloom/bloom.cpp:39:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   39 |   if (c & mask) {
      |       ^       
      |       (       ) != 0
oldbloom/bloom.cpp:41:5: warning: do not use 'else' after 'return' [readability-else-after-return]
   41 |   } else {
      |     ^~~~~~
   42 |     if (set_bit) {
      |     ~~~~~~~~~~~~~~
   43 |                 bf[byte] = c | mask;
      |                 ~~~~~~~~~~~~~~~~~~~~
   44 |     }
      |     ~
   45 |     return 0;
      |     ~~~~~~~~~
   46 |   }
      |   ~
oldbloom/bloom.cpp:42:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   42 |     if (set_bit) {
      |         ^
note: this fix will not be applied because it overlaps with another fix
oldbloom/bloom.cpp:49:40: warning: parameter name 'bf' is too short, expected at least 3 characters [readability-identifier-length]
   49 | inline static int oldtest_bit(uint8_t *bf, uint64_t bit)
      |                                        ^
oldbloom/bloom.cpp:49:40: warning: pointer parameter 'bf' can be pointer to const [readability-non-const-parameter]
   49 | inline static int oldtest_bit(uint8_t *bf, uint64_t bit)
      |                                        ^
      |                               const 
oldbloom/bloom.cpp:52:11: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   52 |   uint8_t c = bf[byte];  // expensive memory access
      |           ^
oldbloom/bloom.cpp:53:30: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   53 |   uint8_t mask = 1 << (bit % 8);
      |                              ^
oldbloom/bloom.cpp:54:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   54 |   if (c & mask) {
      |       ^       
      |       (       ) != 0
oldbloom/bloom.cpp:56:5: warning: do not use 'else' after 'return' [readability-else-after-return]
   56 |   } else {
      |     ^~~~~~
   57 |     return 0;
      |     ~~~~~~~~~
   58 |   }
      |   ~
oldbloom/bloom.cpp:68:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   68 |   uint64_t a = XXH64(buffer, len, 0x59f2815b16f81798);
      |            ^
oldbloom/bloom.cpp:68:35: warning: 0x59f2815b16f81798 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   68 |   uint64_t a = XXH64(buffer, len, 0x59f2815b16f81798);
      |                                   ^
oldbloom/bloom.cpp:69:12: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
   69 |   uint64_t b = XXH64(buffer, len, a);
      |            ^
oldbloom/bloom.cpp:70:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
   70 |   uint64_t x;
      |            ^
oldbloom/bloom.cpp:71:11: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
   71 |   uint8_t i;
      |           ^
oldbloom/bloom.cpp:72:7: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
   72 |   int r;
      |       ^
oldbloom/bloom.cpp:80:21: warning: redundant explicit casting to the same type 'pthread_mutex_t *' as the sub-expression, remove this casting [readability-redundant-casting]
   80 |         pthread_mutex_lock((pthread_mutex_t*)&bloom->mutex);
      |                            ^~~~~~~~~~~~~~~~~~             
      |                            (                              )
oldbloom/bloom.cpp:82:23: warning: redundant explicit casting to the same type 'pthread_mutex_t *' as the sub-expression, remove this casting [readability-redundant-casting]
   82 |         pthread_mutex_unlock((pthread_mutex_t*)&bloom->mutex);
      |                              ^~~~~~~~~~~~~~~~~~             
      |                              (                              )
oldbloom/bloom.cpp:84:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   84 |     if (r) {
      |         ^
      |           != 0
oldbloom/bloom.cpp:86:17: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   86 |     } else if (!add) {
      |                ~^  
      |                     == 0
oldbloom/bloom.cpp:106:17: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  106 |   if (entries < 1000 || error <= 0 || error >= 1) {
      |                 ^
oldbloom/bloom.cpp:113:23: warning: 0.480453013918201 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  113 |   long double denom = 0.480453013918201; // ln(2)^2
      |                       ^
oldbloom/bloom.cpp:120:18: warning: redundant explicit casting to the same type 'uint64_t' (aka 'unsigned long') as the sub-expression, remove this casting [readability-redundant-casting]
  120 |   bloom->bytes = (uint64_t) bloom->bits / 8;
      |                  ^~~~~~~~~~
oldbloom/oldbloom.h:32:12: note: source type originates from referencing this member
   32 |   uint64_t bits;
      |   ~~~~~~~~ ^
oldbloom/bloom.cpp:120:43: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  120 |   bloom->bytes = (uint64_t) bloom->bits / 8;
      |                                           ^
oldbloom/bloom.cpp:121:7: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> 'bool' [readability-implicit-bool-conversion]
  121 |   if (bloom->bits % 8) {
      |       ^              
      |       (              ) != 0u
oldbloom/bloom.cpp:121:21: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  121 |   if (bloom->bits % 8) {
      |                     ^
oldbloom/bloom.cpp:125:33: warning: 0.693147180559945 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  125 |   bloom->hashes = (uint8_t)ceil(0.693147180559945 * bloom->bpe);  // ln(2)
      |                                 ^
oldbloom/bloom.cpp:145:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  145 |   uint64_t a = XXH64(buffer, len, 0x59f2815b16f81798);
      |            ^
oldbloom/bloom.cpp:145:35: warning: 0x59f2815b16f81798 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  145 |   uint64_t a = XXH64(buffer, len, 0x59f2815b16f81798);
      |                                   ^
oldbloom/bloom.cpp:146:12: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  146 |   uint64_t b = XXH64(buffer, len, a);
      |            ^
oldbloom/bloom.cpp:147:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  147 |   uint64_t x;
      |            ^
oldbloom/bloom.cpp:148:11: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  148 |   uint8_t i;
      |           ^
oldbloom/bloom.cpp:151:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  151 |     if (oldtest_bit(bloom->bf, x)) {
      |         ^                        
      |                                   != 0
oldbloom/bloom.cpp:172:8: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> 'bool' [readability-implicit-bool-conversion]
  172 |   if (!bloom->ready) { printf(" *** NOT READY ***\n"); }
      |       ~^           
      |                     == 0u
oldbloom/bloom.cpp:179:16: warning: variable name 'KB' is too short, expected at least 3 characters [readability-identifier-length]
  179 |   unsigned int KB = bloom->bytes / 1024;
      |                ^
oldbloom/bloom.cpp:179:36: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  179 |   unsigned int KB = bloom->bytes / 1024;
      |                                    ^
oldbloom/bloom.cpp:180:16: warning: variable name 'MB' is too short, expected at least 3 characters [readability-identifier-length]
  180 |   unsigned int MB = KB / 1024;
      |                ^
oldbloom/bloom.cpp:180:26: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  180 |   unsigned int MB = KB / 1024;
      |                          ^
oldbloom/bloom.cpp:187:7: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> 'bool' [readability-implicit-bool-conversion]
  187 |   if (bloom->ready) {
      |       ^           
      |                    != 0u
oldbloom/bloom.cpp:195:8: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> 'bool' [readability-implicit-bool-conversion]
  195 |   if (!bloom->ready) return 1;
      |       ~^           
      |                     == 0u
oldbloom/bloom.cpp:195:21: warning: statement should be inside braces [readability-braces-around-statements]
  195 |   if (!bloom->ready) return 1;
      |                     ^         
      |                      {
881 warnings generated.
Suppressed 838 warnings (838 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/secp256k1/Int.cpp
error: too many errors emitted, stopping now [clang-diagnostic-error]
secp256k1/Int.cpp:38:15: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   38 | Int::Int(Int *a) {
      |               ^
secp256k1/Int.cpp:39:6: warning: implicit conversion 'Int *' -> 'bool' [readability-implicit-bool-conversion]
   39 |   if(a) Set(a);
      |      ^
      |        != nullptr
secp256k1/Int.cpp:39:8: warning: statement should be inside braces [readability-braces-around-statements]
   39 |   if(a) Set(a);
      |        ^
      |         {
   40 |   else CLEAR();
      |   } 
secp256k1/Int.cpp:40:7: warning: statement should be inside braces [readability-braces-around-statements]
   40 |   else CLEAR();
      |       ^        
      |        {
secp256k1/Int.cpp:72:30: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   72 |   memset(bits64,0, NB64BLOCK*8);
      |                              ^
secp256k1/Int.cpp:76:18: warning: 0xFF is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   76 |   memset(bits64, 0xFF, NB64BLOCK * 8);
      |                  ^
secp256k1/Int.cpp:76:36: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   76 |   memset(bits64, 0xFF, NB64BLOCK * 8);
      |                                    ^
secp256k1/Int.cpp:81:20: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   81 | void Int::Set(Int *a) {
      |                    ^
secp256k1/Int.cpp:82:36: warning: statement should be inside braces [readability-braces-around-statements]
   82 |   for (int i = 0; i<NB64BLOCK; i++)
      |                                    ^
      |                                     {
   83 |         bits64[i] = a->bits64[i];
      |                                  
secp256k1/Int.cpp:88:20: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   88 | void Int::Add(Int *a) {
      |                    ^
secp256k1/Int.cpp:90:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   90 |   unsigned char c = 0;
      |                 ^
secp256k1/Int.cpp:107:24: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  107 | void Int::Add(uint64_t a) {
      |                        ^
secp256k1/Int.cpp:109:16: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  109 |         unsigned char c = 0;
      |                       ^
secp256k1/Int.cpp:126:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  126 |   unsigned char c = 0;
      |                 ^
secp256k1/Int.cpp:143:20: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  143 | void Int::Add(Int *a,Int *b) {
      |                    ^
secp256k1/Int.cpp:143:27: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  143 | void Int::Add(Int *a,Int *b) {
      |                           ^
secp256k1/Int.cpp:145:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  145 |   unsigned char c = 0;
      |                 ^
secp256k1/Int.cpp:162:26: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  162 | bool Int::IsGreater(Int *a) {
      |                          ^
secp256k1/Int.cpp:164:7: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  164 |   int i;
      |       ^
secp256k1/Int.cpp:167:35: warning: statement should be inside braces [readability-braces-around-statements]
  167 |     if( a->bits64[i]!= bits64[i] )
      |                                   ^
      |                                    {
  168 |                 break;
      |                       
secp256k1/Int.cpp:174:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  174 |   } else {
      |     ^~~~~~
  175 |     return false;
      |     ~~~~~~~~~~~~~
  176 |   }
      |   ~
secp256k1/Int.cpp:182:24: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  182 | bool Int::IsLower(Int *a) {
      |                        ^
secp256k1/Int.cpp:184:7: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  184 |   int i;
      |       ^
secp256k1/Int.cpp:187:35: warning: statement should be inside braces [readability-braces-around-statements]
  187 |     if (a->bits64[i] != bits64[i])
      |                                   ^
      |                                    {
  188 |       break;
      |             
secp256k1/Int.cpp:194:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  194 |   } else {
      |     ^~~~~~
  195 |     return false;
      |     ~~~~~~~~~~~~~
  196 |   }
      |   ~
secp256k1/Int.cpp:202:33: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  202 | bool Int::IsGreaterOrEqual(Int *a) {
      |                                 ^
secp256k1/Int.cpp:204:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  204 |   Int p;
      |       ^
secp256k1/Int.cpp:212:31: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  212 | bool Int::IsLowerOrEqual(Int *a) {
      |                               ^
secp256k1/Int.cpp:214:7: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  214 |   int i = NB64BLOCK - 1;
      |       ^
secp256k1/Int.cpp:217:35: warning: statement should be inside braces [readability-braces-around-statements]
  217 |     if (a->bits64[i] != bits64[i])
      |                                   ^
      |                                    {
  218 |       break;
      |             
secp256k1/Int.cpp:224:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  224 |   } else {
      |     ^~~~~~
  225 |     return true;
      |     ~~~~~~~~~~~~
  226 |   }
      |   ~
secp256k1/Int.cpp:230:24: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  230 | bool Int::IsEqual(Int *a) {
      |                        ^
secp256k1/Int.cpp:327:35: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  327 | void Int::SetDWord(int n,uint32_t b) {
      |                                   ^
secp256k1/Int.cpp:333:36: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  333 | void Int::SetQWord(int n, uint64_t b) {
      |                                    ^
secp256k1/Int.cpp:339:20: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  339 | void Int::Sub(Int *a) {
      |                    ^
secp256k1/Int.cpp:341:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  341 |   unsigned char c = 0;
      |                 ^
secp256k1/Int.cpp:342:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:343:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  343 |   c = _subborrow_u64(c, bits64[1], a->bits64[1], bits64 +1);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:344:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  344 |   c = _subborrow_u64(c, bits64[2], a->bits64[2], bits64 +2);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:345:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  345 |   c = _subborrow_u64(c, bits64[3], a->bits64[3], bits64 +3);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:346:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  346 |   c = _subborrow_u64(c, bits64[4], a->bits64[4], bits64 +4);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:358:20: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  358 | void Int::Sub(Int *a,Int *b) {
      |                    ^
secp256k1/Int.cpp:358:27: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  358 | void Int::Sub(Int *a,Int *b) {
      |                           ^
secp256k1/Int.cpp:360:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  360 |   unsigned char c = 0;
      |                 ^
secp256k1/Int.cpp:361:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  361 |   c = _subborrow_u64(c, a->bits64[0], b->bits64[0], bits64 + 0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:362:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  362 |   c = _subborrow_u64(c, a->bits64[1], b->bits64[1], bits64 + 1);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:363:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  363 |   c = _subborrow_u64(c, a->bits64[2], b->bits64[2], bits64 + 2);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:364:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  364 |   c = _subborrow_u64(c, a->bits64[3], b->bits64[3], bits64 + 3);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:365:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  365 |   c = _subborrow_u64(c, a->bits64[4], b->bits64[4], bits64 + 4);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:375:24: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  375 | void Int::Sub(uint64_t a) {
      |                        ^
secp256k1/Int.cpp:377:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  377 |   unsigned char c = 0;
      |                 ^
secp256k1/Int.cpp:378:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  378 |   c = _subborrow_u64(c, bits64[0], a, bits64 + 0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:379:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  379 |   c = _subborrow_u64(c, bits64[1], 0, bits64 + 1);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:380:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  380 |   c = _subborrow_u64(c, bits64[2], 0, bits64 + 2);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:381:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  381 |   c = _subborrow_u64(c, bits64[3], 0, bits64 + 3);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:382:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  382 |   c = _subborrow_u64(c, bits64[4], 0, bits64 + 4);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:394:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  394 |   unsigned char c = 0;
      |                 ^
secp256k1/Int.cpp:395:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  395 |   c = _subborrow_u64(c, bits64[0], 1, bits64 + 0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:396:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  396 |   c = _subborrow_u64(c, bits64[1], 0, bits64 + 1);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:397:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  397 |   c = _subborrow_u64(c, bits64[2], 0, bits64 + 2);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:398:7: error: use of undeclared identifier '__builtin_ia32_sbb_u64'; did you mean '__builtin_ia32_subborrow_u64'? [clang-diagnostic-error]
  398 |   c = _subborrow_u64(c, bits64[3], 0, bits64 + 3);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:342:7: note: '__builtin_ia32_subborrow_u64' declared here
  342 |   c = _subborrow_u64(c, bits64[0], a->bits64[0], bits64 +0);
      |       ^
secp256k1/Int.h:222:33: note: expanded from macro '_subborrow_u64'
  222 | #define _subborrow_u64(a,b,c,d) __builtin_ia32_sbb_u64(a,b,c,(long long unsigned int*)d);
      |                                 ^
secp256k1/Int.cpp:424:21: warning: statement should be inside braces [readability-braces-around-statements]
  424 |   if( IsPositive() )
      |                     ^
      |                      {
  425 |           return !IsZero();
  426 |   else
      |   } 
secp256k1/Int.cpp:426:3: warning: do not use 'else' after 'return' [readability-else-after-return]
  426 |   else
      |   ^~~~
  427 |           return false;
      |           ~~~~~~~~~~~~
secp256k1/Int.cpp:426:7: warning: statement should be inside braces [readability-braces-around-statements]
  426 |   else
      |       ^
note: this fix will not be applied because it overlaps with another fix
secp256k1/Int.cpp:446:25: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  446 |         volatile unsigned char c=0;
      |                                ^
secp256k1/Int.cpp:485:34: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  485 | void Int::ShiftL32BitAndSub(Int *a,int n) {
      |                                  ^
secp256k1/Int.cpp:487:7: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  487 |   Int b;
      |       ^
secp256k1/Int.cpp:488:7: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  488 |   int i=NB32BLOCK-1;
      |       ^
secp256k1/Int.cpp:490:17: warning: statement should be inside braces [readability-braces-around-statements]
  490 |   for(;i>=n;i--)
      |                 ^
      |                  {
  491 |     b.bits[i] = ~a->bits[i-n];
      |                               
secp256k1/Int.cpp:492:17: warning: statement should be inside braces [readability-braces-around-statements]
  492 |   for(;i>=0;i--)
      |                 ^
      |                  {
  493 |     b.bits[i] = 0xFFFFFFFF;
      |                            
secp256k1/Int.cpp:493:17: warning: 0xFFFFFFFF is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  493 |     b.bits[i] = 0xFFFFFFFF;
      |                 ^
secp256k1/Int.cpp:504:9: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  504 |   if( n<64 ) {
      |         ^
secp256k1/Int.cpp:507:23: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  507 |     uint32_t nb64 = n/64;
      |                       ^
secp256k1/Int.cpp:508:14: warning: variable name 'nb' is too short, expected at least 3 characters [readability-identifier-length]
  508 |     uint32_t nb   = n%64;
      |              ^
secp256k1/Int.cpp:508:23: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |     uint32_t nb   = n%64;
      |                       ^
secp256k1/Int.cpp:509:33: warning: statement should be inside braces [readability-braces-around-statements]
  509 |     for(uint32_t i=0;i<nb64;i++) ShiftL64Bit();
      |                                 ^              
      |                                  {
secp256k1/Int.cpp:522:37: warning: statement should be inside braces [readability-braces-around-statements]
  522 |   if(((int32_t)bits[NB32BLOCK-2])<0)
      |                                     ^
      |                                      {
  523 |     bits[NB32BLOCK-1] = 0xFFFFFFFF;
  524 |   else
      |   } 
secp256k1/Int.cpp:523:25: warning: 0xFFFFFFFF is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  523 |     bits[NB32BLOCK-1] = 0xFFFFFFFF;
      |                         ^
secp256k1/Int.cpp:524:7: warning: statement should be inside braces [readability-braces-around-statements]
  524 |   else
      |       ^
      |        {
  525 |     bits[NB32BLOCK-1]=0;
      |                         
secp256k1/Int.cpp:536:41: warning: statement should be inside braces [readability-braces-around-statements]
  536 |         if (((int64_t)bits64[NB64BLOCK - 2])<0)
      |                                                ^
      |                                                 {
  537 |                 bits64[NB64BLOCK - 1] = 0xFFFFFFFFFFFFFFFF;
  538 |         else
      |         } 
secp256k1/Int.cpp:537:27: warning: 0xFFFFFFFFFFFFFFFF is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  537 |                 bits64[NB64BLOCK - 1] = 0xFFFFFFFFFFFFFFFF;
      |                                         ^
secp256k1/Int.cpp:538:6: warning: statement should be inside braces [readability-braces-around-statements]
  538 |         else
      |             ^
      |              {
  539 |                 bits64[NB64BLOCK - 1] = 0;
      |                                           
secp256k1/Int.cpp:547:9: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  547 |   if( n<64 ) {
      |         ^
secp256k1/Int.cpp:550:23: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  550 |     uint32_t nb64 = n/64;
      |                       ^
secp256k1/Int.cpp:551:14: warning: variable name 'nb' is too short, expected at least 3 characters [readability-identifier-length]
  551 |     uint32_t nb   = n%64;
      |              ^
secp256k1/Int.cpp:551:23: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  551 |     uint32_t nb   = n%64;
      |                       ^
secp256k1/Int.cpp:552:33: warning: statement should be inside braces [readability-braces-around-statements]
  552 |     for(uint32_t i=0;i<nb64;i++) ShiftR64Bit();
      |                                 ^              
      |                                  {
secp256k1/Int.cpp:560:21: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  560 | void Int::Mult(Int *a) {
      |                     ^
secp256k1/Int.cpp:562:7: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  562 |   Int b(this);
      |       ^
secp256k1/Int.cpp:569:25: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  569 | void Int::IMult(int64_t a) {
      |                         ^
secp256k1/Int.cpp:583:25: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  583 | void Int::Mult(uint64_t a) {
      |                         ^
secp256k1/Int.cpp:590:22: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  590 | void Int::IMult(Int *a, int64_t b) {
      |                      ^
secp256k1/Int.cpp:590:33: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  590 | void Int::IMult(Int *a, int64_t b) {
      |                                 ^
secp256k1/Int.cpp:605:21: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  605 | void Int::Mult(Int *a, uint64_t b) {
      |                     ^
secp256k1/Int.cpp:605:33: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  605 | void Int::Mult(Int *a, uint64_t b) {
      |                                 ^
secp256k1/Int.cpp:613:21: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  613 | void Int::Mult(Int *a,Int *b) {
      |                     ^
secp256k1/Int.cpp:613:28: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  613 | void Int::Mult(Int *a,Int *b) {
      |                            ^
secp256k1/Int.cpp:615:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  615 |   unsigned char c = 0;
      |                 ^
secp256k1/Int.cpp:616:12: warning: variable name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  616 |   uint64_t h;
      |            ^
secp256k1/Int.cpp:617:12: warning: variable name 'pr' is too short, expected at least 3 characters [readability-identifier-length]
  617 |   uint64_t pr = 0;
      |            ^
secp256k1/Int.cpp:639:21: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  639 | void Int::Mult(Int *a,uint32_t b) {
      |                     ^
secp256k1/Int.cpp:639:32: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  639 | void Int::Mult(Int *a,uint32_t b) {
      |                                ^
secp256k1/Int.cpp:645:36: warning: parameter name 'dw' is too short, expected at least 3 characters [readability-identifier-length]
  645 | static uint32_t bitLength(uint32_t dw) {
      |                                    ^
secp256k1/Int.cpp:647:19: warning: 0x80000000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  647 |   uint32_t mask = 0x80000000;
      |                   ^
secp256k1/Int.cpp:648:12: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  648 |   uint32_t b=0;
      |            ^
secp256k1/Int.cpp:649:11: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  649 |   while(b<32 && (mask & dw)==0) {
      |           ^
secp256k1/Int.cpp:661:7: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  661 |   Int t(this);
      |       ^
secp256k1/Int.cpp:662:19: warning: statement should be inside braces [readability-braces-around-statements]
  662 |   if(IsNegative())
      |                   ^
      |                    {
  663 |           t.Neg();
      |                   
secp256k1/Int.cpp:665:7: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  665 |   int i=NB32BLOCK-1;
      |       ^
secp256k1/Int.cpp:666:30: warning: statement should be inside braces [readability-braces-around-statements]
  666 |   while(i>=0 && t.bits[i]==0) i--;
      |                              ^    
      |                               {
secp256k1/Int.cpp:667:10: warning: statement should be inside braces [readability-braces-around-statements]
  667 |   if(i<0) return 0;
      |          ^         
      |           {
secp256k1/Int.cpp:668:11: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  668 |   return (32-bitLength(t.bits[i])) + i*32;
      |           ^
secp256k1/Int.cpp:668:40: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  668 |   return (32-bitLength(t.bits[i])) + i*32;
      |                                        ^
secp256k1/Int.cpp:676:7: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  676 |   int i=NB32BLOCK-1;
      |       ^
secp256k1/Int.cpp:677:27: warning: statement should be inside braces [readability-braces-around-statements]
  677 |   while(i>0 && bits[i]==0) i--;
      |                           ^    
      |                            {
secp256k1/Int.cpp:684:25: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  684 | void Int::MultModN(Int *a,Int *b,Int *n) {
      |                         ^
secp256k1/Int.cpp:684:32: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  684 | void Int::MultModN(Int *a,Int *b,Int *n) {
      |                                ^
secp256k1/Int.cpp:686:7: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  686 |   Int r;
      |       ^
secp256k1/Int.cpp:697:7: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  697 |   Int r;
      |       ^
secp256k1/Int.cpp:708:7: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  708 |   int b=0;
      |       ^
secp256k1/Int.cpp:709:22: warning: statement should be inside braces [readability-braces-around-statements]
  709 |   while(GetBit(b)==0) b++;
      |                      ^    
      |                       {
secp256k1/Int.cpp:718:38: warning: statement should be inside braces [readability-braces-around-statements]
  718 |   for (int i = n; i < NB32BLOCK; i++)
      |                                      ^
      |                                       {
  719 |           bits[i] = 0;
      |                       
secp256k1/Int.cpp:727:20: warning: statement should be inside braces [readability-braces-around-statements]
  727 |   if (IsNegative())
      |                    ^
      |                     {
  728 |     Neg();
      |           
secp256k1/Int.cpp:738:11: warning: variable name 'nb' is too short, expected at least 3 characters [readability-identifier-length]
  738 |         uint32_t nb = nbit/32;
      |                  ^
secp256k1/Int.cpp:738:21: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  738 |         uint32_t nb = nbit/32;
      |                            ^
secp256k1/Int.cpp:739:26: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  739 |         uint32_t leftBit = nbit%32;
      |                                 ^
secp256k1/Int.cpp:742:11: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  742 |         uint32_t i=0;
      |                  ^
secp256k1/Int.cpp:743:16: warning: statement should be inside braces [readability-braces-around-statements]
  743 |         for(;i<nb;i++)
      |                       ^
      |                        {
  744 |                 bits[i]=rndl();
      |                                
secp256k1/Int.cpp:752:14: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  752 |   int nbit = 256;
      |              ^
secp256k1/Int.cpp:753:12: warning: variable name 'nb' is too short, expected at least 3 characters [readability-identifier-length]
  753 |   uint32_t nb = nbit/32;
      |            ^
secp256k1/Int.cpp:753:22: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  753 |   uint32_t nb = nbit/32;
      |                      ^
secp256k1/Int.cpp:756:11: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  756 |         uint32_t i=0;
      |                  ^
secp256k1/Int.cpp:757:16: warning: statement should be inside braces [readability-braces-around-statements]
  757 |         for(;i<nb;i++)
      |                       ^
      |                        {
  758 |                 bits[i]=rndl();
      |                                
secp256k1/Int.cpp:759:3: warning: misleading indentation: statement is indented too deeply [readability-misleading-indentation]
  759 |   this->Mod(&diff);
      |   ^
secp256k1/Int.cpp:757:2: note: did you mean this line to be inside this 'for'
  757 |         for(;i<nb;i++)
      |         ^
secp256k1/Int.cpp:765:11: warning: function 'Div' has cognitive complexity of 32 (threshold 25) [readability-function-cognitive-complexity]
  765 | void Int::Div(Int *a,Int *mod) {
      |           ^
secp256k1/Int.cpp:767:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  767 |   if(a->IsGreater(this)) {
      |   ^
secp256k1/Int.cpp:768:5: note: +2, including nesting penalty of 1, nesting level increased to 2
  768 |     if(mod) mod->Set(this);
      |     ^
secp256k1/Int.cpp:773:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  773 |   if(a->IsZero()) {
      |   ^
secp256k1/Int.cpp:778:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  778 |   if(IsEqual(a)) {
      |   ^
secp256k1/Int.cpp:779:5: note: +2, including nesting penalty of 1, nesting level increased to 2
  779 |     if(mod) mod->CLEAR();
      |     ^
secp256k1/Int.cpp:798:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  798 |   if (shift > 0) {
      |   ^
secp256k1/Int.cpp:805:31: note: +1, including nesting penalty of 0, nesting level increased to 1
  805 |   uint32_t  _dl    = (dSize>1)?d.bits[dSize-2]:0;
      |                               ^
secp256k1/Int.cpp:809:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  809 |   for(int j=0; j<(int)qSize; j++) {
      |   ^
secp256k1/Int.cpp:818:5: note: +2, including nesting penalty of 1, nesting level increased to 2
  818 |     if (nh == _dh) {
      |     ^
secp256k1/Int.cpp:822:7: note: +1, nesting level increased to 2
  822 |     } else {
      |       ^
secp256k1/Int.cpp:828:5: note: +2, including nesting penalty of 1, nesting level increased to 2
  828 |     if (qhat == 0)
      |     ^
secp256k1/Int.cpp:831:5: note: +2, including nesting penalty of 1, nesting level increased to 2
  831 |     if (!skipCorrection) {
      |     ^
secp256k1/Int.cpp:838:7: note: +3, including nesting penalty of 2, nesting level increased to 3
  838 |       if (estProduct>rs) {
      |       ^
secp256k1/Int.cpp:841:9: note: +4, including nesting penalty of 3, nesting level increased to 4
  841 |         if ((uint64_t)qrem >= dhLong) {
      |         ^
secp256k1/Int.cpp:844:11: note: +5, including nesting penalty of 4, nesting level increased to 5
  844 |           if(estProduct>rs)
      |           ^
secp256k1/Int.cpp:854:5: note: +2, including nesting penalty of 1, nesting level increased to 2
  854 |     if( rem.IsNegative() ) {
      |     ^
secp256k1/Int.cpp:864:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  864 |  if( mod ) {
      |  ^
secp256k1/Int.cpp:765:20: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  765 | void Int::Div(Int *a,Int *mod) {
      |                    ^
secp256k1/Int.cpp:768:8: warning: implicit conversion 'Int *' -> 'bool' [readability-implicit-bool-conversion]
  768 |     if(mod) mod->Set(this);
      |        ^  
      |            != nullptr
secp256k1/Int.cpp:768:12: warning: statement should be inside braces [readability-braces-around-statements]
  768 |     if(mod) mod->Set(this);
      |            ^               
      |             {
secp256k1/Int.cpp:779:8: warning: implicit conversion 'Int *' -> 'bool' [readability-implicit-bool-conversion]
  779 |     if(mod) mod->CLEAR();
      |        ^  
      |            != nullptr
secp256k1/Int.cpp:779:12: warning: statement should be inside braces [readability-braces-around-statements]
  779 |     if(mod) mod->CLEAR();
      |            ^             
      |             {
secp256k1/Int.cpp:787:7: warning: variable name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  787 |   Int d(a);
      |       ^
secp256k1/Int.cpp:788:7: warning: variable name 'dq' is too short, expected at least 3 characters [readability-identifier-length]
  788 |   Int dq;
      |       ^
secp256k1/Int.cpp:806:7: warning: variable name 'sb' is too short, expected at least 3 characters [readability-identifier-length]
  806 |   int sb = tSize-1;
      |       ^
secp256k1/Int.cpp:814:26: warning: implicit conversion 'bool' -> 'int' [readability-implicit-bool-conversion]
  814 |     int skipCorrection = false;
      |                          ^~~~~
      |                          0
secp256k1/Int.cpp:815:14: warning: variable name 'nh' is too short, expected at least 3 characters [readability-identifier-length]
  815 |     uint32_t nh = rem.bits[sb-j+1];
      |              ^
secp256k1/Int.cpp:816:14: warning: variable name 'nm' is too short, expected at least 3 characters [readability-identifier-length]
  816 |     uint32_t nm = rem.bits[sb-j];
      |              ^
secp256k1/Int.cpp:821:24: warning: implicit conversion 'bool' -> 'int' [readability-implicit-bool-conversion]
  821 |       skipCorrection = qrem < nh;
      |                        ^        
      |                        static_cast<int>( )
secp256k1/Int.cpp:823:42: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  823 |       uint64_t nChunk = ((uint64_t)nh << 32) | (uint64_t)nm;
      |                                          ^
secp256k1/Int.cpp:828:19: warning: statement should be inside braces [readability-braces-around-statements]
  828 |     if (qhat == 0)
      |                   ^
      |                    {
  829 |       continue;
      |                
secp256k1/Int.cpp:831:10: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  831 |     if (!skipCorrection) {
      |         ~^             
      |                         == 0
secp256k1/Int.cpp:834:16: warning: variable name 'nl' is too short, expected at least 3 characters [readability-identifier-length]
  834 |       uint64_t nl = (uint64_t)rem.bits[sb-j-1];
      |                ^
secp256k1/Int.cpp:835:16: warning: variable name 'rs' is too short, expected at least 3 characters [readability-identifier-length]
  835 |       uint64_t rs = ((uint64_t)qrem << 32) | nl;
      |                ^
secp256k1/Int.cpp:835:40: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  835 |       uint64_t rs = ((uint64_t)qrem << 32) | nl;
      |                                        ^
secp256k1/Int.cpp:840:16: warning: redundant explicit casting to the same type 'uint32_t' (aka 'unsigned int') as the sub-expression, remove this casting [readability-redundant-casting]
  840 |         qrem = (uint32_t)(qrem + (uint32_t)dhLong);
      |                ^~~~~~~~~~~                       ~
      |                (                                 )
secp256k1/Int.cpp:843:35: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  843 |           rs = ((uint64_t)qrem << 32) | nl;
      |                                   ^
secp256k1/Int.cpp:844:28: warning: statement should be inside braces [readability-braces-around-statements]
  844 |           if(estProduct>rs)
      |                            ^
      |                             {
  845 |             qhat--;
      |                    
secp256k1/Int.cpp:864:6: warning: implicit conversion 'Int *' -> 'bool' [readability-implicit-bool-conversion]
  864 |  if( mod ) {
      |      ^
      |          != nullptr
secp256k1/Int.cpp:874:20: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  874 | void Int::GCD(Int *a) {
      |                    ^
secp256k1/Int.cpp:875:14: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
  875 |     uint32_t k;
      |              ^
secp256k1/Int.cpp:876:14: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  876 |     uint32_t b;
      |              ^
secp256k1/Int.cpp:877:9: warning: variable name 'U' is too short, expected at least 3 characters [readability-identifier-length]
  877 |     Int U(this);
      |         ^
secp256k1/Int.cpp:878:9: warning: variable name 'V' is too short, expected at least 3 characters [readability-identifier-length]
  878 |     Int V(a);
      |         ^
secp256k1/Int.cpp:879:9: warning: variable name 'T' is too short, expected at least 3 characters [readability-identifier-length]
  879 |     Int T;
      |         ^
secp256k1/Int.cpp:888:23: warning: statement should be inside braces [readability-braces-around-statements]
  888 |     if(U.IsNegative()) U.Neg();
      |                       ^        
      |                        {
secp256k1/Int.cpp:889:23: warning: statement should be inside braces [readability-braces-around-statements]
  889 |     if(V.IsNegative()) V.Neg();
      |                       ^        
      |                        {
secp256k1/Int.cpp:891:45: warning: statement should be inside braces [readability-braces-around-statements]
  891 |     while (U.GetBit(k)==0 && V.GetBit(k)==0)
      |                                             ^
      |                                              {
  892 |       k++;
      |           
secp256k1/Int.cpp:904:34: warning: statement should be inside braces [readability-braces-around-statements]
  904 |         b=0;while(T.GetBit(b)==0) b++;
      |                                  ^    
      |                                   {
secp256k1/Int.cpp:909:34: warning: statement should be inside braces [readability-braces-around-statements]
  909 |         b=0;while(T.GetBit(b)==0) b++;
      |                                  ^    
      |                                   {
secp256k1/Int.cpp:924:7: warning: variable name 'pw' is too short, expected at least 3 characters [readability-identifier-length]
  924 |   Int pw((uint64_t)1);
      |       ^
secp256k1/Int.cpp:925:7: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  925 |   Int c;
      |       ^
secp256k1/Int.cpp:928:14: warning: variable name 'id' is too short, expected at least 3 characters [readability-identifier-length]
  928 |     uint32_t id = (uint32_t)(value[i]-'0');
      |              ^
secp256k1/Int.cpp:932:13: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  932 |     pw.Mult(10);
      |             ^
secp256k1/Int.cpp:940:12: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  940 |   SetBaseN(16,"0123456789ABCDEF",value);
      |            ^
secp256k1/Int.cpp:946:19: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  946 |   return GetBaseN(10,"0123456789");
      |                   ^
secp256k1/Int.cpp:952:19: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  952 |   return GetBaseN(16,"0123456789abcdef");
      |                   ^
secp256k1/Int.cpp:958:33: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  958 |   char *tmp =  (char*) calloc(1,256);
      |                                 ^
secp256k1/Int.cpp:959:12: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  959 |         char bStr[256];
      |                   ^
secp256k1/Int.cpp:964:12: warning: statement should be inside braces [readability-braces-around-statements]
  964 |           if(i!=0) strcat(tmp, " ");
      |                   ^                 
      |                    {
secp256k1/Int.cpp:972:33: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  972 |   char *tmp =  (char*) calloc(1,256);
      |                                 ^
secp256k1/Int.cpp:973:13: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  973 |   char bStr[256];
      |             ^
secp256k1/Int.cpp:987:25: warning: statement should be inside braces [readability-braces-around-statements]
  987 |     if (i != nbDigit -1) strcat(tmp, ",");
      |                         ^                 
      |                          {
secp256k1/Int.cpp:997:7: warning: variable name 'pw' is too short, expected at least 3 characters [readability-identifier-length]
  997 |   Int pw((uint64_t)1);
      |       ^
secp256k1/Int.cpp:998:7: warning: variable name 'nb' is too short, expected at least 3 characters [readability-identifier-length]
  998 |   Int nb((uint64_t)n);
      |       ^
secp256k1/Int.cpp:999:7: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  999 |   Int c;
      |       ^
secp256k1/Int.cpp:1002:11: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
 1002 |     char *p = strchr((char*)charset,toupper(value[i]));
      |           ^
secp256k1/Int.cpp:1003:9: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
 1003 |     if(!p) {
      |        ~^
      |           == nullptr
secp256k1/Int.cpp:1007:9: warning: variable name 'id' is too short, expected at least 3 characters [readability-identifier-length]
 1007 |     int id = (int)(p-charset);
      |         ^
secp256k1/Int.cpp:1018:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1018 |   char *ret = (char*) calloc(1,1024);
      |                                ^
secp256k1/Int.cpp:1020:7: warning: variable name 'N' is too short, expected at least 3 characters [readability-identifier-length]
 1020 |   Int N(this);
      |       ^
secp256k1/Int.cpp:1022:20: warning: implicit conversion 'bool' -> 'int' [readability-implicit-bool-conversion]
 1022 |   int isNegative = N.IsNegative();
      |                    ^             
      |                    static_cast<int>( )
secp256k1/Int.cpp:1023:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1023 |   if (isNegative) N.Neg();
      |       ^         
      |                  != 0
secp256k1/Int.cpp:1023:18: warning: statement should be inside braces [readability-braces-around-statements]
 1023 |   if (isNegative) N.Neg();
      |                  ^        
      |                   {
secp256k1/Int.cpp:1026:24: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1026 |   unsigned char digits[1024];
      |                        ^
secp256k1/Int.cpp:1030:35: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1030 |   for (int i = 0; i < NB64BLOCK * 8; i++) {
      |                                   ^
secp256k1/Int.cpp:1031:46: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1031 |     unsigned int carry = N.GetByte(NB64BLOCK*8 - i - 1);
      |                                              ^
secp256k1/Int.cpp:1033:45: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1033 |       carry += (unsigned int)(digits[j]) << 8;
      |                                             ^
secp256k1/Int.cpp:1044:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1044 |   if (isNegative)
      |       ^         
      |                  != 0
secp256k1/Int.cpp:1044:18: warning: statement should be inside braces [readability-braces-around-statements]
 1044 |   if (isNegative)
      |                  ^
      |                   {
 1045 |     ret[offset++] = '-';
      |                         
secp256k1/Int.cpp:1047:38: warning: statement should be inside braces [readability-braces-around-statements]
 1047 |   for (int i = 0; i < digitslen; i++)
      |                                      ^
      |                                       {
 1048 |     ret[offset++] = charset[digits[digitslen - 1 - i]];
      |                                                        
secp256k1/Int.cpp:1050:19: warning: statement should be inside braces [readability-braces-around-statements]
 1050 |   if (offset == 0)
      |                   ^
      |                    {
 1051 |     ret[offset] = '0';
      |                       
secp256k1/Int.cpp:1059:22: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1059 |   uint32_t byte = n>>5;
      |                      ^
secp256k1/Int.cpp:1060:21: warning: 31 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1060 |   uint32_t bit  = n&31;
      |                     ^
secp256k1/Int.cpp:1062:10: warning: implicit conversion 'bool' -> 'int' [readability-implicit-bool-conversion]
 1062 |   return (bits[byte] & mask)!=0;
      |          ^                     
      |          static_cast<int>(     )
secp256k1/Int.cpp:1067:33: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1067 |   char *ret =  (char*) calloc(1,1024);
      |                                 ^
secp256k1/Int.cpp:1068:7: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 1068 |   int k=0;
      |       ^
secp256k1/Int.cpp:1070:23: warning: 0x80000000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1070 |     unsigned int mask=0x80000000;
      |                       ^
secp256k1/Int.cpp:1071:19: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1071 |     for(int j=0;j<32;j++) {
      |                   ^
secp256k1/Int.cpp:1072:10: warning: implicit conversion 'unsigned int' -> 'bool' [readability-implicit-bool-conversion]
 1072 |       if(bits[i]&mask) ret[k]='1';
      |          ^           
      |          (           ) != 0u
secp256k1/Int.cpp:1072:23: warning: statement should be inside braces [readability-braces-around-statements]
 1072 |       if(bits[i]&mask) ret[k]='1';
      |                       ^
      |                        {
 1073 |       else             ret[k]='0';
      |       } 
secp256k1/Int.cpp:1073:11: warning: statement should be inside braces [readability-braces-around-statements]
 1073 |       else             ret[k]='0';
      |           ^                       
      |            {
852 warnings and 20 errors generated.
Error while processing /home/engine/project/albertobsd-keyhunt/secp256k1/Int.cpp.
Suppressed 661 warnings (661 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
Found compiler error(s).
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/bloom/bloom.cpp
bloom/bloom.cpp:34:45: warning: parameter name 'bf' is too short, expected at least 3 characters [readability-identifier-length]
   34 | inline static int test_bit_set_bit(uint8_t *bf, uint64_t bit, int set_bit)
      |                                             ^
bloom/bloom.cpp:37:11: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   37 |   uint8_t c = bf[byte];  // expensive memory access
      |           ^
bloom/bloom.cpp:38:30: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   38 |   uint8_t mask = 1 << (bit % 8);
      |                              ^
bloom/bloom.cpp:39:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   39 |   if (c & mask) {
      |       ^       
      |       (       ) != 0
bloom/bloom.cpp:41:5: warning: do not use 'else' after 'return' [readability-else-after-return]
   41 |   } else {
      |     ^~~~~~
   42 |     if (set_bit) {
      |     ~~~~~~~~~~~~~~
   43 |                 bf[byte] = c | mask;
      |                 ~~~~~~~~~~~~~~~~~~~~
   44 |     }
      |     ~
   45 |     return 0;
      |     ~~~~~~~~~
   46 |   }
      |   ~
bloom/bloom.cpp:42:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   42 |     if (set_bit) {
      |         ^
note: this fix will not be applied because it overlaps with another fix
bloom/bloom.cpp:49:37: warning: parameter name 'bf' is too short, expected at least 3 characters [readability-identifier-length]
   49 | inline static int test_bit(uint8_t *bf, uint64_t bit)
      |                                     ^
bloom/bloom.cpp:49:37: warning: pointer parameter 'bf' can be pointer to const [readability-non-const-parameter]
   49 | inline static int test_bit(uint8_t *bf, uint64_t bit)
      |                                     ^
      |                            const 
bloom/bloom.cpp:52:11: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   52 |   uint8_t c = bf[byte];  // expensive memory access
      |           ^
bloom/bloom.cpp:53:30: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   53 |   uint8_t mask = 1 << (bit % 8);
      |                              ^
bloom/bloom.cpp:54:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   54 |   if (c & mask) {
      |       ^       
      |       (       ) != 0
bloom/bloom.cpp:56:5: warning: do not use 'else' after 'return' [readability-else-after-return]
   56 |   } else {
      |     ^~~~~~
   57 |     return 0;
      |     ~~~~~~~~~
   58 |   }
      |   ~
bloom/bloom.cpp:68:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   68 |   uint64_t a = XXH64(buffer, len, 0x59f2815b16f81798);
      |            ^
bloom/bloom.cpp:68:35: warning: 0x59f2815b16f81798 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   68 |   uint64_t a = XXH64(buffer, len, 0x59f2815b16f81798);
      |                                   ^
bloom/bloom.cpp:69:12: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
   69 |   uint64_t b = XXH64(buffer, len, a);
      |            ^
bloom/bloom.cpp:70:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
   70 |   uint64_t x;
      |            ^
bloom/bloom.cpp:71:11: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
   71 |   uint8_t i;
      |           ^
bloom/bloom.cpp:74:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   74 |     if (test_bit_set_bit(bloom->bf, x, add)) {
      |         ^                                  
      |                                             != 0
bloom/bloom.cpp:76:17: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   76 |     } else if (!add) {
      |                ~^  
      |                     == 0
bloom/bloom.cpp:96:17: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   96 |   if (entries < 1000 || error <= 0 || error >= 1) {
      |                 ^
bloom/bloom.cpp:103:23: warning: 0.480453013918201 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  103 |   long double denom = 0.480453013918201; // ln(2)^2
      |                       ^
bloom/bloom.cpp:110:18: warning: redundant explicit casting to the same type 'uint64_t' (aka 'unsigned long') as the sub-expression, remove this casting [readability-redundant-casting]
  110 |   bloom->bytes = (uint64_t) bloom->bits / 8;
      |                  ^~~~~~~~~~
bloom/bloom.h:32:12: note: source type originates from referencing this member
   32 |   uint64_t bits;
      |   ~~~~~~~~ ^
bloom/bloom.cpp:110:43: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  110 |   bloom->bytes = (uint64_t) bloom->bits / 8;
      |                                           ^
bloom/bloom.cpp:111:7: warning: implicit conversion 'uint64_t' (aka 'unsigned long') -> 'bool' [readability-implicit-bool-conversion]
  111 |   if (bloom->bits % 8) {
      |       ^              
      |       (              ) != 0u
bloom/bloom.cpp:111:21: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  111 |   if (bloom->bits % 8) {
      |                     ^
bloom/bloom.cpp:115:33: warning: 0.693147180559945 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  115 |   bloom->hashes = (uint8_t)ceil(0.693147180559945 * bloom->bpe);  // ln(2)
      |                                 ^
bloom/bloom.cpp:135:12: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  135 |   uint64_t a = XXH64(buffer, len, 0x59f2815b16f81798);
      |            ^
bloom/bloom.cpp:135:35: warning: 0x59f2815b16f81798 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  135 |   uint64_t a = XXH64(buffer, len, 0x59f2815b16f81798);
      |                                   ^
bloom/bloom.cpp:136:12: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  136 |   uint64_t b = XXH64(buffer, len, a);
      |            ^
bloom/bloom.cpp:137:12: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  137 |   uint64_t x;
      |            ^
bloom/bloom.cpp:138:11: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  138 |   uint8_t i;
      |           ^
bloom/bloom.cpp:141:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  141 |     if (test_bit(bloom->bf, x)) {
      |         ^                     
      |                                != 0
bloom/bloom.cpp:162:8: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> 'bool' [readability-implicit-bool-conversion]
  162 |   if (!bloom->ready) { printf(" *** NOT READY ***\n"); }
      |       ~^           
      |                     == 0u
bloom/bloom.cpp:169:16: warning: variable name 'KB' is too short, expected at least 3 characters [readability-identifier-length]
  169 |   unsigned int KB = bloom->bytes / 1024;
      |                ^
bloom/bloom.cpp:169:36: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  169 |   unsigned int KB = bloom->bytes / 1024;
      |                                    ^
bloom/bloom.cpp:170:16: warning: variable name 'MB' is too short, expected at least 3 characters [readability-identifier-length]
  170 |   unsigned int MB = KB / 1024;
      |                ^
bloom/bloom.cpp:170:26: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  170 |   unsigned int MB = KB / 1024;
      |                          ^
bloom/bloom.cpp:177:7: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> 'bool' [readability-implicit-bool-conversion]
  177 |   if (bloom->ready) {
      |       ^           
      |                    != 0u
bloom/bloom.cpp:185:8: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> 'bool' [readability-implicit-bool-conversion]
  185 |   if (!bloom->ready) return 1;
      |       ~^           
      |                     == 0u
bloom/bloom.cpp:185:21: warning: statement should be inside braces [readability-braces-around-statements]
  185 |   if (!bloom->ready) return 1;
      |                     ^         
      |                      {
876 warnings generated.
Suppressed 836 warnings (836 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/secp256k1/IntMod.cpp
secp256k1/IntMod.cpp:25:16: warning: variable name '_P' is too short, expected at least 3 characters [readability-identifier-length]
   25 | static Int     _P;       // Field characteristic
      |                ^
secp256k1/IntMod.cpp:26:16: warning: variable name '_R' is too short, expected at least 3 characters [readability-identifier-length]
   26 | static Int     _R;       // Montgomery multiplication R
      |                ^
secp256k1/IntMod.cpp:39:23: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   39 | void Int::ModAdd(Int *a) {
      |                       ^
secp256k1/IntMod.cpp:40:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   40 |   Int p;
      |       ^
secp256k1/IntMod.cpp:43:21: warning: statement should be inside braces [readability-braces-around-statements]
   43 |   if(p.IsPositive())
      |                     ^
      |                      {
   44 |     Set(&p);
      |             
secp256k1/IntMod.cpp:49:23: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   49 | void Int::ModAdd(Int *a, Int *b) {
      |                       ^
secp256k1/IntMod.cpp:49:31: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
   49 | void Int::ModAdd(Int *a, Int *b) {
      |                               ^
secp256k1/IntMod.cpp:50:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   50 |   Int p;
      |       ^
secp256k1/IntMod.cpp:53:21: warning: statement should be inside braces [readability-braces-around-statements]
   53 |   if(p.IsPositive())
      |                     ^
      |                      {
   54 |     Set(&p);
      |             
secp256k1/IntMod.cpp:60:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   60 |   Int p;
      |       ^
secp256k1/IntMod.cpp:63:21: warning: statement should be inside braces [readability-braces-around-statements]
   63 |   if(p.IsPositive())
      |                     ^
      |                      {
   64 |     Set(&p);
      |             
secp256k1/IntMod.cpp:69:27: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   69 | void Int::ModAdd(uint64_t a) {
      |                           ^
secp256k1/IntMod.cpp:70:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   70 |   Int p;
      |       ^
secp256k1/IntMod.cpp:73:21: warning: statement should be inside braces [readability-braces-around-statements]
   73 |   if(p.IsPositive())
      |                     ^
      |                      {
   74 |     Set(&p);
      |             
secp256k1/IntMod.cpp:79:23: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   79 | void Int::ModSub(Int *a) {
      |                       ^
secp256k1/IntMod.cpp:81:20: warning: statement should be inside braces [readability-braces-around-statements]
   81 |   if (IsNegative())
      |                    ^
      |                     {
   82 |     Add(&_P);
      |              
secp256k1/IntMod.cpp:87:27: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   87 | void Int::ModSub(uint64_t a) {
      |                           ^
secp256k1/IntMod.cpp:89:20: warning: statement should be inside braces [readability-braces-around-statements]
   89 |   if (IsNegative())
      |                    ^
      |                     {
   90 |     Add(&_P);
      |              
secp256k1/IntMod.cpp:95:23: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   95 | void Int::ModSub(Int *a,Int *b) {
      |                       ^
secp256k1/IntMod.cpp:95:30: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
   95 | void Int::ModSub(Int *a,Int *b) {
      |                              ^
secp256k1/IntMod.cpp:97:20: warning: statement should be inside braces [readability-braces-around-statements]
   97 |   if (IsNegative())
      |                    ^
      |                     {
   98 |     Add(&_P);
      |              
secp256k1/IntMod.cpp:123:7: warning: variable name 'u' is too short, expected at least 3 characters [readability-identifier-length]
  123 |   Int u(&_P);
      |       ^
secp256k1/IntMod.cpp:124:7: warning: variable name 'v' is too short, expected at least 3 characters [readability-identifier-length]
  124 |   Int v(this);
      |       ^
secp256k1/IntMod.cpp:125:7: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  125 |   Int r((int64_t)0);
      |       ^
secp256k1/IntMod.cpp:126:7: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  126 |   Int s((int64_t)1);
      |       ^
secp256k1/IntMod.cpp:400:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  400 |   int64_t uu, uv, vu, vv;
      |   ^~~~~~~~~~~~~~~~~~~~~~~
secp256k1/IntMod.cpp:400:11: warning: variable name 'uu' is too short, expected at least 3 characters [readability-identifier-length]
  400 |   int64_t uu, uv, vu, vv;
      |           ^
secp256k1/IntMod.cpp:400:15: warning: variable name 'uv' is too short, expected at least 3 characters [readability-identifier-length]
  400 |   int64_t uu, uv, vu, vv;
      |               ^
secp256k1/IntMod.cpp:400:19: warning: variable name 'vu' is too short, expected at least 3 characters [readability-identifier-length]
  400 |   int64_t uu, uv, vu, vv;
      |                   ^
secp256k1/IntMod.cpp:400:23: warning: variable name 'vv' is too short, expected at least 3 characters [readability-identifier-length]
  400 |   int64_t uu, uv, vu, vv;
      |                       ^
secp256k1/IntMod.cpp:401:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  401 |   int64_t v0, u0;
      |   ^~~~~~~~~~~~~~~
secp256k1/IntMod.cpp:401:11: warning: variable name 'v0' is too short, expected at least 3 characters [readability-identifier-length]
  401 |   int64_t v0, u0;
      |           ^
secp256k1/IntMod.cpp:401:15: warning: variable name 'u0' is too short, expected at least 3 characters [readability-identifier-length]
  401 |   int64_t v0, u0;
      |               ^
secp256k1/IntMod.cpp:421:38: warning: 62 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  421 |       while (IS_EVEN(u0) && bitCount<62) {
      |                                      ^
secp256k1/IntMod.cpp:430:23: warning: 62 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  430 |       if (bitCount == 62)
      |                       ^
secp256k1/IntMod.cpp:430:26: warning: statement should be inside braces [readability-braces-around-statements]
  430 |       if (bitCount == 62)
      |                          ^
      |                           {
  431 |         break;
      |               
secp256k1/IntMod.cpp:461:14: warning: variable name 'r0' is too short, expected at least 3 characters [readability-identifier-length]
  461 |     uint64_t r0 = ((uu_r.bits64[0] + uv_s.bits64[0]) * MM64) & MSK62;
      |              ^
secp256k1/IntMod.cpp:462:14: warning: variable name 's0' is too short, expected at least 3 characters [readability-identifier-length]
  462 |     uint64_t s0 = ((vu_r.bits64[0] + vv_s.bits64[0]) * MM64) & MSK62;
      |              ^
secp256k1/IntMod.cpp:481:12: warning: 62 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  481 |     shiftR(62, u.bits64);
      |            ^
secp256k1/IntMod.cpp:482:9: warning: 62 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  482 |         shiftR(62, v.bits64);
      |                ^
secp256k1/IntMod.cpp:483:9: warning: 62 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  483 |         shiftR(62, r.bits64);
      |                ^
secp256k1/IntMod.cpp:484:9: warning: 62 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  484 |         shiftR(62, s.bits64);
      |                ^
secp256k1/IntMod.cpp:501:22: warning: statement should be inside braces [readability-braces-around-statements]
  501 |   if (s.IsNegative())
      |                      ^
      |                       {
  502 |     s.Add(&_P);
      |                
secp256k1/IntMod.cpp:504:31: warning: statement should be inside braces [readability-braces-around-statements]
  504 |   if (s.IsGreaterOrEqual(&_P))
      |                               ^
      |                                {
  505 |     s.Sub(&_P);
      |                
secp256k1/IntMod.cpp:515:23: warning: parameter name 'e' is too short, expected at least 3 characters [readability-identifier-length]
  515 | void Int::ModExp(Int *e) {
      |                       ^
secp256k1/IntMod.cpp:520:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  520 |     if (e->GetBit(i))
      |         ^           
      |                      != 0
secp256k1/IntMod.cpp:520:22: warning: statement should be inside braces [readability-braces-around-statements]
  520 |     if (e->GetBit(i))
      |                      ^
      |                       {
  521 |       ModMul(&base);
      |                     
secp256k1/IntMod.cpp:529:23: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  529 | void Int::ModMul(Int *a) {
      |                       ^
secp256k1/IntMod.cpp:531:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  531 |   Int p;
      |       ^
secp256k1/IntMod.cpp:539:26: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  539 | void Int::ModSquare(Int *a) {
      |                          ^
secp256k1/IntMod.cpp:541:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  541 |   Int p;
      |       ^
secp256k1/IntMod.cpp:549:24: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  549 | void Int::ModCube(Int *a) {
      |                        ^
secp256k1/IntMod.cpp:551:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  551 |   Int p;
      |       ^
secp256k1/IntMod.cpp:552:7: warning: variable name 'p2' is too short, expected at least 3 characters [readability-identifier-length]
  552 |   Int p2;
      |       ^
secp256k1/IntMod.cpp:564:7: warning: variable name 'e' is too short, expected at least 3 characters [readability-identifier-length]
  564 |   Int e(&_P);
      |       ^
secp256k1/IntMod.cpp:565:7: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  565 |   Int a(this);
      |       ^
secp256k1/IntMod.cpp:590:9: warning: variable name 'e' is too short, expected at least 3 characters [readability-identifier-length]
  590 |     Int e(&_P);
      |         ^
secp256k1/IntMod.cpp:600:14: warning: variable name 'e' is too short, expected at least 3 characters [readability-identifier-length]
  600 |     uint64_t e=0;
      |              ^
secp256k1/IntMod.cpp:601:9: warning: variable name 'S' is too short, expected at least 3 characters [readability-identifier-length]
  601 |     Int S(&_P);
      |         ^
secp256k1/IntMod.cpp:609:9: warning: variable name 'q' is too short, expected at least 3 characters [readability-identifier-length]
  609 |     Int q((uint64_t)1);
      |         ^
secp256k1/IntMod.cpp:614:9: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  614 |     Int c(&q);
      |         ^
secp256k1/IntMod.cpp:617:9: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  617 |     Int t(this);
      |         ^
secp256k1/IntMod.cpp:620:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  620 |     Int r(this);
      |         ^
secp256k1/IntMod.cpp:621:9: warning: variable name 'ex' is too short, expected at least 3 characters [readability-identifier-length]
  621 |     Int ex(&S);
      |         ^
secp256k1/IntMod.cpp:626:14: warning: variable name 'M' is too short, expected at least 3 characters [readability-identifier-length]
  626 |     uint64_t M = e;
      |              ^
secp256k1/IntMod.cpp:629:11: warning: variable name 't2' is too short, expected at least 3 characters [readability-identifier-length]
  629 |       Int t2(&t);
      |           ^
secp256k1/IntMod.cpp:630:16: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  630 |       uint64_t i=0;
      |                ^
secp256k1/IntMod.cpp:636:11: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  636 |       Int b(&c);
      |           ^
secp256k1/IntMod.cpp:637:36: warning: statement should be inside braces [readability-braces-around-statements]
  637 |       for(uint64_t j=0;j<M-i-1;j++)
      |                                    ^
      |                                     {
  638 |         b.ModSquare(&b);
      |                         
secp256k1/IntMod.cpp:654:23: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  654 | void Int::ModMul(Int *a, Int *b) {
      |                       ^
secp256k1/IntMod.cpp:654:31: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  654 | void Int::ModMul(Int *a, Int *b) {
      |                               ^
secp256k1/IntMod.cpp:656:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  656 |   Int p;
      |       ^
secp256k1/IntMod.cpp:685:35: warning: parameter name 'R' is too short, expected at least 3 characters [readability-identifier-length]
  685 | void Int::SetupField(Int *n, Int *R, Int *R2, Int *R3, Int *R4) {
      |                                   ^
secp256k1/IntMod.cpp:685:43: warning: parameter name 'R2' is too short, expected at least 3 characters [readability-identifier-length]
  685 | void Int::SetupField(Int *n, Int *R, Int *R2, Int *R3, Int *R4) {
      |                                           ^
secp256k1/IntMod.cpp:685:52: warning: parameter name 'R3' is too short, expected at least 3 characters [readability-identifier-length]
  685 | void Int::SetupField(Int *n, Int *R, Int *R2, Int *R3, Int *R4) {
      |                                                    ^
secp256k1/IntMod.cpp:685:61: warning: parameter name 'R4' is too short, expected at least 3 characters [readability-identifier-length]
  685 | void Int::SetupField(Int *n, Int *R, Int *R2, Int *R3, Int *R4) {
      |                                                             ^
secp256k1/IntMod.cpp:692:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  692 |     int64_t x, t;
      |     ^~~~~~~~~~~~~
secp256k1/IntMod.cpp:692:13: warning: variable name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  692 |     int64_t x, t;
      |             ^
secp256k1/IntMod.cpp:692:16: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  692 |     int64_t x, t;
      |                ^
secp256k1/IntMod.cpp:709:7: warning: variable name 'Ri' is too short, expected at least 3 characters [readability-identifier-length]
  709 |   Int Ri;
      |       ^
secp256k1/IntMod.cpp:721:7: warning: implicit conversion 'Int *' -> 'bool' [readability-implicit-bool-conversion]
  721 |   if (R)
      |       ^
      |         != nullptr
secp256k1/IntMod.cpp:721:9: warning: statement should be inside braces [readability-braces-around-statements]
  721 |   if (R)
      |         ^
      |          {
  722 |     R->Set(&_R);
      |                 
secp256k1/IntMod.cpp:724:7: warning: implicit conversion 'Int *' -> 'bool' [readability-implicit-bool-conversion]
  724 |   if (R2)
      |       ^ 
      |          != nullptr
secp256k1/IntMod.cpp:724:10: warning: statement should be inside braces [readability-braces-around-statements]
  724 |   if (R2)
      |          ^
      |           {
  725 |     R2->Set(&_R2);
      |                   
secp256k1/IntMod.cpp:727:7: warning: implicit conversion 'Int *' -> 'bool' [readability-implicit-bool-conversion]
  727 |   if (R3)
      |       ^ 
      |          != nullptr
secp256k1/IntMod.cpp:727:10: warning: statement should be inside braces [readability-braces-around-statements]
  727 |   if (R3)
      |          ^
      |           {
  728 |     R3->Set(&_R3);
      |                   
secp256k1/IntMod.cpp:730:7: warning: implicit conversion 'Int *' -> 'bool' [readability-implicit-bool-conversion]
  730 |   if (R4)
      |       ^ 
      |          != nullptr
secp256k1/IntMod.cpp:730:10: warning: statement should be inside braces [readability-braces-around-statements]
  730 |   if (R4)
      |          ^
      |           {
  731 |     R4->Set(&_R4);
      |                   
secp256k1/IntMod.cpp:736:25: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  736 | uint64_t Int::AddC(Int *a) {
      |                         ^
secp256k1/IntMod.cpp:738:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  738 |   unsigned char c = 0;
      |                 ^
secp256k1/IntMod.cpp:757:28: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  757 | void Int::AddAndShift(Int *a, Int *b, uint64_t cH) {
      |                            ^
secp256k1/IntMod.cpp:757:36: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  757 | void Int::AddAndShift(Int *a, Int *b, uint64_t cH) {
      |                                    ^
secp256k1/IntMod.cpp:757:48: warning: parameter name 'cH' is too short, expected at least 3 characters [readability-identifier-length]
  757 | void Int::AddAndShift(Int *a, Int *b, uint64_t cH) {
      |                                                ^
secp256k1/IntMod.cpp:759:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  759 |   unsigned char c = 0;
      |                 ^
secp256k1/IntMod.cpp:777:31: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  777 | void Int::MontgomeryMult(Int *a) {
      |                               ^
secp256k1/IntMod.cpp:783:7: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  783 |   Int t;
      |       ^
secp256k1/IntMod.cpp:784:7: warning: variable name 'pr' is too short, expected at least 3 characters [readability-identifier-length]
  784 |   Int pr;
      |       ^
secp256k1/IntMod.cpp:785:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  785 |   Int p;
      |       ^
secp256k1/IntMod.cpp:786:12: warning: variable name 'ML' is too short, expected at least 3 characters [readability-identifier-length]
  786 |   uint64_t ML;
      |            ^
secp256k1/IntMod.cpp:787:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  787 |   uint64_t c;
      |            ^
secp256k1/IntMod.cpp:794:35: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  794 |   memcpy(t.bits64, pr.bits64 + 1, 8 * (NB64BLOCK - 1));
      |                                   ^
secp256k1/IntMod.cpp:808:22: warning: statement should be inside braces [readability-braces-around-statements]
  808 |   if (p.IsPositive())
      |                      ^
      |                       {
  809 |     Set(&p);
  810 |   else
      |   } 
secp256k1/IntMod.cpp:810:7: warning: statement should be inside braces [readability-braces-around-statements]
  810 |   else
      |       ^
      |        {
  811 |     Set(&t);
      |             
secp256k1/IntMod.cpp:815:31: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  815 | void Int::MontgomeryMult(Int *a, Int *b) {
      |                               ^
secp256k1/IntMod.cpp:815:39: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  815 | void Int::MontgomeryMult(Int *a, Int *b) {
      |                                       ^
secp256k1/IntMod.cpp:821:7: warning: variable name 'pr' is too short, expected at least 3 characters [readability-identifier-length]
  821 |   Int pr;
      |       ^
secp256k1/IntMod.cpp:822:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  822 |   Int p;
      |       ^
secp256k1/IntMod.cpp:823:12: warning: variable name 'ML' is too short, expected at least 3 characters [readability-identifier-length]
  823 |   uint64_t ML;
      |            ^
secp256k1/IntMod.cpp:824:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  824 |   uint64_t c;
      |            ^
secp256k1/IntMod.cpp:831:31: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  831 |   memcpy(bits64,pr.bits64 + 1,8*(NB64BLOCK-1));
      |                               ^
secp256k1/IntMod.cpp:845:22: warning: statement should be inside braces [readability-braces-around-statements]
  845 |   if (p.IsPositive())
      |                      ^
      |                       {
  846 |     Set(&p);
      |             
secp256k1/IntMod.cpp:853:25: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  853 | void Int::ModMulK1(Int *a, Int *b) {
      |                         ^
secp256k1/IntMod.cpp:853:33: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  853 | void Int::ModMulK1(Int *a, Int *b) {
      |                                 ^
secp256k1/IntMod.cpp:860:26: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  860 |   volatile unsigned char c;
      |                          ^
secp256k1/IntMod.cpp:867:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  867 |   uint64_t ah, al;
      |   ^~~~~~~~~~~~~~~~
secp256k1/IntMod.cpp:867:12: warning: variable name 'ah' is too short, expected at least 3 characters [readability-identifier-length]
  867 |   uint64_t ah, al;
      |            ^
secp256k1/IntMod.cpp:867:16: warning: variable name 'al' is too short, expected at least 3 characters [readability-identifier-length]
  867 |   uint64_t ah, al;
      |                ^
secp256k1/IntMod.cpp:868:12: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  868 |   uint64_t t[5];
      |            ^
secp256k1/IntMod.cpp:868:14: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  868 |   uint64_t t[5];
      |              ^
secp256k1/IntMod.cpp:869:17: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  869 |   uint64_t r512[8];
      |                 ^
secp256k1/IntMod.cpp:870:8: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  870 |   r512[5] = 0;
      |        ^
secp256k1/IntMod.cpp:871:8: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  871 |   r512[6] = 0;
      |        ^
secp256k1/IntMod.cpp:872:8: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  872 |   r512[7] = 0;
      |        ^
secp256k1/IntMod.cpp:896:22: warning: 0x1000003D1ULL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  896 |   imm_umul(r512 + 4, 0x1000003D1ULL, t);
      |                      ^
secp256k1/IntMod.cpp:904:27: warning: 0x1000003D1ULL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  904 |   al = _umul128(t[4] + c, 0x1000003D1ULL, &ah); 
      |                           ^
secp256k1/IntMod.cpp:915:25: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  915 | void Int::ModMulK1(Int *a) {
      |                         ^
secp256k1/IntMod.cpp:922:26: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  922 |   volatile unsigned char c;
      |                          ^
secp256k1/IntMod.cpp:928:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  928 |   uint64_t ah, al;
      |   ^~~~~~~~~~~~~~~~
secp256k1/IntMod.cpp:928:12: warning: variable name 'ah' is too short, expected at least 3 characters [readability-identifier-length]
  928 |   uint64_t ah, al;
      |            ^
secp256k1/IntMod.cpp:928:16: warning: variable name 'al' is too short, expected at least 3 characters [readability-identifier-length]
  928 |   uint64_t ah, al;
      |                ^
secp256k1/IntMod.cpp:929:12: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  929 |   uint64_t t[5];
      |            ^
secp256k1/IntMod.cpp:929:14: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  929 |   uint64_t t[5];
      |              ^
secp256k1/IntMod.cpp:930:17: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  930 |   uint64_t r512[8];
      |                 ^
secp256k1/IntMod.cpp:931:8: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  931 |   r512[5] = 0;
      |        ^
secp256k1/IntMod.cpp:932:8: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  932 |   r512[6] = 0;
      |        ^
secp256k1/IntMod.cpp:933:8: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  933 |   r512[7] = 0;
      |        ^
secp256k1/IntMod.cpp:957:22: warning: 0x1000003D1ULL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  957 |   imm_umul(r512 + 4, 0x1000003D1ULL, t);
      |                      ^
secp256k1/IntMod.cpp:965:27: warning: 0x1000003D1ULL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  965 |   al = _umul128(t[4] + c, 0x1000003D1ULL, &ah);
      |                           ^
secp256k1/IntMod.cpp:975:28: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  975 | void Int::ModSquareK1(Int *a) {
      |                            ^
secp256k1/IntMod.cpp:982:26: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  982 |   volatile unsigned char c;
      |                          ^
secp256k1/IntMod.cpp:988:17: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  988 |   uint64_t r512[8];
      |                 ^
secp256k1/IntMod.cpp:989:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  989 |   uint64_t u10, u11;
      |   ^~~~~~~~~~~~~~~~~~
secp256k1/IntMod.cpp:990:12: warning: variable name 't1' is too short, expected at least 3 characters [readability-identifier-length]
  990 |   uint64_t t1;
      |            ^
secp256k1/IntMod.cpp:991:12: warning: variable name 't2' is too short, expected at least 3 characters [readability-identifier-length]
  991 |   uint64_t t2;
      |            ^
secp256k1/IntMod.cpp:992:12: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  992 |   uint64_t t[5];
      |            ^
secp256k1/IntMod.cpp:992:14: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  992 |   uint64_t t[5];
      |              ^
secp256k1/IntMod.cpp:1062:8: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1062 |   r512[5] = t[3];
      |        ^
secp256k1/IntMod.cpp:1068:8: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1068 |   r512[6] = t[0];
      |        ^
secp256k1/IntMod.cpp:1071:8: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1071 |   r512[7] = t[1];
      |        ^
secp256k1/IntMod.cpp:1075:22: warning: 0x1000003D1ULL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1075 |   imm_umul(r512 + 4, 0x1000003D1ULL, t);
      |                      ^
secp256k1/IntMod.cpp:1083:28: warning: 0x1000003D1ULL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1083 |   u10 = _umul128(t[4] + c, 0x1000003D1ULL, &u11);
      |                            ^
secp256k1/IntMod.cpp:1094:25: warning: 0x4B0DFF665588B13FULL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1094 | static uint64_t MM64o = 0x4B0DFF665588B13FULL; // 64bits lsb negative inverse of SecpK1 order
      |                         ^
secp256k1/IntMod.cpp:1095:13: warning: variable name '_O' is too short, expected at least 3 characters [readability-identifier-length]
 1095 | static Int *_O;                                // SecpK1 order
      |             ^
secp256k1/IntMod.cpp:1102:30: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
 1102 | void Int::ModAddK1order(Int *a, Int *b) {
      |                              ^
secp256k1/IntMod.cpp:1102:38: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
 1102 | void Int::ModAddK1order(Int *a, Int *b) {
      |                                      ^
secp256k1/IntMod.cpp:1105:20: warning: statement should be inside braces [readability-braces-around-statements]
 1105 |   if (IsNegative())
      |                    ^
      |                     {
 1106 |     Add(_O);
      |             
secp256k1/IntMod.cpp:1109:30: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
 1109 | void Int::ModMulK1order(Int *a) {
      |                              ^
secp256k1/IntMod.cpp:1111:7: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
 1111 |   Int t;
      |       ^
secp256k1/IntMod.cpp:1112:7: warning: variable name 'pr' is too short, expected at least 3 characters [readability-identifier-length]
 1112 |   Int pr;
      |       ^
secp256k1/IntMod.cpp:1113:7: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
 1113 |   Int p;
      |       ^
secp256k1/IntMod.cpp:1114:12: warning: variable name 'ML' is too short, expected at least 3 characters [readability-identifier-length]
 1114 |   uint64_t ML;
      |            ^
secp256k1/IntMod.cpp:1115:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
 1115 |   uint64_t c;
      |            ^
secp256k1/IntMod.cpp:1121:35: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1121 |   memcpy(t.bits64, pr.bits64 + 1, 32);
      |                                   ^
secp256k1/IntMod.cpp:1135:22: warning: statement should be inside braces [readability-braces-around-statements]
 1135 |   if (p.IsPositive())
      |                      ^
      |                       {
 1136 |     Set(&p);
 1137 |   else
      |   } 
secp256k1/IntMod.cpp:1137:7: warning: statement should be inside braces [readability-braces-around-statements]
 1137 |   else
      |       ^
      |        {
 1138 |     Set(&t);
      |             
secp256k1/IntMod.cpp:1147:35: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1147 |   memcpy(t.bits64, pr.bits64 + 1, 32);
      |                                   ^
secp256k1/IntMod.cpp:1161:22: warning: statement should be inside braces [readability-braces-around-statements]
 1161 |   if (p.IsPositive())
      |                      ^
      |                       {
 1162 |     Set(&p);
 1163 |   else
      |   } 
secp256k1/IntMod.cpp:1163:7: warning: statement should be inside braces [readability-braces-around-statements]
 1163 |   else
      |       ^
      |        {
 1164 |     Set(&t);
      |             
370 warnings generated.
Suppressed 202 warnings (199 in non-user code, 3 with check filters).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/sha3/keccak.c
sha3/keccak.c:45:23: warning: parameter name 'v' is too short, expected at least 3 characters [readability-identifier-length]
   45 | rol64(secret uint64_t v, unsigned c)
      |                       ^
sha3/keccak.c:45:35: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   45 | rol64(secret uint64_t v, unsigned c)
      |                                   ^
sha3/keccak.c:48:28: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   48 |         return ((v << c) | (v >> (64 - c)));
      |                                   ^
sha3/keccak.c:52:35: warning: parameter name 'A' is too short, expected at least 3 characters [readability-identifier-length]
   52 | keccakf1600_theta(secret uint64_t A[25])
      |                                   ^
sha3/keccak.c:52:37: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   52 | keccakf1600_theta(secret uint64_t A[25])
      |                                     ^
sha3/keccak.c:54:9: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   54 |         secret uint64_t C0, C1, C2, C3, C4;
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
sha3/keccak.c:54:18: warning: variable name 'C0' is too short, expected at least 3 characters [readability-identifier-length]
   54 |         secret uint64_t C0, C1, C2, C3, C4;
      |                         ^
sha3/keccak.c:54:22: warning: variable name 'C1' is too short, expected at least 3 characters [readability-identifier-length]
   54 |         secret uint64_t C0, C1, C2, C3, C4;
      |                             ^
sha3/keccak.c:54:26: warning: variable name 'C2' is too short, expected at least 3 characters [readability-identifier-length]
   54 |         secret uint64_t C0, C1, C2, C3, C4;
      |                                 ^
sha3/keccak.c:54:30: warning: variable name 'C3' is too short, expected at least 3 characters [readability-identifier-length]
   54 |         secret uint64_t C0, C1, C2, C3, C4;
      |                                     ^
sha3/keccak.c:54:34: warning: variable name 'C4' is too short, expected at least 3 characters [readability-identifier-length]
   54 |         secret uint64_t C0, C1, C2, C3, C4;
      |                                         ^
sha3/keccak.c:55:11: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
   55 |         unsigned y;
      |                  ^
sha3/keccak.c:77:36: warning: parameter name 'A' is too short, expected at least 3 characters [readability-identifier-length]
   77 | keccakf1600_rho_pi(secret uint64_t A[25])
      |                                    ^
sha3/keccak.c:77:38: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   77 | keccakf1600_rho_pi(secret uint64_t A[25])
      |                                      ^
sha3/keccak.c:79:9: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   79 |         secret uint64_t T, U;
      |                ^~~~~~~~~~~~~~
sha3/keccak.c:79:18: warning: variable name 'T' is too short, expected at least 3 characters [readability-identifier-length]
   79 |         secret uint64_t T, U;
      |                         ^
sha3/keccak.c:79:21: warning: variable name 'U' is too short, expected at least 3 characters [readability-identifier-length]
   79 |         secret uint64_t T, U;
      |                            ^
sha3/keccak.c:86:8: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   86 |         U = A[10]; A[10] = rol64(T,  1); T = U;
      |               ^
sha3/keccak.c:86:15: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   86 |         U = A[10]; A[10] = rol64(T,  1); T = U;
      |                      ^
sha3/keccak.c:87:9: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   87 |         U = A[ 7]; A[ 7] = rol64(T,  3); T = U;
      |                ^
sha3/keccak.c:87:16: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   87 |         U = A[ 7]; A[ 7] = rol64(T,  3); T = U;
      |                       ^
sha3/keccak.c:88:8: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   88 |         U = A[11]; A[11] = rol64(T,  6); T = U;
      |               ^
sha3/keccak.c:88:15: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   88 |         U = A[11]; A[11] = rol64(T,  6); T = U;
      |                      ^
sha3/keccak.c:88:31: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   88 |         U = A[11]; A[11] = rol64(T,  6); T = U;
      |                                      ^
sha3/keccak.c:89:8: warning: 17 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   89 |         U = A[17]; A[17] = rol64(T, 10); T = U;
      |               ^
sha3/keccak.c:89:15: warning: 17 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   89 |         U = A[17]; A[17] = rol64(T, 10); T = U;
      |                      ^
sha3/keccak.c:89:30: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   89 |         U = A[17]; A[17] = rol64(T, 10); T = U;
      |                                     ^
sha3/keccak.c:90:8: warning: 18 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   90 |         U = A[18]; A[18] = rol64(T, 15); T = U;
      |               ^
sha3/keccak.c:90:15: warning: 18 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   90 |         U = A[18]; A[18] = rol64(T, 15); T = U;
      |                      ^
sha3/keccak.c:90:30: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   90 |         U = A[18]; A[18] = rol64(T, 15); T = U;
      |                                     ^
sha3/keccak.c:91:30: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   91 |         U = A[ 3]; A[ 3] = rol64(T, 21); T = U;
      |                                     ^
sha3/keccak.c:92:9: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   92 |         U = A[ 5]; A[ 5] = rol64(T, 28); T = U;
      |                ^
sha3/keccak.c:92:16: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   92 |         U = A[ 5]; A[ 5] = rol64(T, 28); T = U;
      |                       ^
sha3/keccak.c:92:30: warning: 28 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   92 |         U = A[ 5]; A[ 5] = rol64(T, 28); T = U;
      |                                     ^
sha3/keccak.c:93:8: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   93 |         U = A[16]; A[16] = rol64(T, 36); T = U;
      |               ^
sha3/keccak.c:93:15: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   93 |         U = A[16]; A[16] = rol64(T, 36); T = U;
      |                      ^
sha3/keccak.c:93:30: warning: 36 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   93 |         U = A[16]; A[16] = rol64(T, 36); T = U;
      |                                     ^
sha3/keccak.c:94:9: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   94 |         U = A[ 8]; A[ 8] = rol64(T, 45); T = U;
      |                ^
sha3/keccak.c:94:16: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   94 |         U = A[ 8]; A[ 8] = rol64(T, 45); T = U;
      |                       ^
sha3/keccak.c:94:30: warning: 45 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   94 |         U = A[ 8]; A[ 8] = rol64(T, 45); T = U;
      |                                     ^
sha3/keccak.c:95:8: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   95 |         U = A[21]; A[21] = rol64(T, 55); T = U;
      |               ^
sha3/keccak.c:95:15: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   95 |         U = A[21]; A[21] = rol64(T, 55); T = U;
      |                      ^
sha3/keccak.c:95:30: warning: 55 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   95 |         U = A[21]; A[21] = rol64(T, 55); T = U;
      |                                     ^
sha3/keccak.c:96:8: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   96 |         U = A[24]; A[24] = rol64(T,  2); T = U;
      |               ^
sha3/keccak.c:96:15: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   96 |         U = A[24]; A[24] = rol64(T,  2); T = U;
      |                      ^
sha3/keccak.c:97:30: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   97 |         U = A[ 4]; A[ 4] = rol64(T, 14); T = U;
      |                                     ^
sha3/keccak.c:98:8: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   98 |         U = A[15]; A[15] = rol64(T, 27); T = U;
      |               ^
sha3/keccak.c:98:15: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   98 |         U = A[15]; A[15] = rol64(T, 27); T = U;
      |                      ^
sha3/keccak.c:98:30: warning: 27 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   98 |         U = A[15]; A[15] = rol64(T, 27); T = U;
      |                                     ^
sha3/keccak.c:99:8: warning: 23 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   99 |         U = A[23]; A[23] = rol64(T, 41); T = U;
      |               ^
sha3/keccak.c:99:15: warning: 23 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   99 |         U = A[23]; A[23] = rol64(T, 41); T = U;
      |                      ^
sha3/keccak.c:99:30: warning: 41 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   99 |         U = A[23]; A[23] = rol64(T, 41); T = U;
      |                                     ^
sha3/keccak.c:100:8: warning: 19 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  100 |         U = A[19]; A[19] = rol64(T, 56); T = U;
      |               ^
sha3/keccak.c:100:15: warning: 19 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  100 |         U = A[19]; A[19] = rol64(T, 56); T = U;
      |                      ^
sha3/keccak.c:100:30: warning: 56 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  100 |         U = A[19]; A[19] = rol64(T, 56); T = U;
      |                                     ^
sha3/keccak.c:101:8: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  101 |         U = A[13]; A[13] = rol64(T,  8); T = U;
      |               ^
sha3/keccak.c:101:15: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  101 |         U = A[13]; A[13] = rol64(T,  8); T = U;
      |                      ^
sha3/keccak.c:101:31: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  101 |         U = A[13]; A[13] = rol64(T,  8); T = U;
      |                                      ^
sha3/keccak.c:102:8: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  102 |         U = A[12]; A[12] = rol64(T, 25); T = U;
      |               ^
sha3/keccak.c:102:15: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  102 |         U = A[12]; A[12] = rol64(T, 25); T = U;
      |                      ^
sha3/keccak.c:102:30: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  102 |         U = A[12]; A[12] = rol64(T, 25); T = U;
      |                                     ^
sha3/keccak.c:103:30: warning: 43 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  103 |         U = A[ 2]; A[ 2] = rol64(T, 43); T = U;
      |                                     ^
sha3/keccak.c:104:8: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  104 |         U = A[20]; A[20] = rol64(T, 62); T = U;
      |               ^
sha3/keccak.c:104:15: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  104 |         U = A[20]; A[20] = rol64(T, 62); T = U;
      |                      ^
sha3/keccak.c:104:30: warning: 62 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  104 |         U = A[20]; A[20] = rol64(T, 62); T = U;
      |                                     ^
sha3/keccak.c:105:8: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  105 |         U = A[14]; A[14] = rol64(T, 18); T = U;
      |               ^
sha3/keccak.c:105:15: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  105 |         U = A[14]; A[14] = rol64(T, 18); T = U;
      |                      ^
sha3/keccak.c:105:30: warning: 18 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  105 |         U = A[14]; A[14] = rol64(T, 18); T = U;
      |                                     ^
sha3/keccak.c:106:8: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  106 |         U = A[22]; A[22] = rol64(T, 39); T = U;
      |               ^
sha3/keccak.c:106:15: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  106 |         U = A[22]; A[22] = rol64(T, 39); T = U;
      |                      ^
sha3/keccak.c:106:30: warning: 39 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  106 |         U = A[22]; A[22] = rol64(T, 39); T = U;
      |                                     ^
sha3/keccak.c:107:9: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  107 |         U = A[ 9]; A[ 9] = rol64(T, 61); T = U;
      |                ^
sha3/keccak.c:107:16: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  107 |         U = A[ 9]; A[ 9] = rol64(T, 61); T = U;
      |                       ^
sha3/keccak.c:107:30: warning: 61 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  107 |         U = A[ 9]; A[ 9] = rol64(T, 61); T = U;
      |                                     ^
sha3/keccak.c:108:9: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  108 |         U = A[ 6]; A[ 6] = rol64(T, 20); T = U;
      |                ^
sha3/keccak.c:108:16: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  108 |         U = A[ 6]; A[ 6] = rol64(T, 20); T = U;
      |                       ^
sha3/keccak.c:108:30: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  108 |         U = A[ 6]; A[ 6] = rol64(T, 20); T = U;
      |                                     ^
sha3/keccak.c:109:30: warning: 44 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  109 |                    A[ 1] = rol64(T, 44);
      |                                     ^
sha3/keccak.c:113:33: warning: parameter name 'A' is too short, expected at least 3 characters [readability-identifier-length]
  113 | keccakf1600_chi(secret uint64_t A[25])
      |                                 ^
sha3/keccak.c:113:35: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  113 | keccakf1600_chi(secret uint64_t A[25])
      |                                   ^
sha3/keccak.c:115:9: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  115 |         secret uint64_t B0, B1, B2, B3, B4;
      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
sha3/keccak.c:115:18: warning: variable name 'B0' is too short, expected at least 3 characters [readability-identifier-length]
  115 |         secret uint64_t B0, B1, B2, B3, B4;
      |                         ^
sha3/keccak.c:115:22: warning: variable name 'B1' is too short, expected at least 3 characters [readability-identifier-length]
  115 |         secret uint64_t B0, B1, B2, B3, B4;
      |                             ^
sha3/keccak.c:115:26: warning: variable name 'B2' is too short, expected at least 3 characters [readability-identifier-length]
  115 |         secret uint64_t B0, B1, B2, B3, B4;
      |                                 ^
sha3/keccak.c:115:30: warning: variable name 'B3' is too short, expected at least 3 characters [readability-identifier-length]
  115 |         secret uint64_t B0, B1, B2, B3, B4;
      |                                     ^
sha3/keccak.c:115:34: warning: variable name 'B4' is too short, expected at least 3 characters [readability-identifier-length]
  115 |         secret uint64_t B0, B1, B2, B3, B4;
      |                                         ^
sha3/keccak.c:116:11: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
  116 |         unsigned y;
      |                  ^
sha3/keccak.c:135:35: warning: parameter name 'A' is too short, expected at least 3 characters [readability-identifier-length]
  135 | keccakf1600_round(secret uint64_t A[25])
      |                                   ^
sha3/keccak.c:135:37: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  135 | keccakf1600_round(secret uint64_t A[25])
      |                                     ^
sha3/keccak.c:144:29: warning: parameter name 'A' is too short, expected at least 3 characters [readability-identifier-length]
  144 | keccakf1600(secret uint64_t A[25])
      |                             ^
sha3/keccak.c:144:31: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  144 | keccakf1600(secret uint64_t A[25])
      |                               ^
sha3/keccak.c:150:24: warning: variable name 'RC' is too short, expected at least 3 characters [readability-identifier-length]
  150 |         static const uint64_t RC[24] = {
      |                               ^
sha3/keccak.c:176:11: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  176 |         unsigned i;
      |                  ^
sha3/keccak.c:178:18: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  178 |         for (i = 0; i < 24; i++) {
      |                         ^
129 warnings generated.
Suppressed 35 warnings (2 in non-user code, 33 with check filters).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/secp256k1/SECP256K1.cpp
secp256k1/SECP256K1.cpp:27:29: warning: parameter name 'i0' is too short, expected at least 3 characters [readability-identifier-length]
   27 | void sha256sse_1B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                             ^
secp256k1/SECP256K1.cpp:27:43: warning: parameter name 'i1' is too short, expected at least 3 characters [readability-identifier-length]
   27 | void sha256sse_1B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                           ^
secp256k1/SECP256K1.cpp:27:57: warning: parameter name 'i2' is too short, expected at least 3 characters [readability-identifier-length]
   27 | void sha256sse_1B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                         ^
secp256k1/SECP256K1.cpp:27:71: warning: parameter name 'i3' is too short, expected at least 3 characters [readability-identifier-length]
   27 | void sha256sse_1B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                       ^
secp256k1/SECP256K1.cpp:27:84: warning: parameter name 'd0' is too short, expected at least 3 characters [readability-identifier-length]
   27 | void sha256sse_1B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                    ^
secp256k1/SECP256K1.cpp:27:97: warning: parameter name 'd1' is too short, expected at least 3 characters [readability-identifier-length]
   27 | void sha256sse_1B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                                 ^
secp256k1/SECP256K1.cpp:27:110: warning: parameter name 'd2' is too short, expected at least 3 characters [readability-identifier-length]
   27 | void sha256sse_1B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                                              ^
secp256k1/SECP256K1.cpp:27:123: warning: parameter name 'd3' is too short, expected at least 3 characters [readability-identifier-length]
   27 | void sha256sse_1B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                                                           ^
secp256k1/SECP256K1.cpp:28:24: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   28 |   sha256((uint8_t*)i0, 64, d0);
      |                        ^
secp256k1/SECP256K1.cpp:29:24: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   29 |   sha256((uint8_t*)i1, 64, d1);
      |                        ^
secp256k1/SECP256K1.cpp:30:24: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   30 |   sha256((uint8_t*)i2, 64, d2);
      |                        ^
secp256k1/SECP256K1.cpp:31:24: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   31 |   sha256((uint8_t*)i3, 64, d3);
      |                        ^
secp256k1/SECP256K1.cpp:34:29: warning: parameter name 'i0' is too short, expected at least 3 characters [readability-identifier-length]
   34 | void sha256sse_2B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                             ^
secp256k1/SECP256K1.cpp:34:43: warning: parameter name 'i1' is too short, expected at least 3 characters [readability-identifier-length]
   34 | void sha256sse_2B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                           ^
secp256k1/SECP256K1.cpp:34:57: warning: parameter name 'i2' is too short, expected at least 3 characters [readability-identifier-length]
   34 | void sha256sse_2B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                         ^
secp256k1/SECP256K1.cpp:34:71: warning: parameter name 'i3' is too short, expected at least 3 characters [readability-identifier-length]
   34 | void sha256sse_2B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                       ^
secp256k1/SECP256K1.cpp:34:84: warning: parameter name 'd0' is too short, expected at least 3 characters [readability-identifier-length]
   34 | void sha256sse_2B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                    ^
secp256k1/SECP256K1.cpp:34:97: warning: parameter name 'd1' is too short, expected at least 3 characters [readability-identifier-length]
   34 | void sha256sse_2B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                                 ^
secp256k1/SECP256K1.cpp:34:110: warning: parameter name 'd2' is too short, expected at least 3 characters [readability-identifier-length]
   34 | void sha256sse_2B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                                              ^
secp256k1/SECP256K1.cpp:34:123: warning: parameter name 'd3' is too short, expected at least 3 characters [readability-identifier-length]
   34 | void sha256sse_2B(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                                                           ^
secp256k1/SECP256K1.cpp:35:24: warning: 128 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   35 |   sha256((uint8_t*)i0, 128, d0);
      |                        ^
secp256k1/SECP256K1.cpp:36:24: warning: 128 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   36 |   sha256((uint8_t*)i1, 128, d1);
      |                        ^
secp256k1/SECP256K1.cpp:37:24: warning: 128 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   37 |   sha256((uint8_t*)i2, 128, d2);
      |                        ^
secp256k1/SECP256K1.cpp:38:24: warning: 128 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   38 |   sha256((uint8_t*)i3, 128, d3);
      |                        ^
secp256k1/SECP256K1.cpp:41:31: warning: parameter name 'i0' is too short, expected at least 3 characters [readability-identifier-length]
   41 | void ripemd160sse_32(uint8_t *i0, uint8_t *i1, uint8_t *i2, uint8_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                               ^
secp256k1/SECP256K1.cpp:41:44: warning: parameter name 'i1' is too short, expected at least 3 characters [readability-identifier-length]
   41 | void ripemd160sse_32(uint8_t *i0, uint8_t *i1, uint8_t *i2, uint8_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                            ^
secp256k1/SECP256K1.cpp:41:57: warning: parameter name 'i2' is too short, expected at least 3 characters [readability-identifier-length]
   41 | void ripemd160sse_32(uint8_t *i0, uint8_t *i1, uint8_t *i2, uint8_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                         ^
secp256k1/SECP256K1.cpp:41:70: warning: parameter name 'i3' is too short, expected at least 3 characters [readability-identifier-length]
   41 | void ripemd160sse_32(uint8_t *i0, uint8_t *i1, uint8_t *i2, uint8_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                      ^
secp256k1/SECP256K1.cpp:41:83: warning: parameter name 'd0' is too short, expected at least 3 characters [readability-identifier-length]
   41 | void ripemd160sse_32(uint8_t *i0, uint8_t *i1, uint8_t *i2, uint8_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                   ^
secp256k1/SECP256K1.cpp:41:96: warning: parameter name 'd1' is too short, expected at least 3 characters [readability-identifier-length]
   41 | void ripemd160sse_32(uint8_t *i0, uint8_t *i1, uint8_t *i2, uint8_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                                ^
secp256k1/SECP256K1.cpp:41:109: warning: parameter name 'd2' is too short, expected at least 3 characters [readability-identifier-length]
   41 | void ripemd160sse_32(uint8_t *i0, uint8_t *i1, uint8_t *i2, uint8_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                                             ^
secp256k1/SECP256K1.cpp:41:122: warning: parameter name 'd3' is too short, expected at least 3 characters [readability-identifier-length]
   41 | void ripemd160sse_32(uint8_t *i0, uint8_t *i1, uint8_t *i2, uint8_t *i3, uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                                                                                          ^
secp256k1/SECP256K1.cpp:67:9: warning: variable name 'N' is too short, expected at least 3 characters [readability-identifier-length]
   67 |   Point N(G);
      |         ^
secp256k1/SECP256K1.cpp:68:22: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   68 |   for(int i = 0; i < 32; i++) {
      |                      ^
secp256k1/SECP256K1.cpp:69:16: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   69 |     GTable[i * 256] = N;
      |                ^
secp256k1/SECP256K1.cpp:71:25: warning: 255 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   71 |     for (int j = 1; j < 255; j++) {
      |                         ^
secp256k1/SECP256K1.cpp:72:18: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   72 |       GTable[i * 256 + j] = N;
      |                  ^
secp256k1/SECP256K1.cpp:73:35: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   73 |       N = AddDirect(N, GTable[i * 256]);
      |                                   ^
secp256k1/SECP256K1.cpp:75:16: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   75 |     GTable[i * 256 + 255] = N; // Dummy point for check function
      |                ^
secp256k1/SECP256K1.cpp:75:22: warning: 255 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   75 |     GTable[i * 256 + 255] = N; // Dummy point for check function
      |                      ^
secp256k1/SECP256K1.cpp:84:7: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
   84 |   int i = 0;
      |       ^
secp256k1/SECP256K1.cpp:85:11: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
   85 |   uint8_t b;
      |           ^
secp256k1/SECP256K1.cpp:86:9: warning: variable name 'Q' is too short, expected at least 3 characters [readability-identifier-length]
   86 |   Point Q;
      |         ^
secp256k1/SECP256K1.cpp:89:19: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   89 |   for (i = 0; i < 32; i++) {
      |                   ^
secp256k1/SECP256K1.cpp:91:8: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> 'bool' [readability-implicit-bool-conversion]
   91 |     if(b)
      |        ^
      |          != 0u
secp256k1/SECP256K1.cpp:91:10: warning: statement should be inside braces [readability-braces-around-statements]
   91 |     if(b)
      |          ^
      |           {
   92 |       break;
      |             
secp256k1/SECP256K1.cpp:94:14: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   94 |   Q = GTable[256 * i + (b-1)];
      |              ^
secp256k1/SECP256K1.cpp:97:13: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   97 |   for(; i < 32; i++) {
      |             ^
secp256k1/SECP256K1.cpp:99:8: warning: implicit conversion 'uint8_t' (aka 'unsigned char') -> 'bool' [readability-implicit-bool-conversion]
   99 |     if(b)
      |        ^
      |          != 0u
secp256k1/SECP256K1.cpp:99:10: warning: statement should be inside braces [readability-braces-around-statements]
   99 |     if(b)
      |          ^
      |           {
  100 |       Q = Add2(Q, GTable[256 * i + (b-1)]);
      |                                            
secp256k1/SECP256K1.cpp:100:26: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  100 |       Q = Add2(Q, GTable[256 * i + (b-1)]);
      |                          ^
secp256k1/SECP256K1.cpp:112:20: warning: method 'GetByte' can be made static [readability-convert-member-functions-to-static]
  112 | uint8_t Secp256K1::GetByte(char *str, int idx) {
      |                    ^
secp256k1/SECP256K1.cpp:112:34: warning: pointer parameter 'str' can be pointer to const [readability-non-const-parameter]
  112 | uint8_t Secp256K1::GetByte(char *str, int idx) {
      |                                  ^
      |                            const 
secp256k1/SECP256K1.cpp:125:34: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  125 | Point Secp256K1::Negation(Point &p) {
      |                                  ^
secp256k1/SECP256K1.cpp:126:9: warning: variable name 'Q' is too short, expected at least 3 characters [readability-identifier-length]
  126 |   Point Q;
      |         ^
secp256k1/SECP256K1.cpp:146:18: warning: 66 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  146 |       if (len != 66) {
      |                  ^
secp256k1/SECP256K1.cpp:150:27: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  150 |       for (int i = 0; i < 32; i++)
      |                           ^
secp256k1/SECP256K1.cpp:150:35: warning: statement should be inside braces [readability-braces-around-statements]
  150 |       for (int i = 0; i < 32; i++)
      |                                   ^
      |                                    {
  151 |         ret.x.SetByte(31 - i, GetByte(str, i + 1));
      |                                                    
secp256k1/SECP256K1.cpp:151:23: warning: 31 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  151 |         ret.x.SetByte(31 - i, GetByte(str, i + 1));
      |                       ^
secp256k1/SECP256K1.cpp:157:18: warning: 66 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  157 |       if (len != 66) {
      |                  ^
secp256k1/SECP256K1.cpp:161:27: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  161 |       for (int i = 0; i < 32; i++)
      |                           ^
secp256k1/SECP256K1.cpp:161:35: warning: statement should be inside braces [readability-braces-around-statements]
  161 |       for (int i = 0; i < 32; i++)
      |                                   ^
      |                                    {
  162 |         ret.x.SetByte(31 - i, GetByte(str, i + 1));
      |                                                    
secp256k1/SECP256K1.cpp:162:23: warning: 31 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  162 |         ret.x.SetByte(31 - i, GetByte(str, i + 1));
      |                       ^
secp256k1/SECP256K1.cpp:168:18: warning: 130 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  168 |       if (len != 130) {
      |                  ^
secp256k1/SECP256K1.cpp:172:27: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  172 |       for (int i = 0; i < 32; i++)
      |                           ^
secp256k1/SECP256K1.cpp:172:35: warning: statement should be inside braces [readability-braces-around-statements]
  172 |       for (int i = 0; i < 32; i++)
      |                                   ^
      |                                    {
  173 |         ret.x.SetByte(31 - i, GetByte(str, i + 1));
      |                                                    
secp256k1/SECP256K1.cpp:173:23: warning: 31 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  173 |         ret.x.SetByte(31 - i, GetByte(str, i + 1));
      |                       ^
secp256k1/SECP256K1.cpp:174:27: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  174 |       for (int i = 0; i < 32; i++)
      |                           ^
secp256k1/SECP256K1.cpp:174:35: warning: statement should be inside braces [readability-braces-around-statements]
  174 |       for (int i = 0; i < 32; i++)
      |                                   ^
      |                                    {
  175 |         ret.y.SetByte(31 - i, GetByte(str, i + 33));
      |                                                     
secp256k1/SECP256K1.cpp:175:23: warning: 31 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  175 |         ret.y.SetByte(31 - i, GetByte(str, i + 33));
      |                       ^
secp256k1/SECP256K1.cpp:175:48: warning: 33 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  175 |         ret.y.SetByte(31 - i, GetByte(str, i + 33));
      |                                                ^
secp256k1/SECP256K1.cpp:194:18: warning: method 'GetPublicKeyHex' can be made static [readability-convert-member-functions-to-static]
  194 | char* Secp256K1::GetPublicKeyHex(bool compressed, Point &pubKey) {
      |                  ^
secp256k1/SECP256K1.cpp:195:32: warning: 65 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  195 |   unsigned char publicKeyBytes[65];
      |                                ^
secp256k1/SECP256K1.cpp:201:42: warning: 33 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  201 |     pubKey.y.Get32Bytes(publicKeyBytes + 33);
      |                                          ^
secp256k1/SECP256K1.cpp:202:11: warning: redundant explicit casting to the same type 'char *' as the sub-expression, remove this casting [readability-redundant-casting]
  202 |     ret = (char*) tohex((char*)publicKeyBytes,65);
      |           ^~~~~~~
secp256k1/../util.h:23:7: note: source type originates from the invocation of this function
   23 | char *tohex(char *ptr,int length);
      | ~~~~~~^
secp256k1/SECP256K1.cpp:202:47: warning: 65 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  202 |     ret = (char*) tohex((char*)publicKeyBytes,65);
      |                                               ^
secp256k1/SECP256K1.cpp:208:11: warning: redundant explicit casting to the same type 'char *' as the sub-expression, remove this casting [readability-redundant-casting]
  208 |     ret = (char*) tohex((char*)publicKeyBytes,33);
      |           ^~~~~~~
secp256k1/../util.h:23:7: note: source type originates from the invocation of this function
   23 | char *tohex(char *ptr,int length);
      | ~~~~~~^
secp256k1/SECP256K1.cpp:208:47: warning: 33 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  208 |     ret = (char*) tohex((char*)publicKeyBytes,33);
      |                                               ^
secp256k1/SECP256K1.cpp:213:17: warning: method 'GetPublicKeyHex' can be made static [readability-convert-member-functions-to-static]
  213 | void Secp256K1::GetPublicKeyHex(bool compressed, Point &pubKey,char *dst){
      |                 ^
secp256k1/SECP256K1.cpp:214:32: warning: 65 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  214 |   unsigned char publicKeyBytes[65];
      |                                ^
secp256k1/SECP256K1.cpp:219:42: warning: 33 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  219 |     pubKey.y.Get32Bytes(publicKeyBytes + 33);
      |                                          ^
secp256k1/SECP256K1.cpp:220:37: warning: 65 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  220 |     tohex_dst((char*)publicKeyBytes,65,dst);
      |                                     ^
secp256k1/SECP256K1.cpp:226:34: warning: 33 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  226 |         tohex_dst((char*)publicKeyBytes,33,dst);
      |                                         ^
secp256k1/SECP256K1.cpp:230:18: warning: method 'GetPublicKeyRaw' can be made static [readability-convert-member-functions-to-static]
  230 | char* Secp256K1::GetPublicKeyRaw(bool compressed, Point &pubKey) {
      |                  ^
secp256k1/SECP256K1.cpp:231:30: warning: 65 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  231 |   char *ret = (char*) malloc(65);
      |                              ^
secp256k1/SECP256K1.cpp:240:49: warning: 33 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  240 |     pubKey.y.Get32Bytes((unsigned char*) (ret + 33));
      |                                                 ^
secp256k1/SECP256K1.cpp:250:17: warning: method 'GetPublicKeyRaw' can be made static [readability-convert-member-functions-to-static]
  250 | void Secp256K1::GetPublicKeyRaw(bool compressed, Point &pubKey,char *dst) {
      |                 ^
secp256k1/SECP256K1.cpp:255:49: warning: 33 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  255 |     pubKey.y.Get32Bytes((unsigned char*) (dst + 33));
      |                                                 ^
secp256k1/SECP256K1.cpp:264:18: warning: method 'AddDirect' can be made static [readability-convert-member-functions-to-static]
  264 | Point Secp256K1::AddDirect(Point &p1,Point &p2) {
      |                  ^
secp256k1/SECP256K1.cpp:264:35: warning: parameter name 'p1' is too short, expected at least 3 characters [readability-identifier-length]
  264 | Point Secp256K1::AddDirect(Point &p1,Point &p2) {
      |                                   ^
secp256k1/SECP256K1.cpp:264:45: warning: parameter name 'p2' is too short, expected at least 3 characters [readability-identifier-length]
  264 | Point Secp256K1::AddDirect(Point &p1,Point &p2) {
      |                                             ^
secp256k1/SECP256K1.cpp:265:7: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
  265 |   Int _s;
      |       ^
secp256k1/SECP256K1.cpp:266:7: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
  266 |   Int _p;
      |       ^
secp256k1/SECP256K1.cpp:267:7: warning: variable name 'dy' is too short, expected at least 3 characters [readability-identifier-length]
  267 |   Int dy;
      |       ^
secp256k1/SECP256K1.cpp:268:7: warning: variable name 'dx' is too short, expected at least 3 characters [readability-identifier-length]
  268 |   Int dx;
      |       ^
secp256k1/SECP256K1.cpp:269:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  269 |   Point r;
      |         ^
secp256k1/SECP256K1.cpp:290:18: warning: method 'Add2' can be made static [readability-convert-member-functions-to-static]
  290 | Point Secp256K1::Add2(Point &p1, Point &p2) {
      |                  ^
secp256k1/SECP256K1.cpp:290:30: warning: parameter name 'p1' is too short, expected at least 3 characters [readability-identifier-length]
  290 | Point Secp256K1::Add2(Point &p1, Point &p2) {
      |                              ^
secp256k1/SECP256K1.cpp:290:41: warning: parameter name 'p2' is too short, expected at least 3 characters [readability-identifier-length]
  290 | Point Secp256K1::Add2(Point &p1, Point &p2) {
      |                                         ^
secp256k1/SECP256K1.cpp:292:7: warning: variable name 'u' is too short, expected at least 3 characters [readability-identifier-length]
  292 |   Int u;
      |       ^
secp256k1/SECP256K1.cpp:293:7: warning: variable name 'v' is too short, expected at least 3 characters [readability-identifier-length]
  293 |   Int v;
      |       ^
secp256k1/SECP256K1.cpp:294:7: warning: variable name 'u1' is too short, expected at least 3 characters [readability-identifier-length]
  294 |   Int u1;
      |       ^
secp256k1/SECP256K1.cpp:295:7: warning: variable name 'v1' is too short, expected at least 3 characters [readability-identifier-length]
  295 |   Int v1;
      |       ^
secp256k1/SECP256K1.cpp:299:7: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  299 |   Int a;
      |       ^
secp256k1/SECP256K1.cpp:304:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  304 |   Point r;
      |         ^
secp256k1/SECP256K1.cpp:330:18: warning: method 'Add' can be made static [readability-convert-member-functions-to-static]
  330 | Point Secp256K1::Add(Point &p1,Point &p2) {
      |                  ^
secp256k1/SECP256K1.cpp:330:29: warning: parameter name 'p1' is too short, expected at least 3 characters [readability-identifier-length]
  330 | Point Secp256K1::Add(Point &p1,Point &p2) {
      |                             ^
secp256k1/SECP256K1.cpp:330:39: warning: parameter name 'p2' is too short, expected at least 3 characters [readability-identifier-length]
  330 | Point Secp256K1::Add(Point &p1,Point &p2) {
      |                                       ^
secp256k1/SECP256K1.cpp:331:7: warning: variable name 'u' is too short, expected at least 3 characters [readability-identifier-length]
  331 |   Int u;
      |       ^
secp256k1/SECP256K1.cpp:332:7: warning: variable name 'v' is too short, expected at least 3 characters [readability-identifier-length]
  332 |   Int v;
      |       ^
secp256k1/SECP256K1.cpp:333:7: warning: variable name 'u1' is too short, expected at least 3 characters [readability-identifier-length]
  333 |   Int u1;
      |       ^
secp256k1/SECP256K1.cpp:334:7: warning: variable name 'u2' is too short, expected at least 3 characters [readability-identifier-length]
  334 |   Int u2;
      |       ^
secp256k1/SECP256K1.cpp:335:7: warning: variable name 'v1' is too short, expected at least 3 characters [readability-identifier-length]
  335 |   Int v1;
      |       ^
secp256k1/SECP256K1.cpp:336:7: warning: variable name 'v2' is too short, expected at least 3 characters [readability-identifier-length]
  336 |   Int v2;
      |       ^
secp256k1/SECP256K1.cpp:340:7: warning: variable name 'w' is too short, expected at least 3 characters [readability-identifier-length]
  340 |   Int w;
      |       ^
secp256k1/SECP256K1.cpp:341:7: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  341 |   Int a;
      |       ^
secp256k1/SECP256K1.cpp:346:7: warning: variable name 'x3' is too short, expected at least 3 characters [readability-identifier-length]
  346 |   Int x3;
      |       ^
secp256k1/SECP256K1.cpp:348:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  348 |   Point r;
      |         ^
secp256k1/SECP256K1.cpp:398:18: warning: method 'DoubleDirect' can be made static [readability-convert-member-functions-to-static]
  398 | Point Secp256K1::DoubleDirect(Point &p) {
      |                  ^
secp256k1/SECP256K1.cpp:398:38: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  398 | Point Secp256K1::DoubleDirect(Point &p) {
      |                                      ^
secp256k1/SECP256K1.cpp:399:7: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
  399 |   Int _s;
      |       ^
secp256k1/SECP256K1.cpp:400:7: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
  400 |   Int _p;
      |       ^
secp256k1/SECP256K1.cpp:401:7: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  401 |   Int a;
      |       ^
secp256k1/SECP256K1.cpp:402:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  402 |   Point r;
      |         ^
secp256k1/SECP256K1.cpp:425:18: warning: method 'Double' can be made static [readability-convert-member-functions-to-static]
  425 | Point Secp256K1::Double(Point &p) {
      |                  ^
secp256k1/SECP256K1.cpp:425:32: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  425 | Point Secp256K1::Double(Point &p) {
      |                                ^
secp256k1/SECP256K1.cpp:438:7: warning: variable name 'z2' is too short, expected at least 3 characters [readability-identifier-length]
  438 |   Int z2;
      |       ^
secp256k1/SECP256K1.cpp:439:7: warning: variable name 'x2' is too short, expected at least 3 characters [readability-identifier-length]
  439 |   Int x2;
      |       ^
secp256k1/SECP256K1.cpp:441:7: warning: variable name 'w' is too short, expected at least 3 characters [readability-identifier-length]
  441 |   Int w;
      |       ^
secp256k1/SECP256K1.cpp:442:7: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  442 |   Int s;
      |       ^
secp256k1/SECP256K1.cpp:443:7: warning: variable name 's2' is too short, expected at least 3 characters [readability-identifier-length]
  443 |   Int s2;
      |       ^
secp256k1/SECP256K1.cpp:444:7: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  444 |   Int b;
      |       ^
secp256k1/SECP256K1.cpp:447:7: warning: variable name 'y2' is too short, expected at least 3 characters [readability-identifier-length]
  447 |   Int y2;
      |       ^
secp256k1/SECP256K1.cpp:448:7: warning: variable name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  448 |   Int h;
      |       ^
secp256k1/SECP256K1.cpp:449:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  449 |   Point r;
      |         ^
secp256k1/SECP256K1.cpp:484:16: warning: method 'GetY' can be made static [readability-convert-member-functions-to-static]
  484 | Int Secp256K1::GetY(Int x,bool isEven) {
      |                ^
secp256k1/SECP256K1.cpp:484:25: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
  484 | Int Secp256K1::GetY(Int x,bool isEven) {
      |                         ^
secp256k1/SECP256K1.cpp:485:7: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
  485 |   Int _s;
      |       ^
secp256k1/SECP256K1.cpp:486:7: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
  486 |   Int _p;
      |       ^
secp256k1/SECP256K1.cpp:489:13: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  489 |   _p.ModAdd(7);
      |             ^
secp256k1/SECP256K1.cpp:500:17: warning: method 'EC' can be made static [readability-convert-member-functions-to-static]
  500 | bool Secp256K1::EC(Point &p) {
      |                 ^
secp256k1/SECP256K1.cpp:500:27: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  500 | bool Secp256K1::EC(Point &p) {
      |                           ^
secp256k1/SECP256K1.cpp:501:7: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
  501 |   Int _s;
      |       ^
secp256k1/SECP256K1.cpp:502:7: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
  502 |   Int _p;
      |       ^
secp256k1/SECP256K1.cpp:505:13: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  505 |   _p.ModAdd(7);
      |             ^
secp256k1/SECP256K1.cpp:511:46: warning: parameter name 'P' is too short, expected at least 3 characters [readability-identifier-length]
  511 | Point Secp256K1::ScalarMultiplication(Point &P,Int *scalar)     {
      |                                              ^
secp256k1/SECP256K1.cpp:512:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  512 |         Point R,Q,T;
      |         ^~~~~~~~~~~~
secp256k1/SECP256K1.cpp:512:8: warning: variable name 'R' is too short, expected at least 3 characters [readability-identifier-length]
  512 |         Point R,Q,T;
      |               ^
secp256k1/SECP256K1.cpp:512:10: warning: variable name 'Q' is too short, expected at least 3 characters [readability-identifier-length]
  512 |         Point R,Q,T;
      |                 ^
secp256k1/SECP256K1.cpp:512:12: warning: variable name 'T' is too short, expected at least 3 characters [readability-identifier-length]
  512 |         Point R,Q,T;
      |                   ^
secp256k1/SECP256K1.cpp:513:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  513 |         int  no_of_bits, loop;
      |         ^~~~~~~~~~~~~~~~~~~~~~
secp256k1/SECP256K1.cpp:526:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  526 |                         if(scalar->GetBit(loop)){
      |                            ^                   
      |                                                 != 0
secp256k1/SECP256K1.cpp:607:10: warning: parameter name 'k0' is too short, expected at least 3 characters [readability-identifier-length]
  607 |   Point &k0,Point &k1,Point &k2,Point &k3,
      |          ^
secp256k1/SECP256K1.cpp:607:20: warning: parameter name 'k1' is too short, expected at least 3 characters [readability-identifier-length]
  607 |   Point &k0,Point &k1,Point &k2,Point &k3,
      |                    ^
secp256k1/SECP256K1.cpp:607:30: warning: parameter name 'k2' is too short, expected at least 3 characters [readability-identifier-length]
  607 |   Point &k0,Point &k1,Point &k2,Point &k3,
      |                              ^
secp256k1/SECP256K1.cpp:607:40: warning: parameter name 'k3' is too short, expected at least 3 characters [readability-identifier-length]
  607 |   Point &k0,Point &k1,Point &k2,Point &k3,
      |                                        ^
secp256k1/SECP256K1.cpp:608:12: warning: parameter name 'h0' is too short, expected at least 3 characters [readability-identifier-length]
  608 |   uint8_t *h0,uint8_t *h1,uint8_t *h2,uint8_t *h3) {
      |            ^
secp256k1/SECP256K1.cpp:608:24: warning: parameter name 'h1' is too short, expected at least 3 characters [readability-identifier-length]
  608 |   uint8_t *h0,uint8_t *h1,uint8_t *h2,uint8_t *h3) {
      |                        ^
secp256k1/SECP256K1.cpp:608:36: warning: parameter name 'h2' is too short, expected at least 3 characters [readability-identifier-length]
  608 |   uint8_t *h0,uint8_t *h1,uint8_t *h2,uint8_t *h3) {
      |                                    ^
secp256k1/SECP256K1.cpp:608:48: warning: parameter name 'h3' is too short, expected at least 3 characters [readability-identifier-length]
  608 |   uint8_t *h0,uint8_t *h1,uint8_t *h2,uint8_t *h3) {
      |                                                ^
secp256k1/SECP256K1.cpp:616:21: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  616 |   unsigned char sh0[64] __attribute__((aligned(16)));
      |                     ^
secp256k1/SECP256K1.cpp:616:48: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  616 |   unsigned char sh0[64] __attribute__((aligned(16)));
      |                                                ^
secp256k1/SECP256K1.cpp:617:21: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  617 |   unsigned char sh1[64] __attribute__((aligned(16)));
      |                     ^
secp256k1/SECP256K1.cpp:617:48: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  617 |   unsigned char sh1[64] __attribute__((aligned(16)));
      |                                                ^
secp256k1/SECP256K1.cpp:618:21: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  618 |   unsigned char sh2[64] __attribute__((aligned(16)));
      |                     ^
secp256k1/SECP256K1.cpp:618:48: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  618 |   unsigned char sh2[64] __attribute__((aligned(16)));
      |                                                ^
secp256k1/SECP256K1.cpp:619:21: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  619 |   unsigned char sh3[64] __attribute__((aligned(16)));
      |                     ^
secp256k1/SECP256K1.cpp:619:48: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  619 |   unsigned char sh3[64] __attribute__((aligned(16)));
      |                                                ^
secp256k1/SECP256K1.cpp:630:16: warning: variable name 'b0' is too short, expected at least 3 characters [readability-identifier-length]
  630 |       uint32_t b0[32];
      |                ^
secp256k1/SECP256K1.cpp:630:19: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  630 |       uint32_t b0[32];
      |                   ^
secp256k1/SECP256K1.cpp:631:16: warning: variable name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
  631 |       uint32_t b1[32];
      |                ^
secp256k1/SECP256K1.cpp:631:19: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  631 |       uint32_t b1[32];
      |                   ^
secp256k1/SECP256K1.cpp:632:16: warning: variable name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
  632 |       uint32_t b2[32];
      |                ^
secp256k1/SECP256K1.cpp:632:19: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  632 |       uint32_t b2[32];
      |                   ^
secp256k1/SECP256K1.cpp:633:16: warning: variable name 'b3' is too short, expected at least 3 characters [readability-identifier-length]
  633 |       uint32_t b3[32];
      |                ^
secp256k1/SECP256K1.cpp:633:19: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  633 |       uint32_t b3[32];
      |                   ^
secp256k1/SECP256K1.cpp:645:16: warning: variable name 'b0' is too short, expected at least 3 characters [readability-identifier-length]
  645 |       uint32_t b0[16];
      |                ^
secp256k1/SECP256K1.cpp:645:19: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  645 |       uint32_t b0[16];
      |                   ^
secp256k1/SECP256K1.cpp:646:16: warning: variable name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
  646 |       uint32_t b1[16];
      |                ^
secp256k1/SECP256K1.cpp:646:19: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  646 |       uint32_t b1[16];
      |                   ^
secp256k1/SECP256K1.cpp:647:16: warning: variable name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
  647 |       uint32_t b2[16];
      |                ^
secp256k1/SECP256K1.cpp:647:19: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  647 |       uint32_t b2[16];
      |                   ^
secp256k1/SECP256K1.cpp:648:16: warning: variable name 'b3' is too short, expected at least 3 characters [readability-identifier-length]
  648 |       uint32_t b3[16];
      |                ^
secp256k1/SECP256K1.cpp:648:19: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  648 |       uint32_t b3[16];
      |                   ^
secp256k1/SECP256K1.cpp:666:23: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  666 |     unsigned char kh0[20];
      |                       ^
secp256k1/SECP256K1.cpp:667:23: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  667 |     unsigned char kh1[20];
      |                       ^
secp256k1/SECP256K1.cpp:668:23: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  668 |     unsigned char kh2[20];
      |                       ^
secp256k1/SECP256K1.cpp:669:23: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  669 |     unsigned char kh3[20];
      |                       ^
secp256k1/SECP256K1.cpp:674:14: warning: variable name 'b0' is too short, expected at least 3 characters [readability-identifier-length]
  674 |     uint32_t b0[16];
      |              ^
secp256k1/SECP256K1.cpp:674:17: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  674 |     uint32_t b0[16];
      |                 ^
secp256k1/SECP256K1.cpp:675:14: warning: variable name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
  675 |     uint32_t b1[16];
      |              ^
secp256k1/SECP256K1.cpp:675:17: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  675 |     uint32_t b1[16];
      |                 ^
secp256k1/SECP256K1.cpp:676:14: warning: variable name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
  676 |     uint32_t b2[16];
      |              ^
secp256k1/SECP256K1.cpp:676:17: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  676 |     uint32_t b2[16];
      |                 ^
secp256k1/SECP256K1.cpp:677:14: warning: variable name 'b3' is too short, expected at least 3 characters [readability-identifier-length]
  677 |     uint32_t b3[16];
      |              ^
secp256k1/SECP256K1.cpp:677:17: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  677 |     uint32_t b3[16];
      |                 ^
secp256k1/SECP256K1.cpp:697:23: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  697 |   unsigned char shapk[64];
      |                       ^
secp256k1/SECP256K1.cpp:704:34: warning: 128 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  704 |     unsigned char publicKeyBytes[128];
      |                                  ^
secp256k1/SECP256K1.cpp:711:44: warning: 33 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  711 |       pubKey.y.Get32Bytes(publicKeyBytes + 33);
      |                                            ^
secp256k1/SECP256K1.cpp:731:26: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  731 |     unsigned char script[64];
      |                          ^
secp256k1/SECP256K1.cpp:734:17: warning: 0x14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  734 |     script[1] = 0x14;  // PUSH 20 bytes
      |                 ^
secp256k1/SECP256K1.cpp:737:20: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  737 |     sha256(script, 22, shapk);
      |                    ^
secp256k1/SECP256K1.cpp:768:17: warning: method 'GetHash160_fromX' can be made static [readability-convert-member-functions-to-static]
  768 | void Secp256K1::GetHash160_fromX(int type,unsigned char prefix,
      |                 ^
secp256k1/SECP256K1.cpp:769:8: warning: parameter name 'k0' is too short, expected at least 3 characters [readability-identifier-length]
  769 |   Int *k0,Int *k1,Int *k2,Int *k3,
      |        ^
secp256k1/SECP256K1.cpp:769:16: warning: parameter name 'k1' is too short, expected at least 3 characters [readability-identifier-length]
  769 |   Int *k0,Int *k1,Int *k2,Int *k3,
      |                ^
secp256k1/SECP256K1.cpp:769:24: warning: parameter name 'k2' is too short, expected at least 3 characters [readability-identifier-length]
  769 |   Int *k0,Int *k1,Int *k2,Int *k3,
      |                        ^
secp256k1/SECP256K1.cpp:769:32: warning: parameter name 'k3' is too short, expected at least 3 characters [readability-identifier-length]
  769 |   Int *k0,Int *k1,Int *k2,Int *k3,
      |                                ^
secp256k1/SECP256K1.cpp:770:12: warning: parameter name 'h0' is too short, expected at least 3 characters [readability-identifier-length]
  770 |   uint8_t *h0,uint8_t *h1,uint8_t *h2,uint8_t *h3) {
      |            ^
secp256k1/SECP256K1.cpp:770:24: warning: parameter name 'h1' is too short, expected at least 3 characters [readability-identifier-length]
  770 |   uint8_t *h0,uint8_t *h1,uint8_t *h2,uint8_t *h3) {
      |                        ^
secp256k1/SECP256K1.cpp:770:36: warning: parameter name 'h2' is too short, expected at least 3 characters [readability-identifier-length]
  770 |   uint8_t *h0,uint8_t *h1,uint8_t *h2,uint8_t *h3) {
      |                                    ^
secp256k1/SECP256K1.cpp:770:48: warning: parameter name 'h3' is too short, expected at least 3 characters [readability-identifier-length]
  770 |   uint8_t *h0,uint8_t *h1,uint8_t *h2,uint8_t *h3) {
      |                                                ^
secp256k1/SECP256K1.cpp:778:21: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  778 |   unsigned char sh0[64] __attribute__((aligned(16)));
      |                     ^
secp256k1/SECP256K1.cpp:778:48: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  778 |   unsigned char sh0[64] __attribute__((aligned(16)));
      |                                                ^
secp256k1/SECP256K1.cpp:779:21: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  779 |   unsigned char sh1[64] __attribute__((aligned(16)));
      |                     ^
secp256k1/SECP256K1.cpp:779:48: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  779 |   unsigned char sh1[64] __attribute__((aligned(16)));
      |                                                ^
secp256k1/SECP256K1.cpp:780:21: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  780 |   unsigned char sh2[64] __attribute__((aligned(16)));
      |                     ^
secp256k1/SECP256K1.cpp:780:48: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  780 |   unsigned char sh2[64] __attribute__((aligned(16)));
      |                                                ^
secp256k1/SECP256K1.cpp:781:21: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  781 |   unsigned char sh3[64] __attribute__((aligned(16)));
      |                     ^
secp256k1/SECP256K1.cpp:781:48: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  781 |   unsigned char sh3[64] __attribute__((aligned(16)));
      |                                                ^
secp256k1/SECP256K1.cpp:788:16: warning: variable name 'b0' is too short, expected at least 3 characters [readability-identifier-length]
  788 |       uint32_t b0[16];
      |                ^
secp256k1/SECP256K1.cpp:788:19: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  788 |       uint32_t b0[16];
      |                   ^
secp256k1/SECP256K1.cpp:789:16: warning: variable name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
  789 |       uint32_t b1[16];
      |                ^
secp256k1/SECP256K1.cpp:789:19: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  789 |       uint32_t b1[16];
      |                   ^
secp256k1/SECP256K1.cpp:790:16: warning: variable name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
  790 |       uint32_t b2[16];
      |                ^
secp256k1/SECP256K1.cpp:790:19: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  790 |       uint32_t b2[16];
      |                   ^
secp256k1/SECP256K1.cpp:791:16: warning: variable name 'b3' is too short, expected at least 3 characters [readability-identifier-length]
  791 |       uint32_t b3[16];
      |                ^
secp256k1/SECP256K1.cpp:791:19: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  791 |       uint32_t b3[16];
      |                   ^
/home/engine/project/albertobsd-keyhunt/secp256k1/SECP256k1.h:49:8: warning: function 'Secp256K1::ParsePublicKeyHex' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
   49 |   bool ParsePublicKeyHex(char *str,Point &p,bool &isCompressed);
      |        ^
secp256k1/SECP256K1.cpp:136:17: note: the definition seen here
  136 | bool Secp256K1::ParsePublicKeyHex(char *str,Point &ret,bool &isCompressed) {
      |                 ^
/home/engine/project/albertobsd-keyhunt/secp256k1/SECP256k1.h:49:8: note: differing parameters are named here: ('p'), in definition: ('ret')
   49 |   bool ParsePublicKeyHex(char *str,Point &p,bool &isCompressed);
      |        ^                                  ~
      |                                           ret
1155 warnings generated.
Suppressed 927 warnings (927 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/rmd160/rmd160.c
rmd160/rmd160.c:97:14: warning: 0x67452301UL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   97 |   MDbuf[0] = 0x67452301UL;
      |              ^
rmd160/rmd160.c:98:14: warning: 0xefcdab89UL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   98 |   MDbuf[1] = 0xefcdab89UL;
      |              ^
rmd160/rmd160.c:99:14: warning: 0x98badcfeUL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   99 |   MDbuf[2] = 0x98badcfeUL;
      |              ^
rmd160/rmd160.c:100:14: warning: 0x10325476UL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  100 |   MDbuf[3] = 0x10325476UL;
      |              ^
rmd160/rmd160.c:101:14: warning: 0xc3d2e1f0UL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  101 |   MDbuf[4] = 0xc3d2e1f0UL;
      |              ^
rmd160/rmd160.c:110:43: warning: parameter name 'X' is too short, expected at least 3 characters [readability-identifier-length]
  110 | RMDcompress (uint32_t * MDbuf, uint32_t * X)
      |                                           ^
rmd160/rmd160.c:110:43: warning: pointer parameter 'X' can be pointer to const [readability-non-const-parameter]
  110 | RMDcompress (uint32_t * MDbuf, uint32_t * X)
      |                                           ^
      |                                const 
rmd160/rmd160.c:112:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  112 |   uint32_t aa = MDbuf[0], bb = MDbuf[1], cc = MDbuf[2],
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  113 |             dd = MDbuf[3], ee = MDbuf[4];
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rmd160/rmd160.c:112:12: warning: variable name 'aa' is too short, expected at least 3 characters [readability-identifier-length]
  112 |   uint32_t aa = MDbuf[0], bb = MDbuf[1], cc = MDbuf[2],
      |            ^
rmd160/rmd160.c:112:27: warning: variable name 'bb' is too short, expected at least 3 characters [readability-identifier-length]
  112 |   uint32_t aa = MDbuf[0], bb = MDbuf[1], cc = MDbuf[2],
      |                           ^
rmd160/rmd160.c:112:42: warning: variable name 'cc' is too short, expected at least 3 characters [readability-identifier-length]
  112 |   uint32_t aa = MDbuf[0], bb = MDbuf[1], cc = MDbuf[2],
      |                                          ^
rmd160/rmd160.c:113:13: warning: variable name 'dd' is too short, expected at least 3 characters [readability-identifier-length]
  113 |             dd = MDbuf[3], ee = MDbuf[4];
      |             ^
rmd160/rmd160.c:113:28: warning: variable name 'ee' is too short, expected at least 3 characters [readability-identifier-length]
  113 |             dd = MDbuf[3], ee = MDbuf[4];
      |                            ^
rmd160/rmd160.c:114:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  114 |   uint32_t aaa = MDbuf[0], bbb = MDbuf[1], ccc = MDbuf[2],
      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  115 |             ddd = MDbuf[3], eee = MDbuf[4];
      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rmd160/rmd160.c:318:12: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  318 |   uint32_t i;                   /* counter */
      |            ^
rmd160/rmd160.c:319:12: warning: variable name 'X' is too short, expected at least 3 characters [readability-identifier-length]
  319 |   uint32_t X[16];               /* message words */
      |            ^
rmd160/rmd160.c:319:14: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  319 |   uint32_t X[16];               /* message words */
      |              ^
rmd160/rmd160.c:321:17: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  321 |   memset (X, 0, 16 * sizeof (uint32_t));
      |                 ^
rmd160/rmd160.c:324:29: warning: 63 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  324 |   for (i = 0; i < (lswlen & 63); i++)
      |                             ^
rmd160/rmd160.c:327:46: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  327 |       X[i >> 2] ^= (uint32_t) * strptr++ << (8 * (i & 3));
      |                                              ^
rmd160/rmd160.c:331:21: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  331 |   X[(lswlen >> 2) & 15] ^= (uint32_t) 1 << (8 * (lswlen & 3) + 7);
      |                     ^
rmd160/rmd160.c:331:45: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  331 |   X[(lswlen >> 2) & 15] ^= (uint32_t) 1 << (8 * (lswlen & 3) + 7);
      |                                             ^
rmd160/rmd160.c:331:64: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  331 |   X[(lswlen >> 2) & 15] ^= (uint32_t) 1 << (8 * (lswlen & 3) + 7);
      |                                                                ^
rmd160/rmd160.c:333:17: warning: 63 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  333 |   if ((lswlen & 63) > 55)
      |                 ^
rmd160/rmd160.c:333:23: warning: 55 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  333 |   if ((lswlen & 63) > 55)
      |                       ^
rmd160/rmd160.c:337:21: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  337 |       memset (X, 0, 16 * sizeof (uint32_t));
      |                     ^
rmd160/rmd160.c:341:5: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  341 |   X[14] = lswlen << 3;
      |     ^
rmd160/rmd160.c:342:5: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  342 |   X[15] = (lswlen >> 29) | (mswlen << 3);
      |     ^
rmd160/rmd160.c:342:22: warning: 29 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  342 |   X[15] = (lswlen >> 29) | (mswlen << 3);
      |                      ^
rmd160/rmd160.c:355:50: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  355 |       *dest++ = (uint32_t) ((unsigned) src[3] << 8 | src[2]) << 16 |
      |                                                  ^
rmd160/rmd160.c:355:65: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  355 |       *dest++ = (uint32_t) ((unsigned) src[3] << 8 | src[2]) << 16 |
      |                                                                 ^
rmd160/rmd160.c:356:24: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  356 |         ((unsigned) src[1] << 8 | src[0]);
      |                               ^
rmd160/rmd160.c:382:12: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  382 |   unsigned i;
      |            ^
rmd160/rmd160.c:385:12: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  385 |   uint32_t t = ctx->bytesLo;
      |            ^
rmd160/rmd160.c:386:36: warning: statement should be inside braces [readability-braces-around-statements]
  386 |   if ((ctx->bytesLo = t + len) < t)
      |                                    ^
      |                                     {
  387 |     ctx->bytesHi++;             /* Carry from low to high */
      |                                                             
rmd160/rmd160.c:417:11: warning: statement should be inside braces [readability-braces-around-statements]
  417 |   if (len)
      |           ^
      |            {
  418 |     memcpy (ctx->key, buf, len);
      |                                 
rmd160/rmd160.c:426:35: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  426 | RMD160Final (unsigned char digest[20], RMD160_CTX * ctx)
      |                                   ^
rmd160/rmd160.c:428:7: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  428 |   int i;
      |       ^
rmd160/rmd160.c:429:12: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  429 |   uint32_t t;
      |            ^
rmd160/rmd160.c:437:43: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  437 |       digest[i * 4 + 1] = (uint8_t) (t >> 8);
      |                                           ^
rmd160/rmd160.c:438:43: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  438 |       digest[i * 4 + 2] = (uint8_t) (t >> 16);
      |                                           ^
rmd160/rmd160.c:439:43: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  439 |       digest[i * 4 + 3] = (uint8_t) (t >> 24);
      |                                           ^
49 warnings generated.
Suppressed 7 warnings (7 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/hash/ripemd160.cpp
hash/ripemd160.cpp:30:34: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
   30 | void inline Initialize(uint32_t* s)
      |                                  ^
hash/ripemd160.cpp:32:12: warning: 0x67452301ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   32 |     s[0] = 0x67452301ul;
      |            ^
hash/ripemd160.cpp:32:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   32 |     s[0] = 0x67452301ul;
      |            ^         ~~
      |                      UL
hash/ripemd160.cpp:33:12: warning: 0xEFCDAB89ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   33 |     s[1] = 0xEFCDAB89ul;
      |            ^
hash/ripemd160.cpp:33:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   33 |     s[1] = 0xEFCDAB89ul;
      |            ^         ~~
      |                      UL
hash/ripemd160.cpp:34:12: warning: 0x98BADCFEul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   34 |     s[2] = 0x98BADCFEul;
      |            ^
hash/ripemd160.cpp:34:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   34 |     s[2] = 0x98BADCFEul;
      |            ^         ~~
      |                      UL
hash/ripemd160.cpp:35:12: warning: 0x10325476ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   35 |     s[3] = 0x10325476ul;
      |            ^
hash/ripemd160.cpp:35:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   35 |     s[3] = 0x10325476ul;
      |            ^         ~~
      |                      UL
hash/ripemd160.cpp:36:12: warning: 0xC3D2E1F0ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   36 |     s[4] = 0xC3D2E1F0ul;
      |            ^
hash/ripemd160.cpp:36:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   36 |     s[4] = 0xC3D2E1F0ul;
      |            ^         ~~
      |                      UL
hash/ripemd160.cpp:40:32: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
   40 | inline uint32_t _rotl(uint32_t x, uint8_t r) {
      |                                ^
hash/ripemd160.cpp:40:43: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
   40 | inline uint32_t _rotl(uint32_t x, uint8_t r) {
      |                                           ^
hash/ripemd160.cpp:59:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   59 | #define R21(a,b,c,d,e,x,r) Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160.cpp:60:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   60 | #define R31(a,b,c,d,e,x,r) Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160.cpp:61:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   61 | #define R41(a,b,c,d,e,x,r) Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160.cpp:62:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   62 | #define R51(a,b,c,d,e,x,r) Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160.cpp:63:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   63 | #define R12(a,b,c,d,e,x,r) Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160.cpp:64:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   64 | #define R22(a,b,c,d,e,x,r) Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160.cpp:65:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   65 | #define R32(a,b,c,d,e,x,r) Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160.cpp:66:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   66 | #define R42(a,b,c,d,e,x,r) Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160.cpp:70:26: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
   70 | void Transform(uint32_t* s, const unsigned char* chunk)
      |                          ^
hash/ripemd160.cpp:72:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   72 |     uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash/ripemd160.cpp:72:14: warning: variable name 'a1' is too short, expected at least 3 characters [readability-identifier-length]
   72 |     uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];
      |              ^
hash/ripemd160.cpp:72:25: warning: variable name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
   72 |     uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];
      |                         ^
hash/ripemd160.cpp:72:36: warning: variable name 'c1' is too short, expected at least 3 characters [readability-identifier-length]
   72 |     uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];
      |                                    ^
hash/ripemd160.cpp:72:47: warning: variable name 'd1' is too short, expected at least 3 characters [readability-identifier-length]
   72 |     uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];
      |                                               ^
hash/ripemd160.cpp:72:58: warning: variable name 'e1' is too short, expected at least 3 characters [readability-identifier-length]
   72 |     uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];
      |                                                          ^
hash/ripemd160.cpp:73:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   73 |     uint32_t a2 = a1, b2 = b1, c2 = c1, d2 = d1, e2 = e1;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash/ripemd160.cpp:73:14: warning: variable name 'a2' is too short, expected at least 3 characters [readability-identifier-length]
   73 |     uint32_t a2 = a1, b2 = b1, c2 = c1, d2 = d1, e2 = e1;
      |              ^
hash/ripemd160.cpp:73:23: warning: variable name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
   73 |     uint32_t a2 = a1, b2 = b1, c2 = c1, d2 = d1, e2 = e1;
      |                       ^
hash/ripemd160.cpp:73:32: warning: variable name 'c2' is too short, expected at least 3 characters [readability-identifier-length]
   73 |     uint32_t a2 = a1, b2 = b1, c2 = c1, d2 = d1, e2 = e1;
      |                                ^
hash/ripemd160.cpp:73:41: warning: variable name 'd2' is too short, expected at least 3 characters [readability-identifier-length]
   73 |     uint32_t a2 = a1, b2 = b1, c2 = c1, d2 = d1, e2 = e1;
      |                                         ^
hash/ripemd160.cpp:73:50: warning: variable name 'e2' is too short, expected at least 3 characters [readability-identifier-length]
   73 |     uint32_t a2 = a1, b2 = b1, c2 = c1, d2 = d1, e2 = e1;
      |                                                  ^
hash/ripemd160.cpp:74:14: warning: variable name 'w' is too short, expected at least 3 characters [readability-identifier-length]
   74 |     uint32_t w[16];
      |              ^
hash/ripemd160.cpp:74:16: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   74 |     uint32_t w[16];
      |                ^
hash/ripemd160.cpp:75:20: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   75 |     memcpy(w,chunk,16*sizeof(uint32_t));
      |                    ^
hash/ripemd160.cpp:242:14: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  242 |     uint32_t t = s[0];
      |              ^
hash/ripemd160.cpp:260:30: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  260 |     size_t bufsize = bytes % 64;
      |                              ^
hash/ripemd160.cpp:261:9: warning: implicit conversion 'size_t' (aka 'unsigned long') -> 'bool' [readability-implicit-bool-conversion]
  261 |     if (bufsize && bufsize + len >= 64) {
      |         ^
      |         (       != 0u)
hash/ripemd160.cpp:261:37: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  261 |     if (bufsize && bufsize + len >= 64) {
      |                                     ^
hash/ripemd160.cpp:263:37: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  263 |         memcpy(buf + bufsize, data, 64 - bufsize);
      |                                     ^
hash/ripemd160.cpp:264:18: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  264 |         bytes += 64 - bufsize;
      |                  ^
hash/ripemd160.cpp:265:17: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  265 |         data += 64 - bufsize;
      |                 ^
hash/ripemd160.cpp:269:26: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  269 |     while (end >= data + 64) {
      |                          ^
hash/ripemd160.cpp:272:18: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  272 |         bytes += 64;
      |                  ^
hash/ripemd160.cpp:273:17: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  273 |         data += 64;
      |                 ^
hash/ripemd160.cpp:282:46: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  282 | void CRIPEMD160::Finalize(unsigned char hash[20])
      |                                              ^
hash/ripemd160.cpp:285:28: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  285 |     unsigned char sizedesc[8];
      |                            ^
hash/ripemd160.cpp:287:22: warning: 119 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  287 |     Write(pad, 1 + ((119 - (bytes % 64)) % 64));
      |                      ^
hash/ripemd160.cpp:287:37: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  287 |     Write(pad, 1 + ((119 - (bytes % 64)) % 64));
      |                                     ^
hash/ripemd160.cpp:287:44: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  287 |     Write(pad, 1 + ((119 - (bytes % 64)) % 64));
      |                                            ^
hash/ripemd160.cpp:288:21: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  288 |     Write(sizedesc, 8);
      |                     ^
hash/ripemd160.cpp:289:19: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  289 |     memcpy(hash,s,20);
      |                   ^
hash/ripemd160.cpp:297:13: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  297 |   uint32_t *s = (uint32_t *)digest;
      |             ^
hash/ripemd160.cpp:299:16: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  299 |   memcpy(input+32,pad,24);
      |                ^
hash/ripemd160.cpp:299:23: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  299 |   memcpy(input+32,pad,24);
      |                       ^
hash/ripemd160.cpp:300:16: warning: 56 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  300 |   memcpy(input+56,&sizedesc_32,8);
      |                ^
hash/ripemd160.cpp:300:32: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  300 |   memcpy(input+56,&sizedesc_32,8);
      |                                ^
hash/ripemd160.cpp:315:16: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  315 |   char buf[2 * 20 + 1];
      |                ^
hash/ripemd160.cpp:316:11: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  316 |   buf[2 * 20] = 0;
      |           ^
hash/ripemd160.cpp:317:23: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  317 |   for (int i = 0; i < 20; i++)
      |                       ^
hash/ripemd160.cpp:317:31: warning: statement should be inside braces [readability-braces-around-statements]
  317 |   for (int i = 0; i < 20; i++)
      |                               ^
      |                                {
  318 |     sprintf(buf + i * 2, "%02x", (int)digest[i]);
      |                                                  
802 warnings generated.
Suppressed 619 warnings (619 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/xxhash/xxhash.c
3743 warnings generated.
Suppressed 3743 warnings (3743 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/secp256k1/Random.cpp
secp256k1/Random.cpp:50:11: warning: 0xffffffffUL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   50 |   seed &= 0xffffffffUL;
      |           ^
secp256k1/Random.cpp:56:13: warning: 1812433253UL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   56 |     seed = (1812433253UL * (seed ^ (seed >> 30)) + pos + 1) & 0xffffffffUL;
      |             ^
secp256k1/Random.cpp:56:45: warning: 30 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   56 |     seed = (1812433253UL * (seed ^ (seed >> 30)) + pos + 1) & 0xffffffffUL;
      |                                             ^
secp256k1/Random.cpp:56:63: warning: 0xffffffffUL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   56 |     seed = (1812433253UL * (seed ^ (seed >> 30)) + pos + 1) & 0xffffffffUL;
      |                                                               ^
secp256k1/Random.cpp:77:17: warning: variable name 'y' is too short, expected at least 3 characters [readability-identifier-length]
   77 |   unsigned long y;
      |                 ^
secp256k1/Random.cpp:81:9: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
   81 |     int i;
      |         ^
secp256k1/Random.cpp:102:14: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  102 |   y ^= (y >> 11);
      |              ^
secp256k1/Random.cpp:103:14: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  103 |   y ^= (y << 7) & 0x9d2c5680UL;
      |              ^
secp256k1/Random.cpp:103:19: warning: 0x9d2c5680UL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  103 |   y ^= (y << 7) & 0x9d2c5680UL;
      |                   ^
secp256k1/Random.cpp:104:14: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  104 |   y ^= (y << 15) & 0xefc60000UL;
      |              ^
secp256k1/Random.cpp:104:20: warning: 0xefc60000UL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  104 |   y ^= (y << 15) & 0xefc60000UL;
      |                    ^
secp256k1/Random.cpp:105:14: warning: 18 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  105 |   y ^= (y >> 18);
      |              ^
secp256k1/Random.cpp:113:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  113 |         long a = rk_random(state) >> 5, b = rk_random(state) >> 6;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
secp256k1/Random.cpp:113:7: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  113 |         long a = rk_random(state) >> 5, b = rk_random(state) >> 6;
      |              ^
secp256k1/Random.cpp:113:31: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  113 |         long a = rk_random(state) >> 5, b = rk_random(state) >> 6;
      |                                      ^
secp256k1/Random.cpp:113:34: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  113 |         long a = rk_random(state) >> 5, b = rk_random(state) >> 6;
      |                                         ^
secp256k1/Random.cpp:113:58: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  113 |         long a = rk_random(state) >> 5, b = rk_random(state) >> 6;
      |                                                                 ^
secp256k1/Random.cpp:114:14: warning: 67108864.0 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  114 |         return (a * 67108864.0 + b) / 9007199254740992.0;
      |                     ^
secp256k1/Random.cpp:114:32: warning: 9007199254740992.0 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  114 |         return (a * 67108864.0 + b) / 9007199254740992.0;
      |                                       ^
secp256k1/Random.cpp:129:16: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
  129 |         unsigned long r;
      |                       ^
secp256k1/Random.cpp:134:2: warning: do not use 'else' after 'return' [readability-else-after-return]
  134 |         else    {
      |         ^~~~    ~
  135 |                 /*Fail safe */
      |                 ~~~~~~~~~~~~~~
  136 |                 return rk_random(&localState);
      |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  137 |         }
      |         ~
25 warnings generated.
Suppressed 4 warnings (4 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/sha3/sha3.c
sha3/sha3.c:46:32: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   46 | explicit_memset(void *buf, int c, size_t n)
      |                                ^
sha3/sha3.c:55:17: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   55 |         const uint8_t *p = (const uint8_t *)buf;
      |                        ^
sha3/sha3.c:58:25: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   58 |             ((uint64_t)p[1] << 8) |
      |                                ^
sha3/sha3.c:59:25: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   59 |             ((uint64_t)p[2] << 16) |
      |                                ^
sha3/sha3.c:60:25: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   60 |             ((uint64_t)p[3] << 24) |
      |                                ^
sha3/sha3.c:61:25: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   61 |             ((uint64_t)p[4] << 32) |
      |                                ^
sha3/sha3.c:62:19: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   62 |             ((uint64_t)p[5] << 40) |
      |                          ^
sha3/sha3.c:62:25: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   62 |             ((uint64_t)p[5] << 40) |
      |                                ^
sha3/sha3.c:63:19: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   63 |             ((uint64_t)p[6] << 48) |
      |                          ^
sha3/sha3.c:63:25: warning: 48 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   63 |             ((uint64_t)p[6] << 48) |
      |                                ^
sha3/sha3.c:64:19: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   64 |             ((uint64_t)p[7] << 56));
      |                          ^
sha3/sha3.c:64:25: warning: 56 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   64 |             ((uint64_t)p[7] << 56));
      |                                ^
sha3/sha3.c:68:29: warning: parameter name 'v' is too short, expected at least 3 characters [readability-identifier-length]
   68 | le64enc(void *buf, uint64_t v)
      |                             ^
sha3/sha3.c:70:11: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   70 |         uint8_t *p = (uint8_t *)buf;
      |                  ^
sha3/sha3.c:72:18: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   72 |         *p++ = v; v >>= 8;
      |                         ^
sha3/sha3.c:73:18: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   73 |         *p++ = v; v >>= 8;
      |                         ^
sha3/sha3.c:74:18: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   74 |         *p++ = v; v >>= 8;
      |                         ^
sha3/sha3.c:75:18: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   75 |         *p++ = v; v >>= 8;
      |                         ^
sha3/sha3.c:76:18: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   76 |         *p++ = v; v >>= 8;
      |                         ^
sha3/sha3.c:77:18: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   77 |         *p++ = v; v >>= 8;
      |                         ^
sha3/sha3.c:78:18: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   78 |         *p++ = v; v >>= 8;
      |                         ^
sha3/sha3.c:89:20: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
   89 | sha3_rate(unsigned d)
      |                    ^
sha3/sha3.c:91:17: warning: variable name 'cw' is too short, expected at least 3 characters [readability-identifier-length]
   91 |         const unsigned cw = 2*d/8;      /* capacity in words */
      |                        ^
sha3/sha3.c:93:9: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   93 |         return 25 - cw;
      |                ^
sha3/sha3.c:97:24: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
   97 | sha3_init(struct sha3 *C, unsigned rw)
      |                        ^
sha3/sha3.c:97:36: warning: parameter name 'rw' is too short, expected at least 3 characters [readability-identifier-length]
   97 | sha3_init(struct sha3 *C, unsigned rw)
      |                                    ^
sha3/sha3.c:99:11: warning: variable name 'iw' is too short, expected at least 3 characters [readability-identifier-length]
   99 |         unsigned iw;
      |                  ^
sha3/sha3.c:101:10: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  101 |         C->nb = 8*rw;
      |                 ^
sha3/sha3.c:102:20: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  102 |         for (iw = 0; iw < 25; iw++)
      |                           ^
sha3/sha3.c:102:29: warning: statement should be inside braces [readability-braces-around-statements]
  102 |         for (iw = 0; iw < 25; iw++)
      |                                    ^
      |                                     {
  103 |                 C->A[iw] = 0;
      |                              
sha3/sha3.c:107:1: warning: function 'sha3_update' has cognitive complexity of 35 (threshold 25) [readability-function-cognitive-complexity]
  107 | sha3_update(struct sha3 *C, const uint8_t *data, size_t len, unsigned rw)
      | ^
sha3/sha3.c:112:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  112 |         assert(0 < C->nb);
      |         ^
/usr/include/assert.h:104:7: note: expanded from macro 'assert'
  104 |       ? void (0)                                                        \
      |       ^
sha3/sha3.c:115:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  115 |         if ((C->nb % 8) != 0) {
      |         ^
sha3/sha3.c:117:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  117 |                 for (ib = 0; ib < MIN(len, C->nb % 8); ib++)
      |                 ^
sha3/sha3.c:117:21: note: +3, including nesting penalty of 2, nesting level increased to 3
  117 |                 for (ib = 0; ib < MIN(len, C->nb % 8); ib++)
      |                                   ^
sha3/sha3.c:42:29: note: expanded from macro 'MIN'
   42 | #define MIN(a,b)        ((a) < (b) ? (a) : (b))
      |                                    ^
sha3/sha3.c:125:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  125 |                 if (C->nb == 0) {
      |                 ^
sha3/sha3.c:131:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  131 |                 if (len == 0)
      |                 ^
sha3/sha3.c:136:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  136 |         assert((C->nb % 8) == 0);
      |         ^
/usr/include/assert.h:104:7: note: expanded from macro 'assert'
  104 |       ? void (0)                                                        \
      |       ^
sha3/sha3.c:137:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  137 |         if (C->nb < 8*rw) {
      |         ^
sha3/sha3.c:138:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  138 |                 for (iw = 0; iw < MIN(len, C->nb)/8; iw++)
      |                 ^
sha3/sha3.c:138:21: note: +3, including nesting penalty of 2, nesting level increased to 3
  138 |                 for (iw = 0; iw < MIN(len, C->nb)/8; iw++)
      |                                   ^
sha3/sha3.c:42:29: note: expanded from macro 'MIN'
   42 | #define MIN(a,b)        ((a) < (b) ? (a) : (b))
      |                                    ^
sha3/sha3.c:145:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  145 |                 if (C->nb == 0) {
      |                 ^
sha3/sha3.c:148:5: note: +1, nesting level increased to 2
  148 |                 } else {
      |                   ^
sha3/sha3.c:150:4: note: +3, including nesting penalty of 2, nesting level increased to 3
  150 |                         assert(len < 8);
      |                         ^
/usr/include/assert.h:104:7: note: expanded from macro 'assert'
  104 |       ? void (0)                                                        \
      |       ^
sha3/sha3.c:151:4: note: +1
  151 |                         goto partial;
      |                         ^
sha3/sha3.c:156:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  156 |         assert(C->nb == 8*rw);
      |         ^
/usr/include/assert.h:104:7: note: expanded from macro 'assert'
  104 |       ? void (0)                                                        \
      |       ^
sha3/sha3.c:157:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  157 |         while (8*rw <= len) {
      |         ^
sha3/sha3.c:158:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  158 |                 for (iw = 0; iw < rw; iw++)
      |                 ^
sha3/sha3.c:166:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  166 |         for (iw = 0; iw < len/8; iw++)
      |         ^
sha3/sha3.c:174:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  174 |         assert(len < 8);
      |         ^
/usr/include/assert.h:104:7: note: expanded from macro 'assert'
  104 |       ? void (0)                                                        \
      |       ^
sha3/sha3.c:175:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  175 |         assert(0 < C->nb);
      |         ^
/usr/include/assert.h:104:7: note: expanded from macro 'assert'
  104 |       ? void (0)                                                        \
      |       ^
sha3/sha3.c:176:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  176 |         assert((C->nb % 8) == 0);
      |         ^
/usr/include/assert.h:104:7: note: expanded from macro 'assert'
  104 |       ? void (0)                                                        \
      |       ^
sha3/sha3.c:178:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  178 |         for (ib = 0; ib < len; ib++)
      |         ^
sha3/sha3.c:182:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  182 |         assert(0 < C->nb);
      |         ^
/usr/include/assert.h:104:7: note: expanded from macro 'assert'
  104 |       ? void (0)                                                        \
      |       ^
sha3/sha3.c:107:26: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  107 | sha3_update(struct sha3 *C, const uint8_t *data, size_t len, unsigned rw)
      |                          ^
sha3/sha3.c:107:71: warning: parameter name 'rw' is too short, expected at least 3 characters [readability-identifier-length]
  107 | sha3_update(struct sha3 *C, const uint8_t *data, size_t len, unsigned rw)
      |                                                                       ^
sha3/sha3.c:109:11: warning: variable name 'T' is too short, expected at least 3 characters [readability-identifier-length]
  109 |         uint64_t T;
      |                  ^
sha3/sha3.c:110:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  110 |         unsigned ib, iw;                /* index of byte/word */
      |         ^~~~~~~~~~~~~~~~
sha3/sha3.c:110:11: warning: variable name 'ib' is too short, expected at least 3 characters [readability-identifier-length]
  110 |         unsigned ib, iw;                /* index of byte/word */
      |                  ^
sha3/sha3.c:110:15: warning: variable name 'iw' is too short, expected at least 3 characters [readability-identifier-length]
  110 |         unsigned ib, iw;                /* index of byte/word */
      |                      ^
sha3/sha3.c:115:15: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  115 |         if ((C->nb % 8) != 0) {
      |                      ^
sha3/sha3.c:117:47: warning: statement should be inside braces [readability-braces-around-statements]
  117 |                 for (ib = 0; ib < MIN(len, C->nb % 8); ib++)
      |                                                             ^
      |                                                              {
  118 |                         T |= (uint64_t)data[ib] << (8*ib);
      |                                                           
sha3/sha3.c:118:32: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  118 |                         T |= (uint64_t)data[ib] << (8*ib);
      |                                                     ^
sha3/sha3.c:119:22: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  119 |                 C->A[rw - (C->nb + 7)/8] ^= T << (8*(8 - (C->nb % 8)));
      |                                    ^
sha3/sha3.c:119:25: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  119 |                 C->A[rw - (C->nb + 7)/8] ^= T << (8*(8 - (C->nb % 8)));
      |                                       ^
sha3/sha3.c:119:37: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  119 |                 C->A[rw - (C->nb + 7)/8] ^= T << (8*(8 - (C->nb % 8)));
      |                                                   ^
sha3/sha3.c:119:40: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  119 |                 C->A[rw - (C->nb + 7)/8] ^= T << (8*(8 - (C->nb % 8)));
      |                                                      ^
sha3/sha3.c:119:53: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  119 |                 C->A[rw - (C->nb + 7)/8] ^= T << (8*(8 - (C->nb % 8)));
      |                                                                   ^
sha3/sha3.c:127:12: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  127 |                         C->nb = 8*rw;
      |                                 ^
sha3/sha3.c:131:16: warning: statement should be inside braces [readability-braces-around-statements]
  131 |                 if (len == 0)
      |                              ^
      |                               {
  132 |                         return;
      |                                
sha3/sha3.c:137:14: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  137 |         if (C->nb < 8*rw) {
      |                     ^
sha3/sha3.c:138:37: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  138 |                 for (iw = 0; iw < MIN(len, C->nb)/8; iw++)
      |                                                   ^
sha3/sha3.c:138:45: warning: statement should be inside braces [readability-braces-around-statements]
  138 |                 for (iw = 0; iw < MIN(len, C->nb)/8; iw++)
      |                                                           ^
      |                                                            {
  139 |                         C->A[rw - C->nb/8 + iw] ^= le64dec(data + 8*iw);
      |                                                                         
sha3/sha3.c:139:20: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  139 |                         C->A[rw - C->nb/8 + iw] ^= le64dec(data + 8*iw);
      |                                         ^
sha3/sha3.c:139:46: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  139 |                         C->A[rw - C->nb/8 + iw] ^= le64dec(data + 8*iw);
      |                                                                   ^
sha3/sha3.c:140:12: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  140 |                 C->nb -= 8*iw;
      |                          ^
sha3/sha3.c:141:11: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  141 |                 data += 8*iw;
      |                         ^
sha3/sha3.c:142:10: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  142 |                 len -= 8*iw;
      |                        ^
sha3/sha3.c:147:12: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  147 |                         C->nb = 8*rw;
      |                                 ^
sha3/sha3.c:157:9: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  157 |         while (8*rw <= len) {
      |                ^
sha3/sha3.c:158:30: warning: statement should be inside braces [readability-braces-around-statements]
  158 |                 for (iw = 0; iw < rw; iw++)
      |                                            ^
      |                                             {
  159 |                         C->A[iw] ^= le64dec(data + 8*iw);
      |                                                          
sha3/sha3.c:159:31: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  159 |                         C->A[iw] ^= le64dec(data + 8*iw);
      |                                                    ^
sha3/sha3.c:161:11: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  161 |                 data += 8*rw;
      |                         ^
sha3/sha3.c:162:10: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  162 |                 len -= 8*rw;
      |                        ^
sha3/sha3.c:166:24: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  166 |         for (iw = 0; iw < len/8; iw++)
      |                               ^
sha3/sha3.c:166:32: warning: statement should be inside braces [readability-braces-around-statements]
  166 |         for (iw = 0; iw < len/8; iw++)
      |                                       ^
      |                                        {
  167 |                 C->A[rw - C->nb/8 + iw] ^= le64dec(data + 8*iw);
      |                                                                 
sha3/sha3.c:167:19: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  167 |                 C->A[rw - C->nb/8 + iw] ^= le64dec(data + 8*iw);
      |                                 ^
sha3/sha3.c:167:45: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  167 |                 C->A[rw - C->nb/8 + iw] ^= le64dec(data + 8*iw);
      |                                                           ^
sha3/sha3.c:168:11: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  168 |         C->nb -= 8*iw;
      |                  ^
sha3/sha3.c:169:10: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  169 |         data += 8*iw;
      |                 ^
sha3/sha3.c:170:9: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  170 |         len -= 8*iw;
      |                ^
sha3/sha3.c:178:30: warning: statement should be inside braces [readability-braces-around-statements]
  178 |         for (ib = 0; ib < len; ib++)
      |                                     ^
      |                                      {
  179 |                 T |= (uint64_t)data[ib] << (8*ib);
      |                                                   
sha3/sha3.c:179:31: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  179 |                 T |= (uint64_t)data[ib] << (8*ib);
      |                                             ^
sha3/sha3.c:180:18: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  180 |         C->A[rw - C->nb/8] ^= T;
      |                         ^
sha3/sha3.c:186:31: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  186 | sha3_or_keccak_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw, uint64_t padding)
      |                               ^
sha3/sha3.c:186:43: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  186 | sha3_or_keccak_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw, uint64_t padding)
      |                                           ^
sha3/sha3.c:186:59: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  186 | sha3_or_keccak_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw, uint64_t padding)
      |                                                           ^
sha3/sha3.c:186:71: warning: parameter name 'rw' is too short, expected at least 3 characters [readability-identifier-length]
  186 | sha3_or_keccak_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw, uint64_t padding)
      |                                                                       ^
sha3/sha3.c:188:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  188 |         unsigned nw, iw;
      |         ^~~~~~~~~~~~~~~~
sha3/sha3.c:188:11: warning: variable name 'nw' is too short, expected at least 3 characters [readability-identifier-length]
  188 |         unsigned nw, iw;
      |                  ^
sha3/sha3.c:188:15: warning: variable name 'iw' is too short, expected at least 3 characters [readability-identifier-length]
  188 |         unsigned nw, iw;
      |                      ^
sha3/sha3.c:194:16: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  194 |         nw = (C->nb + 7)/8;
      |                       ^
sha3/sha3.c:194:19: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  194 |         nw = (C->nb + 7)/8;
      |                          ^
sha3/sha3.c:197:31: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  197 |         C->A[rw - nw] ^= padding << (8*(8*nw - C->nb));
      |                                      ^
sha3/sha3.c:197:34: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  197 |         C->A[rw - nw] ^= padding << (8*(8*nw - C->nb));
      |                                         ^
sha3/sha3.c:198:18: warning: 0x8000000000000000ULL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  198 |         C->A[rw - 1] ^= 0x8000000000000000ULL;
      |                         ^
sha3/sha3.c:204:22: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  204 |         for (iw = 0; iw < d/8; iw++)
      |                             ^
sha3/sha3.c:204:30: warning: statement should be inside braces [readability-braces-around-statements]
  204 |         for (iw = 0; iw < d/8; iw++)
      |                                     ^
      |                                      {
  205 |                 le64enc(h + 8*iw, C->A[iw]);
      |                                             
sha3/sha3.c:205:15: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  205 |                 le64enc(h + 8*iw, C->A[iw]);
      |                             ^
sha3/sha3.c:206:7: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  206 |         h += 8*iw;
      |              ^
sha3/sha3.c:207:7: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  207 |         d -= 8*iw;
      |              ^
sha3/sha3.c:210:12: warning: variable name 'T' is too short, expected at least 3 characters [readability-identifier-length]
  210 |                 uint64_t T = C->A[iw];
      |                          ^
sha3/sha3.c:212:15: warning: 0xff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  212 |                         *h++ = T & 0xff;
      |                                    ^
sha3/sha3.c:213:10: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  213 |                         T >>= 8;
      |                               ^
sha3/sha3.c:214:12: warning: implicit conversion 'unsigned int' -> 'bool' [readability-implicit-bool-conversion]
  214 |                 } while (--d);
      |                          ^  
      |                              != 0u
sha3/sha3.c:221:21: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  221 | sha3_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                     ^
sha3/sha3.c:221:33: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  221 | sha3_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                                 ^
sha3/sha3.c:221:49: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  221 | sha3_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                                                 ^
sha3/sha3.c:221:61: warning: parameter name 'rw' is too short, expected at least 3 characters [readability-identifier-length]
  221 | sha3_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                                                             ^
sha3/sha3.c:223:39: warning: 0x06 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  223 |     sha3_or_keccak_final(h, d, C, rw, 0x06);
      |                                       ^
sha3/sha3.c:227:23: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  227 | keccak_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                       ^
sha3/sha3.c:227:35: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  227 | keccak_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                                   ^
sha3/sha3.c:227:51: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  227 | keccak_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                                                   ^
sha3/sha3.c:227:63: warning: parameter name 'rw' is too short, expected at least 3 characters [readability-identifier-length]
  227 | keccak_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                                                               ^
sha3/sha3.c:233:22: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  233 | shake_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                      ^
sha3/sha3.c:233:34: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  233 | shake_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                                  ^
sha3/sha3.c:233:50: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  233 | shake_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                                                  ^
sha3/sha3.c:233:62: warning: parameter name 'rw' is too short, expected at least 3 characters [readability-identifier-length]
  233 | shake_final(uint8_t *h, unsigned d, struct sha3 *C, unsigned rw)
      |                                                              ^
sha3/sha3.c:235:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  235 |         unsigned nw, iw;
      |         ^~~~~~~~~~~~~~~~
sha3/sha3.c:235:11: warning: variable name 'nw' is too short, expected at least 3 characters [readability-identifier-length]
  235 |         unsigned nw, iw;
      |                  ^
sha3/sha3.c:235:15: warning: variable name 'iw' is too short, expected at least 3 characters [readability-identifier-length]
  235 |         unsigned nw, iw;
      |                      ^
sha3/sha3.c:240:16: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  240 |         nw = (C->nb + 7)/8;
      |                       ^
sha3/sha3.c:240:19: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  240 |         nw = (C->nb + 7)/8;
      |                          ^
sha3/sha3.c:243:29: warning: 0x1f is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  243 |         C->A[rw - nw] ^= (uint64_t)0x1f << (8*(8*nw - C->nb));
      |                                    ^
sha3/sha3.c:243:38: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  243 |         C->A[rw - nw] ^= (uint64_t)0x1f << (8*(8*nw - C->nb));
      |                                             ^
sha3/sha3.c:243:41: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  243 |         C->A[rw - nw] ^= (uint64_t)0x1f << (8*(8*nw - C->nb));
      |                                                ^
sha3/sha3.c:244:18: warning: 0x8000000000000000ULL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  244 |         C->A[rw - 1] ^= 0x8000000000000000ULL;
      |                         ^
sha3/sha3.c:247:9: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  247 |         while (8*rw <= d) {
      |                ^
sha3/sha3.c:249:30: warning: statement should be inside braces [readability-braces-around-statements]
  249 |                 for (iw = 0; iw < rw; iw++)
      |                                            ^
      |                                             {
  250 |                         le64enc(h + 8*iw, C->A[iw]);
      |                                                     
sha3/sha3.c:250:16: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  250 |                         le64enc(h + 8*iw, C->A[iw]);
      |                                     ^
sha3/sha3.c:251:8: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  251 |                 h += 8*iw;
      |                      ^
sha3/sha3.c:252:8: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  252 |                 d -= 8*iw;
      |                      ^
sha3/sha3.c:261:23: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  261 |                 for (iw = 0; iw < d/8; iw++)
      |                                     ^
sha3/sha3.c:261:31: warning: statement should be inside braces [readability-braces-around-statements]
  261 |                 for (iw = 0; iw < d/8; iw++)
      |                                             ^
      |                                              {
  262 |                         le64enc(h + 8*iw, C->A[iw]);
      |                                                     
sha3/sha3.c:262:16: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  262 |                         le64enc(h + 8*iw, C->A[iw]);
      |                                     ^
sha3/sha3.c:263:8: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  263 |                 h += 8*iw;
      |                      ^
sha3/sha3.c:264:8: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  264 |                 d -= 8*iw;
      |                      ^
sha3/sha3.c:271:13: warning: variable name 'T' is too short, expected at least 3 characters [readability-identifier-length]
  271 |                         uint64_t T = C->A[iw];
      |                                  ^
sha3/sha3.c:273:16: warning: 0xff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  273 |                                 *h++ = T & 0xff;
      |                                            ^
sha3/sha3.c:274:11: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  274 |                                 T >>= 8;
      |                                       ^
sha3/sha3.c:275:13: warning: implicit conversion 'unsigned int' -> 'bool' [readability-implicit-bool-conversion]
  275 |                         } while (--d);
      |                                  ^  
      |                                      != 0u
sha3/sha3.c:284:29: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  284 | SHA3_224_Init(SHA3_224_CTX *C)
      |                             ^
sha3/sha3.c:291:31: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  291 | SHA3_224_Update(SHA3_224_CTX *C, const uint8_t *data, size_t len)
      |                               ^
sha3/sha3.c:298:24: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  298 | SHA3_224_Final(uint8_t h[SHA3_224_DIGEST_LENGTH], SHA3_224_CTX *C)
      |                        ^
sha3/sha3.c:298:65: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  298 | SHA3_224_Final(uint8_t h[SHA3_224_DIGEST_LENGTH], SHA3_224_CTX *C)
      |                                                                 ^
sha3/sha3.c:306:29: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  306 | SHA3_256_Init(SHA3_256_CTX *C)
      |                             ^
sha3/sha3.c:313:31: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  313 | SHA3_256_Update(SHA3_256_CTX *C, const uint8_t *data, size_t len)
      |                               ^
sha3/sha3.c:320:24: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  320 | SHA3_256_Final(uint8_t h[SHA3_256_DIGEST_LENGTH], SHA3_256_CTX *C)
      |                        ^
sha3/sha3.c:320:65: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  320 | SHA3_256_Final(uint8_t h[SHA3_256_DIGEST_LENGTH], SHA3_256_CTX *C)
      |                                                                 ^
sha3/sha3.c:328:29: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  328 | SHA3_384_Init(SHA3_384_CTX *C)
      |                             ^
sha3/sha3.c:335:31: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  335 | SHA3_384_Update(SHA3_384_CTX *C, const uint8_t *data, size_t len)
      |                               ^
sha3/sha3.c:342:24: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  342 | SHA3_384_Final(uint8_t h[SHA3_384_DIGEST_LENGTH], SHA3_384_CTX *C)
      |                        ^
sha3/sha3.c:342:65: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  342 | SHA3_384_Final(uint8_t h[SHA3_384_DIGEST_LENGTH], SHA3_384_CTX *C)
      |                                                                 ^
sha3/sha3.c:350:29: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  350 | SHA3_512_Init(SHA3_512_CTX *C)
      |                             ^
sha3/sha3.c:357:31: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  357 | SHA3_512_Update(SHA3_512_CTX *C, const uint8_t *data, size_t len)
      |                               ^
sha3/sha3.c:364:24: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  364 | SHA3_512_Final(uint8_t h[SHA3_512_DIGEST_LENGTH], SHA3_512_CTX *C)
      |                        ^
sha3/sha3.c:364:65: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  364 | SHA3_512_Final(uint8_t h[SHA3_512_DIGEST_LENGTH], SHA3_512_CTX *C)
      |                                                                 ^
sha3/sha3.c:372:29: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  372 | SHAKE128_Init(SHAKE128_CTX *C)
      |                             ^
sha3/sha3.c:375:32: warning: 128 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  375 |         sha3_init(&C->C128, sha3_rate(128/8));
      |                                       ^
sha3/sha3.c:375:36: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  375 |         sha3_init(&C->C128, sha3_rate(128/8));
      |                                           ^
sha3/sha3.c:379:31: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  379 | SHAKE128_Update(SHAKE128_CTX *C, const uint8_t *data, size_t len)
      |                               ^
sha3/sha3.c:382:45: warning: 128 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  382 |         sha3_update(&C->C128, data, len, sha3_rate(128/8));
      |                                                    ^
sha3/sha3.c:382:49: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  382 |         sha3_update(&C->C128, data, len, sha3_rate(128/8));
      |                                                        ^
sha3/sha3.c:386:25: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  386 | SHAKE128_Final(uint8_t *h, size_t d, SHAKE128_CTX *C)
      |                         ^
sha3/sha3.c:386:35: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  386 | SHAKE128_Final(uint8_t *h, size_t d, SHAKE128_CTX *C)
      |                                   ^
sha3/sha3.c:386:52: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  386 | SHAKE128_Final(uint8_t *h, size_t d, SHAKE128_CTX *C)
      |                                                    ^
sha3/sha3.c:389:40: warning: 128 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  389 |         shake_final(h, d, &C->C128, sha3_rate(128/8));
      |                                               ^
sha3/sha3.c:389:44: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  389 |         shake_final(h, d, &C->C128, sha3_rate(128/8));
      |                                                   ^
sha3/sha3.c:393:29: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  393 | SHAKE256_Init(SHAKE256_CTX *C)
      |                             ^
sha3/sha3.c:396:32: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  396 |         sha3_init(&C->C256, sha3_rate(256/8));
      |                                       ^
sha3/sha3.c:396:36: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  396 |         sha3_init(&C->C256, sha3_rate(256/8));
      |                                           ^
sha3/sha3.c:400:31: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  400 | SHAKE256_Update(SHAKE256_CTX *C, const uint8_t *data, size_t len)
      |                               ^
sha3/sha3.c:403:45: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  403 |         sha3_update(&C->C256, data, len, sha3_rate(256/8));
      |                                                    ^
sha3/sha3.c:403:49: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  403 |         sha3_update(&C->C256, data, len, sha3_rate(256/8));
      |                                                        ^
sha3/sha3.c:407:25: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  407 | SHAKE256_Final(uint8_t *h, size_t d, SHAKE256_CTX *C)
      |                         ^
sha3/sha3.c:407:35: warning: parameter name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  407 | SHAKE256_Final(uint8_t *h, size_t d, SHAKE256_CTX *C)
      |                                   ^
sha3/sha3.c:407:52: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  407 | SHAKE256_Final(uint8_t *h, size_t d, SHAKE256_CTX *C)
      |                                                    ^
sha3/sha3.c:410:40: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  410 |         shake_final(h, d, &C->C256, sha3_rate(256/8));
      |                                               ^
sha3/sha3.c:410:44: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  410 |         shake_final(h, d, &C->C256, sha3_rate(256/8));
      |                                                   ^
sha3/sha3.c:414:26: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  414 | KECCAK_256_Final(uint8_t h[SHA3_256_DIGEST_LENGTH], SHA3_256_CTX *C)
      |                          ^
sha3/sha3.c:414:67: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  414 | KECCAK_256_Final(uint8_t h[SHA3_256_DIGEST_LENGTH], SHA3_256_CTX *C)
      |                                                                   ^
sha3/sha3.c:422:26: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  422 | KECCAK_384_Final(uint8_t h[SHA3_384_DIGEST_LENGTH], SHA3_384_CTX *C)
      |                          ^
sha3/sha3.c:422:67: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  422 | KECCAK_384_Final(uint8_t h[SHA3_384_DIGEST_LENGTH], SHA3_384_CTX *C)
      |                                                                   ^
sha3/sha3.c:430:26: warning: parameter name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  430 | KECCAK_512_Final(uint8_t h[SHA3_512_DIGEST_LENGTH], SHA3_512_CTX *C)
      |                          ^
sha3/sha3.c:430:67: warning: parameter name 'C' is too short, expected at least 3 characters [readability-identifier-length]
  430 | KECCAK_512_Final(uint8_t h[SHA3_512_DIGEST_LENGTH], SHA3_512_CTX *C)
      |                                                                   ^
sha3/sha3.c:440:11: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  440 |         uint8_t *p = (uint8_t *)buf;
      |                  ^
sha3/sha3.c:441:9: warning: variable name 'n' is too short, expected at least 3 characters [readability-identifier-length]
  441 |         size_t n = len;
      |                ^
sha3/sha3.c:442:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  442 |         uint32_t t, a, b;
      |         ^~~~~~~~~~~~~~~~~
sha3/sha3.c:442:11: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  442 |         uint32_t t, a, b;
      |                  ^
sha3/sha3.c:442:14: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  442 |         uint32_t t, a, b;
      |                     ^
sha3/sha3.c:442:17: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  442 |         uint32_t t, a, b;
      |                        ^
sha3/sha3.c:444:6: warning: 0xdead4bad is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  444 |         a = 0xdead4bad * seed;
      |             ^
sha3/sha3.c:447:9: warning: implicit conversion 'size_t' (aka 'unsigned long') -> 'bool' [readability-implicit-bool-conversion]
  447 |         while (n--) {
      |                ^  
      |                (  ) != 0u
sha3/sha3.c:449:15: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  449 |                 *p++ = t >> 24;
      |                             ^
sha3/sha3.c:554:16: warning: variable name 'd0' is too short, expected at least 3 characters [readability-identifier-length]
  554 |         const uint8_t d0[] = {
      |                       ^
sha3/sha3.c:565:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  565 |         uint8_t m[1024], d[73];
      |         ^~~~~~~~~~~~~~~~~~~~~~~
sha3/sha3.c:565:10: warning: variable name 'm' is too short, expected at least 3 characters [readability-identifier-length]
  565 |         uint8_t m[1024], d[73];
      |                 ^
sha3/sha3.c:565:12: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  565 |         uint8_t m[1024], d[73];
      |                   ^
sha3/sha3.c:565:19: warning: variable name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  565 |         uint8_t m[1024], d[73];
      |                          ^
sha3/sha3.c:565:21: warning: 73 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  565 |         uint8_t m[1024], d[73];
      |                            ^
sha3/sha3.c:573:11: warning: variable name 'mi' is too short, expected at least 3 characters [readability-identifier-length]
  573 |         unsigned mi;
      |                  ^
sha3/sha3.c:582:24: warning: 28 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  582 |         if (memcmp(d, d224_0, 28) != 0)
      |                               ^
sha3/sha3.c:582:33: warning: statement should be inside braces [readability-braces-around-statements]
  582 |         if (memcmp(d, d224_0, 28) != 0)
      |                                        ^
      |                                         {
  583 |                 return -1;
      |                           
sha3/sha3.c:586:24: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  586 |         if (memcmp(d, d256_0, 32) != 0)
      |                               ^
sha3/sha3.c:586:33: warning: statement should be inside braces [readability-braces-around-statements]
  586 |         if (memcmp(d, d256_0, 32) != 0)
      |                                        ^
      |                                         {
  587 |                 return -1;
      |                           
sha3/sha3.c:590:24: warning: 48 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  590 |         if (memcmp(d, d384_0, 48) != 0)
      |                               ^
sha3/sha3.c:590:33: warning: statement should be inside braces [readability-braces-around-statements]
  590 |         if (memcmp(d, d384_0, 48) != 0)
      |                                        ^
      |                                         {
  591 |                 return -1;
      |                           
sha3/sha3.c:594:24: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  594 |         if (memcmp(d, d512_0, 64) != 0)
      |                               ^
sha3/sha3.c:594:33: warning: statement should be inside braces [readability-braces-around-statements]
  594 |         if (memcmp(d, d512_0, 64) != 0)
      |                                        ^
      |                                         {
  595 |                 return -1;
      |                           
sha3/sha3.c:597:20: warning: 41 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  597 |         SHAKE128_Final(d, 41, &shake128);
      |                           ^
sha3/sha3.c:598:31: warning: 41 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  598 |         if (memcmp(d, shake128_0_41, 41) != 0)
      |                                      ^
sha3/sha3.c:598:40: warning: statement should be inside braces [readability-braces-around-statements]
  598 |         if (memcmp(d, shake128_0_41, 41) != 0)
      |                                               ^
      |                                                {
  599 |                 return -1;
      |                           
sha3/sha3.c:601:20: warning: 73 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  601 |         SHAKE256_Final(d, 73, &shake256);
      |                           ^
sha3/sha3.c:602:31: warning: 73 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  602 |         if (memcmp(d, shake256_0_73, 73) != 0)
      |                                      ^
sha3/sha3.c:602:40: warning: statement should be inside braces [readability-braces-around-statements]
  602 |         if (memcmp(d, shake256_0_73, 73) != 0)
      |                                               ^
      |                                                {
  603 |                 return -1;
      |                           
sha3/sha3.c:605:18: warning: 0xa3 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  605 |         (void)memset(m, 0xa3, 200);
      |                         ^
sha3/sha3.c:605:24: warning: 200 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  605 |         (void)memset(m, 0xa3, 200);
      |                               ^
sha3/sha3.c:607:31: warning: 200 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  607 |         SHA3_224_Update(&sha3224, m, 200);
      |                                      ^
sha3/sha3.c:609:27: warning: 28 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  609 |         if (memcmp(d, d224_1600, 28) != 0)
      |                                  ^
sha3/sha3.c:609:36: warning: statement should be inside braces [readability-braces-around-statements]
  609 |         if (memcmp(d, d224_1600, 28) != 0)
      |                                           ^
      |                                            {
  610 |                 return -1;
      |                           
sha3/sha3.c:612:31: warning: 200 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  612 |         SHA3_256_Update(&sha3256, m, 200);
      |                                      ^
sha3/sha3.c:614:27: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  614 |         if (memcmp(d, d256_1600, 32) != 0)
      |                                  ^
sha3/sha3.c:614:36: warning: statement should be inside braces [readability-braces-around-statements]
  614 |         if (memcmp(d, d256_1600, 32) != 0)
      |                                           ^
      |                                            {
  615 |                 return -1;
      |                           
sha3/sha3.c:617:31: warning: 200 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  617 |         SHA3_384_Update(&sha3384, m, 200);
      |                                      ^
sha3/sha3.c:619:27: warning: 48 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  619 |         if (memcmp(d, d384_1600, 48) != 0)
      |                                  ^
sha3/sha3.c:619:36: warning: statement should be inside braces [readability-braces-around-statements]
  619 |         if (memcmp(d, d384_1600, 48) != 0)
      |                                           ^
      |                                            {
  620 |                 return -1;
      |                           
sha3/sha3.c:622:31: warning: 200 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  622 |         SHA3_512_Update(&sha3512, m, 200);
      |                                      ^
sha3/sha3.c:624:27: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  624 |         if (memcmp(d, d512_1600, 64) != 0)
      |                                  ^
sha3/sha3.c:624:36: warning: statement should be inside braces [readability-braces-around-statements]
  624 |         if (memcmp(d, d512_1600, 64) != 0)
      |                                           ^
      |                                            {
  625 |                 return -1;
      |                           
sha3/sha3.c:627:32: warning: 200 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  627 |         SHAKE128_Update(&shake128, m, 200);
      |                                       ^
sha3/sha3.c:628:20: warning: 41 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  628 |         SHAKE128_Final(d, 41, &shake128);
      |                           ^
sha3/sha3.c:629:34: warning: 41 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  629 |         if (memcmp(d, shake128_1600_41, 41) != 0)
      |                                         ^
sha3/sha3.c:629:43: warning: statement should be inside braces [readability-braces-around-statements]
  629 |         if (memcmp(d, shake128_1600_41, 41) != 0)
      |                                                  ^
      |                                                   {
  630 |                 return -1;
      |                           
sha3/sha3.c:632:32: warning: 200 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  632 |         SHAKE256_Update(&shake256, m, 200);
      |                                       ^
sha3/sha3.c:633:20: warning: 73 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  633 |         SHAKE256_Final(d, 73, &shake256);
      |                           ^
sha3/sha3.c:634:34: warning: 73 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  634 |         if (memcmp(d, shake256_1600_73, 73) != 0)
      |                                         ^
sha3/sha3.c:634:43: warning: statement should be inside braces [readability-braces-around-statements]
  634 |         if (memcmp(d, shake256_1600_73, 73) != 0)
      |                                                  ^
      |                                                   {
  635 |                 return -1;
      |                           
sha3/sha3.c:641:20: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  641 |         for (mi = 0; mi < 6; mi++) {
      |                           ^
sha3/sha3.c:642:36: warning: 224 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  642 |                 sha3_selftest_prng(m, mlen[mi], (224/8)*mlen[mi]);
      |                                                  ^
sha3/sha3.c:642:40: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  642 |                 sha3_selftest_prng(m, mlen[mi], (224/8)*mlen[mi]);
      |                                                      ^
sha3/sha3.c:646:28: warning: 224 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  646 |                 SHA3_512_Update(&ctx, d, 224/8);
      |                                          ^
sha3/sha3.c:646:32: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  646 |                 SHA3_512_Update(&ctx, d, 224/8);
      |                                              ^
sha3/sha3.c:648:20: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  648 |         for (mi = 0; mi < 6; mi++) {
      |                           ^
sha3/sha3.c:649:36: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  649 |                 sha3_selftest_prng(m, mlen[mi], (256/8)*mlen[mi]);
      |                                                  ^
sha3/sha3.c:649:40: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  649 |                 sha3_selftest_prng(m, mlen[mi], (256/8)*mlen[mi]);
      |                                                      ^
sha3/sha3.c:653:28: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  653 |                 SHA3_512_Update(&ctx, d, 256/8);
      |                                          ^
sha3/sha3.c:653:32: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  653 |                 SHA3_512_Update(&ctx, d, 256/8);
      |                                              ^
sha3/sha3.c:655:20: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  655 |         for (mi = 0; mi < 6; mi++) {
      |                           ^
sha3/sha3.c:656:36: warning: 384 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  656 |                 sha3_selftest_prng(m, mlen[mi], (384/8)*mlen[mi]);
      |                                                  ^
sha3/sha3.c:656:40: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  656 |                 sha3_selftest_prng(m, mlen[mi], (384/8)*mlen[mi]);
      |                                                      ^
sha3/sha3.c:660:28: warning: 384 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  660 |                 SHA3_512_Update(&ctx, d, 384/8);
      |                                          ^
sha3/sha3.c:660:32: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  660 |                 SHA3_512_Update(&ctx, d, 384/8);
      |                                              ^
sha3/sha3.c:662:20: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  662 |         for (mi = 0; mi < 6; mi++) {
      |                           ^
sha3/sha3.c:663:36: warning: 512 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  663 |                 sha3_selftest_prng(m, mlen[mi], (512/8)*mlen[mi]);
      |                                                  ^
sha3/sha3.c:663:40: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  663 |                 sha3_selftest_prng(m, mlen[mi], (512/8)*mlen[mi]);
      |                                                      ^
sha3/sha3.c:667:28: warning: 512 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  667 |                 SHA3_512_Update(&ctx, d, 512/8);
      |                                          ^
sha3/sha3.c:667:32: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  667 |                 SHA3_512_Update(&ctx, d, 512/8);
      |                                              ^
sha3/sha3.c:670:20: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  670 |         if (memcmp(d, d0, 64) != 0)
      |                           ^
sha3/sha3.c:670:29: warning: statement should be inside braces [readability-braces-around-statements]
  670 |         if (memcmp(d, d0, 64) != 0)
      |                                    ^
      |                                     {
  671 |                 return -1;
      |                           
273 warnings generated.
Suppressed 27 warnings (26 in non-user code, 1 with check filters).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/secp256k1/IntGroup.cpp
567 warnings generated.
Suppressed 567 warnings (567 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/hash/ripemd160_sse.cpp
hash/ripemd160_sse.cpp:30:7: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   30 |       0x67452301ul,0x67452301ul,0x67452301ul,0x67452301ul,
      |       ^         ~~
      |                 UL
hash/ripemd160_sse.cpp:30:20: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   30 |       0x67452301ul,0x67452301ul,0x67452301ul,0x67452301ul,
      |                    ^         ~~
      |                              UL
hash/ripemd160_sse.cpp:30:33: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   30 |       0x67452301ul,0x67452301ul,0x67452301ul,0x67452301ul,
      |                                 ^         ~~
      |                                           UL
hash/ripemd160_sse.cpp:30:46: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   30 |       0x67452301ul,0x67452301ul,0x67452301ul,0x67452301ul,
      |                                              ^         ~~
      |                                                        UL
hash/ripemd160_sse.cpp:31:7: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   31 |       0xEFCDAB89ul,0xEFCDAB89ul,0xEFCDAB89ul,0xEFCDAB89ul,
      |       ^         ~~
      |                 UL
hash/ripemd160_sse.cpp:31:20: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   31 |       0xEFCDAB89ul,0xEFCDAB89ul,0xEFCDAB89ul,0xEFCDAB89ul,
      |                    ^         ~~
      |                              UL
hash/ripemd160_sse.cpp:31:33: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   31 |       0xEFCDAB89ul,0xEFCDAB89ul,0xEFCDAB89ul,0xEFCDAB89ul,
      |                                 ^         ~~
      |                                           UL
hash/ripemd160_sse.cpp:31:46: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   31 |       0xEFCDAB89ul,0xEFCDAB89ul,0xEFCDAB89ul,0xEFCDAB89ul,
      |                                              ^         ~~
      |                                                        UL
hash/ripemd160_sse.cpp:32:7: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   32 |       0x98BADCFEul,0x98BADCFEul,0x98BADCFEul,0x98BADCFEul,
      |       ^         ~~
      |                 UL
hash/ripemd160_sse.cpp:32:20: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   32 |       0x98BADCFEul,0x98BADCFEul,0x98BADCFEul,0x98BADCFEul,
      |                    ^         ~~
      |                              UL
hash/ripemd160_sse.cpp:32:33: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   32 |       0x98BADCFEul,0x98BADCFEul,0x98BADCFEul,0x98BADCFEul,
      |                                 ^         ~~
      |                                           UL
hash/ripemd160_sse.cpp:32:46: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   32 |       0x98BADCFEul,0x98BADCFEul,0x98BADCFEul,0x98BADCFEul,
      |                                              ^         ~~
      |                                                        UL
hash/ripemd160_sse.cpp:33:7: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   33 |       0x10325476ul,0x10325476ul,0x10325476ul,0x10325476ul,
      |       ^         ~~
      |                 UL
hash/ripemd160_sse.cpp:33:20: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   33 |       0x10325476ul,0x10325476ul,0x10325476ul,0x10325476ul,
      |                    ^         ~~
      |                              UL
hash/ripemd160_sse.cpp:33:33: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   33 |       0x10325476ul,0x10325476ul,0x10325476ul,0x10325476ul,
      |                                 ^         ~~
      |                                           UL
hash/ripemd160_sse.cpp:33:46: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   33 |       0x10325476ul,0x10325476ul,0x10325476ul,0x10325476ul,
      |                                              ^         ~~
      |                                                        UL
hash/ripemd160_sse.cpp:34:7: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   34 |       0xC3D2E1F0ul,0xC3D2E1F0ul,0xC3D2E1F0ul,0xC3D2E1F0ul
      |       ^         ~~
      |                 UL
hash/ripemd160_sse.cpp:34:20: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   34 |       0xC3D2E1F0ul,0xC3D2E1F0ul,0xC3D2E1F0ul,0xC3D2E1F0ul
      |                    ^         ~~
      |                              UL
hash/ripemd160_sse.cpp:34:33: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   34 |       0xC3D2E1F0ul,0xC3D2E1F0ul,0xC3D2E1F0ul,0xC3D2E1F0ul
      |                                 ^         ~~
      |                                           UL
hash/ripemd160_sse.cpp:34:46: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   34 |       0xC3D2E1F0ul,0xC3D2E1F0ul,0xC3D2E1F0ul,0xC3D2E1F0ul
      |                                              ^         ~~
      |                                                        UL
hash/ripemd160_sse.cpp:74:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   74 | #define R21(a,b,c,d,e,x,r) Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160_sse.cpp:75:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   75 | #define R31(a,b,c,d,e,x,r) Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160_sse.cpp:76:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   76 | #define R41(a,b,c,d,e,x,r) Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160_sse.cpp:77:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   77 | #define R51(a,b,c,d,e,x,r) Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160_sse.cpp:78:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   78 | #define R12(a,b,c,d,e,x,r) Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160_sse.cpp:79:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   79 | #define R22(a,b,c,d,e,x,r) Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160_sse.cpp:80:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   80 | #define R32(a,b,c,d,e,x,r) Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160_sse.cpp:81:65: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   81 | #define R42(a,b,c,d,e,x,r) Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r)
      |                                                                 ^         ~~
      |                                                                           UL
hash/ripemd160_sse.cpp:87:28: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
   87 |   void Initialize(__m128i *s) {
      |                            ^
hash/ripemd160_sse.cpp:92:27: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
   92 |   void Transform(__m128i *s, uint8_t *blk[4]) {
      |                           ^
hash/ripemd160_sse.cpp:94:13: warning: variable name 'a1' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     __m128i a1 = _mm_load_si128(s + 0);
      |             ^
hash/ripemd160_sse.cpp:95:13: warning: variable name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
   95 |     __m128i b1 = _mm_load_si128(s + 1);
      |             ^
hash/ripemd160_sse.cpp:96:13: warning: variable name 'c1' is too short, expected at least 3 characters [readability-identifier-length]
   96 |     __m128i c1 = _mm_load_si128(s + 2);
      |             ^
hash/ripemd160_sse.cpp:97:13: warning: variable name 'd1' is too short, expected at least 3 characters [readability-identifier-length]
   97 |     __m128i d1 = _mm_load_si128(s + 3);
      |             ^
hash/ripemd160_sse.cpp:98:13: warning: variable name 'e1' is too short, expected at least 3 characters [readability-identifier-length]
   98 |     __m128i e1 = _mm_load_si128(s + 4);
      |             ^
hash/ripemd160_sse.cpp:99:13: warning: variable name 'a2' is too short, expected at least 3 characters [readability-identifier-length]
   99 |     __m128i a2 = a1;
      |             ^
hash/ripemd160_sse.cpp:100:13: warning: variable name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
  100 |     __m128i b2 = b1;
      |             ^
hash/ripemd160_sse.cpp:101:13: warning: variable name 'c2' is too short, expected at least 3 characters [readability-identifier-length]
  101 |     __m128i c2 = c1;
      |             ^
hash/ripemd160_sse.cpp:102:13: warning: variable name 'd2' is too short, expected at least 3 characters [readability-identifier-length]
  102 |     __m128i d2 = d1;
      |             ^
hash/ripemd160_sse.cpp:103:13: warning: variable name 'e2' is too short, expected at least 3 characters [readability-identifier-length]
  103 |     __m128i e2 = e1;
      |             ^
hash/ripemd160_sse.cpp:104:13: warning: variable name 'u' is too short, expected at least 3 characters [readability-identifier-length]
  104 |     __m128i u;
      |             ^
hash/ripemd160_sse.cpp:105:13: warning: variable name 'w' is too short, expected at least 3 characters [readability-identifier-length]
  105 |     __m128i w[16];
      |             ^
hash/ripemd160_sse.cpp:105:15: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  105 |     __m128i w[16];
      |               ^
hash/ripemd160_sse.cpp:113:7: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  113 |     w[5] = LOADW(5);
      |       ^
hash/ripemd160_sse.cpp:114:7: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  114 |     w[6] = LOADW(6);
      |       ^
hash/ripemd160_sse.cpp:115:7: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  115 |     w[7] = LOADW(7);
      |       ^
hash/ripemd160_sse.cpp:116:7: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  116 |     w[8] = LOADW(8);
      |       ^
hash/ripemd160_sse.cpp:117:7: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  117 |     w[9] = LOADW(9);
      |       ^
hash/ripemd160_sse.cpp:118:7: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  118 |     w[10] = LOADW(10);
      |       ^
hash/ripemd160_sse.cpp:119:7: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  119 |     w[11] = LOADW(11);
      |       ^
hash/ripemd160_sse.cpp:120:7: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  120 |     w[12] = LOADW(12);
      |       ^
hash/ripemd160_sse.cpp:121:7: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  121 |     w[13] = LOADW(13);
      |       ^
hash/ripemd160_sse.cpp:122:7: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  122 |     w[14] = LOADW(14);
      |       ^
hash/ripemd160_sse.cpp:123:7: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  123 |     w[15] = LOADW(15);
      |       ^
hash/ripemd160_sse.cpp:290:13: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  290 |     __m128i t = s[0];
      |             ^
hash/ripemd160_sse.cpp:324:18: warning: parameter name 'i0' is too short, expected at least 3 characters [readability-identifier-length]
  324 |   unsigned char *i0,
      |                  ^
hash/ripemd160_sse.cpp:325:18: warning: parameter name 'i1' is too short, expected at least 3 characters [readability-identifier-length]
  325 |   unsigned char *i1,
      |                  ^
hash/ripemd160_sse.cpp:326:18: warning: parameter name 'i2' is too short, expected at least 3 characters [readability-identifier-length]
  326 |   unsigned char *i2,
      |                  ^
hash/ripemd160_sse.cpp:327:18: warning: parameter name 'i3' is too short, expected at least 3 characters [readability-identifier-length]
  327 |   unsigned char *i3,
      |                  ^
hash/ripemd160_sse.cpp:328:18: warning: parameter name 'd0' is too short, expected at least 3 characters [readability-identifier-length]
  328 |   unsigned char *d0,
      |                  ^
hash/ripemd160_sse.cpp:329:18: warning: parameter name 'd1' is too short, expected at least 3 characters [readability-identifier-length]
  329 |   unsigned char *d1,
      |                  ^
hash/ripemd160_sse.cpp:330:18: warning: parameter name 'd2' is too short, expected at least 3 characters [readability-identifier-length]
  330 |   unsigned char *d2,
      |                  ^
hash/ripemd160_sse.cpp:331:18: warning: parameter name 'd3' is too short, expected at least 3 characters [readability-identifier-length]
  331 |   unsigned char *d3) {
      |                  ^
hash/ripemd160_sse.cpp:333:11: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  333 |   __m128i s[5];
      |           ^
hash/ripemd160_sse.cpp:333:13: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  333 |   __m128i s[5];
      |             ^
hash/ripemd160_sse.cpp:334:12: warning: variable name 'bs' is too short, expected at least 3 characters [readability-identifier-length]
  334 |   uint8_t *bs[] = { i0,i1,i2,i3 };
      |            ^
hash/ripemd160_sse.cpp:337:15: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  337 |   memcpy(i0 + 32, pad, 24);
      |               ^
hash/ripemd160_sse.cpp:337:24: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  337 |   memcpy(i0 + 32, pad, 24);
      |                        ^
hash/ripemd160_sse.cpp:338:15: warning: 56 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  338 |   memcpy(i0 + 56, &sizedesc_32, 8);
      |               ^
hash/ripemd160_sse.cpp:338:33: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  338 |   memcpy(i0 + 56, &sizedesc_32, 8);
      |                                 ^
hash/ripemd160_sse.cpp:339:15: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  339 |   memcpy(i1 + 32, pad, 24);
      |               ^
hash/ripemd160_sse.cpp:339:24: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  339 |   memcpy(i1 + 32, pad, 24);
      |                        ^
hash/ripemd160_sse.cpp:340:15: warning: 56 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  340 |   memcpy(i1 + 56, &sizedesc_32, 8);
      |               ^
hash/ripemd160_sse.cpp:340:33: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  340 |   memcpy(i1 + 56, &sizedesc_32, 8);
      |                                 ^
hash/ripemd160_sse.cpp:341:15: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  341 |   memcpy(i2 + 32, pad, 24);
      |               ^
hash/ripemd160_sse.cpp:341:24: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  341 |   memcpy(i2 + 32, pad, 24);
      |                        ^
hash/ripemd160_sse.cpp:342:15: warning: 56 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  342 |   memcpy(i2 + 56, &sizedesc_32, 8);
      |               ^
hash/ripemd160_sse.cpp:342:33: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  342 |   memcpy(i2 + 56, &sizedesc_32, 8);
      |                                 ^
hash/ripemd160_sse.cpp:343:15: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  343 |   memcpy(i3 + 32, pad, 24);
      |               ^
hash/ripemd160_sse.cpp:343:24: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  343 |   memcpy(i3 + 32, pad, 24);
      |                        ^
hash/ripemd160_sse.cpp:344:15: warning: 56 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  344 |   memcpy(i3 + 56, &sizedesc_32, 8);
      |               ^
hash/ripemd160_sse.cpp:344:33: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  344 |   memcpy(i3 + 56, &sizedesc_32, 8);
      |                                 ^
hash/ripemd160_sse.cpp:349:13: warning: variable name 's0' is too short, expected at least 3 characters [readability-identifier-length]
  349 |   uint32_t *s0 = (uint32_t *)&s[0];
      |             ^
hash/ripemd160_sse.cpp:350:13: warning: variable name 's1' is too short, expected at least 3 characters [readability-identifier-length]
  350 |   uint32_t *s1 = (uint32_t *)&s[1];
      |             ^
hash/ripemd160_sse.cpp:351:13: warning: variable name 's2' is too short, expected at least 3 characters [readability-identifier-length]
  351 |   uint32_t *s2 = (uint32_t *)&s[2];
      |             ^
hash/ripemd160_sse.cpp:352:13: warning: variable name 's3' is too short, expected at least 3 characters [readability-identifier-length]
  352 |   uint32_t *s3 = (uint32_t *)&s[3];
      |             ^
hash/ripemd160_sse.cpp:353:13: warning: variable name 's4' is too short, expected at least 3 characters [readability-identifier-length]
  353 |   uint32_t *s4 = (uint32_t *)&s[4];
      |             ^
hash/ripemd160_sse.cpp:365:17: warning: variable name 'h0' is too short, expected at least 3 characters [readability-identifier-length]
  365 |   unsigned char h0[20];
      |                 ^
hash/ripemd160_sse.cpp:365:20: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  365 |   unsigned char h0[20];
      |                    ^
hash/ripemd160_sse.cpp:366:17: warning: variable name 'h1' is too short, expected at least 3 characters [readability-identifier-length]
  366 |   unsigned char h1[20];
      |                 ^
hash/ripemd160_sse.cpp:366:20: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  366 |   unsigned char h1[20];
      |                    ^
hash/ripemd160_sse.cpp:367:17: warning: variable name 'h2' is too short, expected at least 3 characters [readability-identifier-length]
  367 |   unsigned char h2[20];
      |                 ^
hash/ripemd160_sse.cpp:367:20: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  367 |   unsigned char h2[20];
      |                    ^
hash/ripemd160_sse.cpp:368:17: warning: variable name 'h3' is too short, expected at least 3 characters [readability-identifier-length]
  368 |   unsigned char h3[20];
      |                 ^
hash/ripemd160_sse.cpp:368:20: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  368 |   unsigned char h3[20];
      |                    ^
hash/ripemd160_sse.cpp:369:21: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  369 |   unsigned char ch0[20];
      |                     ^
hash/ripemd160_sse.cpp:370:21: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  370 |   unsigned char ch1[20];
      |                     ^
hash/ripemd160_sse.cpp:371:21: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  371 |   unsigned char ch2[20];
      |                     ^
hash/ripemd160_sse.cpp:372:21: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  372 |   unsigned char ch3[20];
      |                     ^
hash/ripemd160_sse.cpp:373:17: warning: variable name 'm0' is too short, expected at least 3 characters [readability-identifier-length]
  373 |   unsigned char m0[64];
      |                 ^
hash/ripemd160_sse.cpp:373:20: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  373 |   unsigned char m0[64];
      |                    ^
hash/ripemd160_sse.cpp:374:17: warning: variable name 'm1' is too short, expected at least 3 characters [readability-identifier-length]
  374 |   unsigned char m1[64];
      |                 ^
hash/ripemd160_sse.cpp:374:20: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  374 |   unsigned char m1[64];
      |                    ^
hash/ripemd160_sse.cpp:375:17: warning: variable name 'm2' is too short, expected at least 3 characters [readability-identifier-length]
  375 |   unsigned char m2[64];
      |                 ^
hash/ripemd160_sse.cpp:375:20: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  375 |   unsigned char m2[64];
      |                    ^
hash/ripemd160_sse.cpp:376:17: warning: variable name 'm3' is too short, expected at least 3 characters [readability-identifier-length]
  376 |   unsigned char m3[64];
      |                 ^
hash/ripemd160_sse.cpp:376:20: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  376 |   unsigned char m3[64];
      |                    ^
4260 warnings generated.
Suppressed 4013 warnings (4013 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/hash/sha256.cpp
hash/sha256.cpp:37:32: warning: parameter name 'x' is too short, expected at least 3 characters [readability-identifier-length]
   37 | inline uint32_t _rotr(uint32_t x, uint8_t r) {
      |                                ^
hash/sha256.cpp:37:43: warning: parameter name 'r' is too short, expected at least 3 characters [readability-identifier-length]
   37 | inline uint32_t _rotr(uint32_t x, uint8_t r) {
      |                                           ^
hash/sha256.cpp:74:29: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
   74 |   void Initialize(uint32_t *s) {
      |                             ^
hash/sha256.cpp:76:12: warning: 0x6a09e667ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   76 |     s[0] = 0x6a09e667ul;
      |            ^
hash/sha256.cpp:76:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   76 |     s[0] = 0x6a09e667ul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:77:12: warning: 0xbb67ae85ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   77 |     s[1] = 0xbb67ae85ul;
      |            ^
hash/sha256.cpp:77:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   77 |     s[1] = 0xbb67ae85ul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:78:12: warning: 0x3c6ef372ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   78 |     s[2] = 0x3c6ef372ul;
      |            ^
hash/sha256.cpp:78:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   78 |     s[2] = 0x3c6ef372ul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:79:12: warning: 0xa54ff53aul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   79 |     s[3] = 0xa54ff53aul;
      |            ^
hash/sha256.cpp:79:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   79 |     s[3] = 0xa54ff53aul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:80:12: warning: 0x510e527ful is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   80 |     s[4] = 0x510e527ful;
      |            ^
hash/sha256.cpp:80:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   80 |     s[4] = 0x510e527ful;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:81:7: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   81 |     s[5] = 0x9b05688cul;
      |       ^
hash/sha256.cpp:81:12: warning: 0x9b05688cul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   81 |     s[5] = 0x9b05688cul;
      |            ^
hash/sha256.cpp:81:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   81 |     s[5] = 0x9b05688cul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:82:7: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   82 |     s[6] = 0x1f83d9abul;
      |       ^
hash/sha256.cpp:82:12: warning: 0x1f83d9abul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   82 |     s[6] = 0x1f83d9abul;
      |            ^
hash/sha256.cpp:82:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   82 |     s[6] = 0x1f83d9abul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:83:7: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   83 |     s[7] = 0x5be0cd19ul;
      |       ^
hash/sha256.cpp:83:12: warning: 0x5be0cd19ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   83 |     s[7] = 0x5be0cd19ul;
      |            ^
hash/sha256.cpp:83:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
   83 |     s[7] = 0x5be0cd19ul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:89:28: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
   89 |   void Transform(uint32_t* s, const unsigned char* chunk)
      |                            ^
hash/sha256.cpp:91:14: warning: variable name 't1' is too short, expected at least 3 characters [readability-identifier-length]
   91 |     uint32_t t1;
      |              ^
hash/sha256.cpp:92:14: warning: variable name 't2' is too short, expected at least 3 characters [readability-identifier-length]
   92 |     uint32_t t2;
      |              ^
hash/sha256.cpp:93:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash/sha256.cpp:93:14: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |              ^
hash/sha256.cpp:93:24: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |                        ^
hash/sha256.cpp:93:34: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |                                  ^
hash/sha256.cpp:93:44: warning: variable name 'd' is too short, expected at least 3 characters [readability-identifier-length]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |                                            ^
hash/sha256.cpp:93:54: warning: variable name 'e' is too short, expected at least 3 characters [readability-identifier-length]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |                                                      ^
hash/sha256.cpp:93:64: warning: variable name 'f' is too short, expected at least 3 characters [readability-identifier-length]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |                                                                ^
hash/sha256.cpp:93:70: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |                                                                      ^
hash/sha256.cpp:93:74: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |                                                                          ^
hash/sha256.cpp:93:80: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |                                                                                ^
hash/sha256.cpp:93:84: warning: variable name 'h' is too short, expected at least 3 characters [readability-identifier-length]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |                                                                                    ^
hash/sha256.cpp:93:90: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   93 |     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];
      |                                                                                          ^
hash/sha256.cpp:94:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash/sha256.cpp:94:14: warning: variable name 'w0' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |              ^
hash/sha256.cpp:94:18: warning: variable name 'w1' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                  ^
hash/sha256.cpp:94:22: warning: variable name 'w2' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                      ^
hash/sha256.cpp:94:26: warning: variable name 'w3' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                          ^
hash/sha256.cpp:94:30: warning: variable name 'w4' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                              ^
hash/sha256.cpp:94:34: warning: variable name 'w5' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                                  ^
hash/sha256.cpp:94:38: warning: variable name 'w6' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                                      ^
hash/sha256.cpp:94:42: warning: variable name 'w7' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                                          ^
hash/sha256.cpp:94:46: warning: variable name 'w8' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                                              ^
hash/sha256.cpp:94:50: warning: variable name 'w9' is too short, expected at least 3 characters [readability-identifier-length]
   94 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                                                  ^
hash/sha256.cpp:169:7: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  169 |     s[5] += f;
      |       ^
hash/sha256.cpp:170:7: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  170 |     s[6] += g;
      |       ^
hash/sha256.cpp:171:7: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  171 |     s[7] += h;
      |       ^
hash/sha256.cpp:176:29: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
  176 |   void Transform2(uint32_t* s, const unsigned char* chunk) {
      |                             ^
hash/sha256.cpp:178:14: warning: variable name 't1' is too short, expected at least 3 characters [readability-identifier-length]
  178 |     uint32_t t1;
      |              ^
hash/sha256.cpp:179:14: warning: variable name 't2' is too short, expected at least 3 characters [readability-identifier-length]
  179 |     uint32_t t2;
      |              ^
hash/sha256.cpp:180:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash/sha256.cpp:180:14: warning: variable name 'w0' is too short, expected at least 3 characters [readability-identifier-length]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |              ^
hash/sha256.cpp:180:18: warning: variable name 'w1' is too short, expected at least 3 characters [readability-identifier-length]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                  ^
hash/sha256.cpp:180:22: warning: variable name 'w2' is too short, expected at least 3 characters [readability-identifier-length]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                      ^
hash/sha256.cpp:180:26: warning: variable name 'w3' is too short, expected at least 3 characters [readability-identifier-length]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                          ^
hash/sha256.cpp:180:30: warning: variable name 'w4' is too short, expected at least 3 characters [readability-identifier-length]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                              ^
hash/sha256.cpp:180:34: warning: variable name 'w5' is too short, expected at least 3 characters [readability-identifier-length]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                                  ^
hash/sha256.cpp:180:38: warning: variable name 'w6' is too short, expected at least 3 characters [readability-identifier-length]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                                      ^
hash/sha256.cpp:180:42: warning: variable name 'w7' is too short, expected at least 3 characters [readability-identifier-length]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                                          ^
hash/sha256.cpp:180:46: warning: variable name 'w8' is too short, expected at least 3 characters [readability-identifier-length]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                                              ^
hash/sha256.cpp:180:50: warning: variable name 'w9' is too short, expected at least 3 characters [readability-identifier-length]
  180 |     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;
      |                                                  ^
hash/sha256.cpp:182:14: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  182 |     uint32_t a = 0x6a09e667ul;
      |              ^
hash/sha256.cpp:182:18: warning: 0x6a09e667ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  182 |     uint32_t a = 0x6a09e667ul;
      |                  ^
hash/sha256.cpp:182:18: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  182 |     uint32_t a = 0x6a09e667ul;
      |                  ^         ~~
      |                            UL
hash/sha256.cpp:183:14: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  183 |     uint32_t b = 0xbb67ae85ul;
      |              ^
hash/sha256.cpp:183:18: warning: 0xbb67ae85ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  183 |     uint32_t b = 0xbb67ae85ul;
      |                  ^
hash/sha256.cpp:183:18: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  183 |     uint32_t b = 0xbb67ae85ul;
      |                  ^         ~~
      |                            UL
hash/sha256.cpp:184:14: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  184 |     uint32_t c = 0x3c6ef372ul;
      |              ^
hash/sha256.cpp:184:18: warning: 0x3c6ef372ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  184 |     uint32_t c = 0x3c6ef372ul;
      |                  ^
hash/sha256.cpp:184:18: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  184 |     uint32_t c = 0x3c6ef372ul;
      |                  ^         ~~
      |                            UL
hash/sha256.cpp:185:14: warning: variable name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  185 |     uint32_t d = 0xa54ff53aul;
      |              ^
hash/sha256.cpp:185:18: warning: 0xa54ff53aul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  185 |     uint32_t d = 0xa54ff53aul;
      |                  ^
hash/sha256.cpp:185:18: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  185 |     uint32_t d = 0xa54ff53aul;
      |                  ^         ~~
      |                            UL
hash/sha256.cpp:186:14: warning: variable name 'e' is too short, expected at least 3 characters [readability-identifier-length]
  186 |     uint32_t e = 0x510e527ful;
      |              ^
hash/sha256.cpp:186:18: warning: 0x510e527ful is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  186 |     uint32_t e = 0x510e527ful;
      |                  ^
hash/sha256.cpp:186:18: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  186 |     uint32_t e = 0x510e527ful;
      |                  ^         ~~
      |                            UL
hash/sha256.cpp:187:14: warning: variable name 'f' is too short, expected at least 3 characters [readability-identifier-length]
  187 |     uint32_t f = 0x9b05688cul;
      |              ^
hash/sha256.cpp:187:18: warning: 0x9b05688cul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  187 |     uint32_t f = 0x9b05688cul;
      |                  ^
hash/sha256.cpp:187:18: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  187 |     uint32_t f = 0x9b05688cul;
      |                  ^         ~~
      |                            UL
hash/sha256.cpp:188:14: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
  188 |     uint32_t g = 0x1f83d9abul;
      |              ^
hash/sha256.cpp:188:18: warning: 0x1f83d9abul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  188 |     uint32_t g = 0x1f83d9abul;
      |                  ^
hash/sha256.cpp:188:18: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  188 |     uint32_t g = 0x1f83d9abul;
      |                  ^         ~~
      |                            UL
hash/sha256.cpp:189:14: warning: variable name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  189 |     uint32_t h = 0x5be0cd19ul;
      |              ^
hash/sha256.cpp:189:18: warning: 0x5be0cd19ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  189 |     uint32_t h = 0x5be0cd19ul;
      |                  ^
hash/sha256.cpp:189:18: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  189 |     uint32_t h = 0x5be0cd19ul;
      |                  ^         ~~
      |                            UL
hash/sha256.cpp:259:10: warning: 0x6a09e667ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  259 |     w0 = 0x6a09e667ul + a;
      |          ^
hash/sha256.cpp:259:10: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  259 |     w0 = 0x6a09e667ul + a;
      |          ^         ~~
      |                    UL
hash/sha256.cpp:260:10: warning: 0xbb67ae85ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  260 |     w1 = 0xbb67ae85ul + b;
      |          ^
hash/sha256.cpp:260:10: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  260 |     w1 = 0xbb67ae85ul + b;
      |          ^         ~~
      |                    UL
hash/sha256.cpp:261:10: warning: 0x3c6ef372ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  261 |     w2 = 0x3c6ef372ul + c;
      |          ^
hash/sha256.cpp:261:10: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  261 |     w2 = 0x3c6ef372ul + c;
      |          ^         ~~
      |                    UL
hash/sha256.cpp:262:10: warning: 0xa54ff53aul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  262 |     w3 = 0xa54ff53aul + d;
      |          ^
hash/sha256.cpp:262:10: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  262 |     w3 = 0xa54ff53aul + d;
      |          ^         ~~
      |                    UL
hash/sha256.cpp:263:10: warning: 0x510e527ful is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  263 |     w4 = 0x510e527ful + e;
      |          ^
hash/sha256.cpp:263:10: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  263 |     w4 = 0x510e527ful + e;
      |          ^         ~~
      |                    UL
hash/sha256.cpp:264:10: warning: 0x9b05688cul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  264 |     w5 = 0x9b05688cul + f;
      |          ^
hash/sha256.cpp:264:10: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  264 |     w5 = 0x9b05688cul + f;
      |          ^         ~~
      |                    UL
hash/sha256.cpp:265:10: warning: 0x1f83d9abul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  265 |     w6 = 0x1f83d9abul + g;
      |          ^
hash/sha256.cpp:265:10: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  265 |     w6 = 0x1f83d9abul + g;
      |          ^         ~~
      |                    UL
hash/sha256.cpp:266:10: warning: 0x5be0cd19ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  266 |     w7 = 0x5be0cd19ul + h;
      |          ^
hash/sha256.cpp:266:10: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  266 |     w7 = 0x5be0cd19ul + h;
      |          ^         ~~
      |                    UL
hash/sha256.cpp:267:10: warning: 0x80000000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  267 |     w8 = 0x80000000;
      |          ^
hash/sha256.cpp:274:11: warning: 0x100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  274 |     w15 = 0x100;
      |           ^
hash/sha256.cpp:276:9: warning: 0x6a09e667ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  276 |     a = 0x6a09e667ul;
      |         ^
hash/sha256.cpp:276:9: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  276 |     a = 0x6a09e667ul;
      |         ^         ~~
      |                   UL
hash/sha256.cpp:277:9: warning: 0xbb67ae85ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  277 |     b = 0xbb67ae85ul;
      |         ^
hash/sha256.cpp:277:9: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  277 |     b = 0xbb67ae85ul;
      |         ^         ~~
      |                   UL
hash/sha256.cpp:278:9: warning: 0x3c6ef372ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  278 |     c = 0x3c6ef372ul;
      |         ^
hash/sha256.cpp:278:9: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  278 |     c = 0x3c6ef372ul;
      |         ^         ~~
      |                   UL
hash/sha256.cpp:279:9: warning: 0xa54ff53aul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  279 |     d = 0xa54ff53aul;
      |         ^
hash/sha256.cpp:279:9: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  279 |     d = 0xa54ff53aul;
      |         ^         ~~
      |                   UL
hash/sha256.cpp:280:9: warning: 0x510e527ful is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  280 |     e = 0x510e527ful;
      |         ^
hash/sha256.cpp:280:9: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  280 |     e = 0x510e527ful;
      |         ^         ~~
      |                   UL
hash/sha256.cpp:281:9: warning: 0x9b05688cul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  281 |     f = 0x9b05688cul;
      |         ^
hash/sha256.cpp:281:9: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  281 |     f = 0x9b05688cul;
      |         ^         ~~
      |                   UL
hash/sha256.cpp:282:9: warning: 0x1f83d9abul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  282 |     g = 0x1f83d9abul;
      |         ^
hash/sha256.cpp:282:9: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  282 |     g = 0x1f83d9abul;
      |         ^         ~~
      |                   UL
hash/sha256.cpp:283:9: warning: 0x5be0cd19ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  283 |     h = 0x5be0cd19ul;
      |         ^
hash/sha256.cpp:283:9: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  283 |     h = 0x5be0cd19ul;
      |         ^         ~~
      |                   UL
hash/sha256.cpp:353:12: warning: 0x6a09e667ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  353 |     s[0] = 0x6a09e667ul + a;
      |            ^
hash/sha256.cpp:353:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  353 |     s[0] = 0x6a09e667ul + a;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:365:16: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  365 |     uint32_t s[8];
      |                ^
hash/sha256.cpp:366:23: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  366 |     unsigned char buf[64];
      |                       ^
hash/sha256.cpp:380:12: warning: 0x6a09e667ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  380 |     s[0] = 0x6a09e667ul;
      |            ^
hash/sha256.cpp:380:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  380 |     s[0] = 0x6a09e667ul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:381:12: warning: 0xbb67ae85ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  381 |     s[1] = 0xbb67ae85ul;
      |            ^
hash/sha256.cpp:381:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  381 |     s[1] = 0xbb67ae85ul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:382:12: warning: 0x3c6ef372ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  382 |     s[2] = 0x3c6ef372ul;
      |            ^
hash/sha256.cpp:382:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  382 |     s[2] = 0x3c6ef372ul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:383:12: warning: 0xa54ff53aul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  383 |     s[3] = 0xa54ff53aul;
      |            ^
hash/sha256.cpp:383:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  383 |     s[3] = 0xa54ff53aul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:384:12: warning: 0x510e527ful is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  384 |     s[4] = 0x510e527ful;
      |            ^
hash/sha256.cpp:384:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  384 |     s[4] = 0x510e527ful;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:385:7: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  385 |     s[5] = 0x9b05688cul;
      |       ^
hash/sha256.cpp:385:12: warning: 0x9b05688cul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  385 |     s[5] = 0x9b05688cul;
      |            ^
hash/sha256.cpp:385:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  385 |     s[5] = 0x9b05688cul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:386:7: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  386 |     s[6] = 0x1f83d9abul;
      |       ^
hash/sha256.cpp:386:12: warning: 0x1f83d9abul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  386 |     s[6] = 0x1f83d9abul;
      |            ^
hash/sha256.cpp:386:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  386 |     s[6] = 0x1f83d9abul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:387:7: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  387 |     s[7] = 0x5be0cd19ul;
      |       ^
hash/sha256.cpp:387:12: warning: 0x5be0cd19ul is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  387 |     s[7] = 0x5be0cd19ul;
      |            ^
hash/sha256.cpp:387:12: warning: integer literal has suffix 'ul', which is not uppercase [readability-uppercase-literal-suffix]
  387 |     s[7] = 0x5be0cd19ul;
      |            ^         ~~
      |                      UL
hash/sha256.cpp:393:28: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  393 |   size_t bufsize = bytes % 64;
      |                            ^
hash/sha256.cpp:394:7: warning: implicit conversion 'size_t' (aka 'unsigned long') -> 'bool' [readability-implicit-bool-conversion]
  394 |   if (bufsize && bufsize + len >= 64) {
      |       ^
      |       (       != 0u)
hash/sha256.cpp:394:35: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  394 |   if (bufsize && bufsize + len >= 64) {
      |                                   ^
hash/sha256.cpp:396:33: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  396 |     memcpy(buf + bufsize, data, 64 - bufsize);
      |                                 ^
hash/sha256.cpp:397:14: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  397 |     bytes += 64 - bufsize;
      |              ^
hash/sha256.cpp:398:13: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  398 |     data += 64 - bufsize;
      |             ^
hash/sha256.cpp:402:24: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  402 |   while (end >= data + 64) {
      |                        ^
hash/sha256.cpp:405:14: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  405 |     bytes += 64;
      |              ^
hash/sha256.cpp:406:13: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  406 |     data += 64;
      |             ^
hash/sha256.cpp:417:28: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  417 |     unsigned char sizedesc[8];
      |                            ^
hash/sha256.cpp:419:31: warning: 119 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  419 |     Write(_sha256::pad, 1 + ((119 - (bytes % 64)) % 64));
      |                               ^
hash/sha256.cpp:419:46: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  419 |     Write(_sha256::pad, 1 + ((119 - (bytes % 64)) % 64));
      |                                              ^
hash/sha256.cpp:419:53: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  419 |     Write(_sha256::pad, 1 + ((119 - (bytes % 64)) % 64));
      |                                                     ^
hash/sha256.cpp:420:21: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  420 |     Write(sizedesc, 8);
      |                     ^
hash/sha256.cpp:445:12: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  445 |   uint32_t s[8];
      |            ^
hash/sha256.cpp:445:14: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  445 |   uint32_t s[8];
      |              ^
hash/sha256.cpp:448:18: warning: 33 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  448 |   memcpy(input + 33, _sha256::pad, 23);
      |                  ^
hash/sha256.cpp:448:36: warning: 23 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  448 |   memcpy(input + 33, _sha256::pad, 23);
      |                                    ^
hash/sha256.cpp:449:18: warning: 56 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  449 |   memcpy(input + 56, sizedesc_33, 8);
      |                  ^
hash/sha256.cpp:449:35: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  449 |   memcpy(input + 56, sizedesc_33, 8);
      |                                   ^
hash/sha256.cpp:466:12: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  466 |   uint32_t s[8];
      |            ^
hash/sha256.cpp:466:14: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  466 |   uint32_t s[8];
      |              ^
hash/sha256.cpp:468:18: warning: 65 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  468 |   memcpy(input + 65, _sha256::pad, 55);
      |                  ^
hash/sha256.cpp:468:36: warning: 55 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  468 |   memcpy(input + 65, _sha256::pad, 55);
      |                                    ^
hash/sha256.cpp:469:18: warning: 120 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  469 |   memcpy(input + 120, sizedesc_65, 8);
      |                  ^
hash/sha256.cpp:469:36: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  469 |   memcpy(input + 120, sizedesc_65, 8);
      |                                    ^
hash/sha256.cpp:473:31: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  473 |   _sha256::Transform(s, input+64);
      |                               ^
hash/sha256.cpp:488:12: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  488 |   uint32_t s[8];
      |            ^
hash/sha256.cpp:488:14: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  488 |   uint32_t s[8];
      |              ^
hash/sha256.cpp:489:11: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  489 |   uint8_t b[64];
      |           ^
hash/sha256.cpp:489:13: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  489 |   uint8_t b[64];
      |             ^
hash/sha256.cpp:491:36: warning: 56 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  491 |   memcpy(b + length, _sha256::pad, 56-length);
      |                                    ^
hash/sha256.cpp:500:16: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  500 |     char buf[2*32+1];
      |                ^
hash/sha256.cpp:501:11: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  501 |     buf[2*32] = 0;
      |           ^
hash/sha256.cpp:502:25: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  502 |     for (int i = 0; i < 32; i++)
      |                         ^
hash/sha256.cpp:502:33: warning: statement should be inside braces [readability-braces-around-statements]
  502 |     for (int i = 0; i < 32; i++)
      |                                 ^
      |                                  {
  503 |         sprintf(buf+i*2,"%02x",digest[i]);
      |                                           
hash/sha256.cpp:515:20: warning: 8192 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  515 |     uint8_t buffer[8192]; // Buffer to read file contents
      |                    ^
813 warnings generated.
Suppressed 630 warnings (629 in non-user code, 1 with check filters).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/gpu_backend.cpp
gpu_backend.cpp:28:18: warning: variable name 'tv' is too short, expected at least 3 characters [readability-identifier-length]
   28 |   struct timeval tv;
      |                  ^
gpu_backend.cpp:30:35: warning: 1000000.0 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   30 |   return tv.tv_sec + tv.tv_usec / 1000000.0;
      |                                   ^
gpu_backend.cpp:35:47: warning: 8u is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   35 |   size_t required_size = (size_t)batch_size * 8u * sizeof(uint32_t);
      |                                               ^
gpu_backend.cpp:35:47: warning: integer literal has suffix 'u', which is not uppercase [readability-uppercase-literal-suffix]
   35 |   size_t required_size = (size_t)batch_size * 8u * sizeof(uint32_t);
      |                                               ^~
      |                                                U
gpu_backend.cpp:38:7: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
   38 |   if (d_priv_pool && pool_size >= required_size) {
      |       ^
      |       (           != nullptr)
gpu_backend.cpp:43:7: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
   43 |   if (d_priv_pool) {
      |       ^          
      |                   != nullptr
gpu_backend.cpp:54:26: warning: statement should be inside braces [readability-braces-around-statements]
   54 |   if (err != cudaSuccess) return -1;
      |                          ^          
      |                           {
gpu_backend.cpp:74:28: warning: 1024.0 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   74 |           required_size / (1024.0 * 1024.0), batch_size);
      |                            ^
gpu_backend.cpp:74:37: warning: 1024.0 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   74 |           required_size / (1024.0 * 1024.0), batch_size);
      |                                     ^
gpu_backend.cpp:95:8: warning: implicit conversion 'const uint32_t *' (aka 'const unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
   95 |   if (!h_private_keys || !h_public_keys_x || !h_public_keys_y || count == 0) return -1;
      |       ~^
      |       (               == nullptr)
gpu_backend.cpp:95:27: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
   95 |   if (!h_private_keys || !h_public_keys_x || !h_public_keys_y || count == 0) return -1;
      |                          ~^
      |                          (                == nullptr)
gpu_backend.cpp:95:47: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
   95 |   if (!h_private_keys || !h_public_keys_x || !h_public_keys_y || count == 0) return -1;
      |                                              ~^
      |                                              (                == nullptr)
gpu_backend.cpp:95:77: warning: statement should be inside braces [readability-braces-around-statements]
   95 |   if (!h_private_keys || !h_public_keys_x || !h_public_keys_y || count == 0) return -1;
      |                                                                             ^          
      |                                                                              {
gpu_backend.cpp:96:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
   96 |   if (!GPU_IsAvailable()) return -2;
      |       ~^                
      |                          == 0
gpu_backend.cpp:96:26: warning: statement should be inside braces [readability-braces-around-statements]
   96 |   if (!GPU_IsAvailable()) return -2;
      |                          ^          
      |                           {
gpu_backend.cpp:107:34: warning: 8u is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  107 |   size_t bytes = (size_t)count * 8u * sizeof(uint32_t);
      |                                  ^
gpu_backend.cpp:107:34: warning: integer literal has suffix 'u', which is not uppercase [readability-uppercase-literal-suffix]
  107 |   size_t bytes = (size_t)count * 8u * sizeof(uint32_t);
      |                                  ^~
      |                                   U
gpu_backend.cpp:112:26: warning: statement should be inside braces [readability-braces-around-statements]
  112 |   if (err != cudaSuccess) return (int)err;
      |                          ^                
      |                           {
gpu_backend.cpp:115:9: warning: variable name 'rc' is too short, expected at least 3 characters [readability-identifier-length]
  115 |     int rc = kh_ecc_pmul_batch(d_priv_pool, d_x_pool, d_y_pool, count, block_dim);
      |         ^
gpu_backend.cpp:116:17: warning: statement should be inside braces [readability-braces-around-statements]
  116 |     if (rc != 0) return rc;
      |                 ^          
      |                  {
gpu_backend.cpp:120:26: warning: statement should be inside braces [readability-braces-around-statements]
  120 |   if (err != cudaSuccess) return (int)err;
      |                          ^                
      |                           {
gpu_backend.cpp:123:26: warning: statement should be inside braces [readability-braces-around-statements]
  123 |   if (err != cudaSuccess) return (int)err;
      |                          ^                
      |                           {
gpu_backend.cpp:135:86: warning: 1000000.0 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  135 |                                  (current_time.tv_usec - last_perf_report.tv_usec) / 1000000.0;
      |                                                                                      ^
gpu_backend.cpp:137:22: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  137 |   if (call_counter % 1000 == 0 || time_since_last_report >= 10.0) {
      |                      ^
gpu_backend.cpp:137:61: warning: 10.0 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  137 |   if (call_counter % 1000 == 0 || time_since_last_report >= 10.0) {
      |                                                             ^
gpu_backend.cpp:140:38: warning: 1000.0 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  140 |             call_counter, gpu_time * 1000.0, avg_keys_per_sec, count);
      |                                      ^
gpu_backend.cpp:150:8: warning: implicit conversion 'const uint8_t *' (aka 'const unsigned char *') -> 'bool' [readability-implicit-bool-conversion]
  150 |   if (!be_bytes || !le_words) return;
      |       ~^
      |       (         == nullptr)
gpu_backend.cpp:150:21: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
  150 |   if (!be_bytes || !le_words) return;
      |                    ~^       
      |                    (         == nullptr)
gpu_backend.cpp:150:30: warning: statement should be inside braces [readability-braces-around-statements]
  150 |   if (!be_bytes || !le_words) return;
      |                              ^       
      |                               {
gpu_backend.cpp:157:23: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  157 |   for (int i = 0; i < 8; i++) {
      |                       ^
gpu_backend.cpp:158:37: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  158 |     const uint8_t* src = &be_bytes[(7-i) * 4];  // 从高位开始取 4 字节
      |                                     ^
gpu_backend.cpp:160:40: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  160 |                   ((uint32_t)src[2] << 8) |
      |                                        ^
gpu_backend.cpp:161:40: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  161 |                   ((uint32_t)src[1] << 16) |
      |                                        ^
gpu_backend.cpp:162:40: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  162 |                   ((uint32_t)src[0] << 24);
      |                                        ^
gpu_backend.cpp:168:8: warning: implicit conversion 'const uint32_t *' (aka 'const unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
  168 |   if (!le_words || !be_bytes) return;
      |       ~^
      |       (         == nullptr)
gpu_backend.cpp:168:21: warning: implicit conversion 'uint8_t *' (aka 'unsigned char *') -> 'bool' [readability-implicit-bool-conversion]
  168 |   if (!le_words || !be_bytes) return;
      |                    ~^       
      |                    (         == nullptr)
gpu_backend.cpp:168:30: warning: statement should be inside braces [readability-braces-around-statements]
  168 |   if (!le_words || !be_bytes) return;
      |                              ^       
      |                               {
gpu_backend.cpp:175:23: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  175 |   for (int i = 0; i < 8; i++) {
      |                       ^
gpu_backend.cpp:176:31: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  176 |     uint8_t* dst = &be_bytes[(7-i) * 4];  // 向高位写入 4 字节
      |                               ^
gpu_backend.cpp:178:31: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  178 |     dst[0] = (uint8_t)(val >> 24);
      |                               ^
gpu_backend.cpp:179:31: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  179 |     dst[1] = (uint8_t)(val >> 16);
      |                               ^
gpu_backend.cpp:180:31: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  180 |     dst[2] = (uint8_t)(val >> 8);
      |                               ^
gpu_backend.cpp:191:8: warning: implicit conversion 'const uint8_t *' (aka 'const unsigned char *') -> 'bool' [readability-implicit-bool-conversion]
  191 |   if (!h_private_keys_be || !h_public_keys_x_be || !h_public_keys_y_be || count == 0) return -1;
      |       ~^
      |       (                  == nullptr)
gpu_backend.cpp:191:30: warning: implicit conversion 'uint8_t *' (aka 'unsigned char *') -> 'bool' [readability-implicit-bool-conversion]
  191 |   if (!h_private_keys_be || !h_public_keys_x_be || !h_public_keys_y_be || count == 0) return -1;
      |                             ~^
      |                             (                   == nullptr)
gpu_backend.cpp:191:53: warning: implicit conversion 'uint8_t *' (aka 'unsigned char *') -> 'bool' [readability-implicit-bool-conversion]
  191 |   if (!h_private_keys_be || !h_public_keys_x_be || !h_public_keys_y_be || count == 0) return -1;
      |                                                    ~^
      |                                                    (                   == nullptr)
gpu_backend.cpp:191:86: warning: statement should be inside braces [readability-braces-around-statements]
  191 |   if (!h_private_keys_be || !h_public_keys_x_be || !h_public_keys_y_be || count == 0) return -1;
      |                                                                                      ^          
      |                                                                                       {
gpu_backend.cpp:194:54: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  194 |   uint32_t* temp_priv_le = (uint32_t*)malloc(count * 8 * sizeof(uint32_t));
      |                                                      ^
gpu_backend.cpp:195:51: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  195 |   uint32_t* temp_x_le = (uint32_t*)malloc(count * 8 * sizeof(uint32_t));
      |                                                   ^
gpu_backend.cpp:196:51: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  196 |   uint32_t* temp_y_le = (uint32_t*)malloc(count * 8 * sizeof(uint32_t));
      |                                                   ^
gpu_backend.cpp:198:8: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
  198 |   if (!temp_priv_le || !temp_x_le || !temp_y_le) {
      |       ~^
      |       (             == nullptr)
gpu_backend.cpp:198:25: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
  198 |   if (!temp_priv_le || !temp_x_le || !temp_y_le) {
      |                        ~^
      |                        (          == nullptr)
gpu_backend.cpp:198:39: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
  198 |   if (!temp_priv_le || !temp_x_le || !temp_y_le) {
      |                                      ~^        
      |                                      (          == nullptr)
gpu_backend.cpp:199:9: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
  199 |     if (temp_priv_le) free(temp_priv_le);
      |         ^           
      |                      != nullptr
gpu_backend.cpp:199:22: warning: statement should be inside braces [readability-braces-around-statements]
  199 |     if (temp_priv_le) free(temp_priv_le);
      |                      ^                   
      |                       {
gpu_backend.cpp:200:9: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
  200 |     if (temp_x_le) free(temp_x_le);
      |         ^        
      |                   != nullptr
gpu_backend.cpp:200:19: warning: statement should be inside braces [readability-braces-around-statements]
  200 |     if (temp_x_le) free(temp_x_le);
      |                   ^                
      |                    {
gpu_backend.cpp:201:9: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
  201 |     if (temp_y_le) free(temp_y_le);
      |         ^        
      |                   != nullptr
gpu_backend.cpp:201:19: warning: statement should be inside braces [readability-braces-around-statements]
  201 |     if (temp_y_le) free(temp_y_le);
      |                   ^                
      |                    {
gpu_backend.cpp:207:55: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  207 |     Convert_BE32_to_LE32_Array(&h_private_keys_be[i * 32], &temp_priv_le[i * 8]);
      |                                                       ^
gpu_backend.cpp:207:78: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  207 |     Convert_BE32_to_LE32_Array(&h_private_keys_be[i * 32], &temp_priv_le[i * 8]);
      |                                                                              ^
gpu_backend.cpp:216:49: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  216 |       Convert_LE32_to_BE32_Array(&temp_x_le[i * 8], &h_public_keys_x_be[i * 32]);
      |                                                 ^
gpu_backend.cpp:216:77: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  216 |       Convert_LE32_to_BE32_Array(&temp_x_le[i * 8], &h_public_keys_x_be[i * 32]);
      |                                                                             ^
gpu_backend.cpp:217:49: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  217 |       Convert_LE32_to_BE32_Array(&temp_y_le[i * 8], &h_public_keys_y_be[i * 32]);
      |                                                 ^
gpu_backend.cpp:217:77: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  217 |       Convert_LE32_to_BE32_Array(&temp_y_le[i * 8], &h_public_keys_y_be[i * 32]);
      |                                                                             ^
588 warnings generated.
Suppressed 524 warnings (524 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/hash/sha256_sse.cpp
hash/sha256_sse.cpp:90:28: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
   90 |   void Initialize(__m128i *s) {
      |                            ^
hash/sha256_sse.cpp:95:27: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
   95 |   void Transform(__m128i *s, uint32_t *b0, uint32_t *b1, uint32_t *b2, uint32_t *b3)
      |                           ^
hash/sha256_sse.cpp:95:40: warning: parameter name 'b0' is too short, expected at least 3 characters [readability-identifier-length]
   95 |   void Transform(__m128i *s, uint32_t *b0, uint32_t *b1, uint32_t *b2, uint32_t *b3)
      |                                        ^
hash/sha256_sse.cpp:95:54: warning: parameter name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
   95 |   void Transform(__m128i *s, uint32_t *b0, uint32_t *b1, uint32_t *b2, uint32_t *b3)
      |                                                      ^
hash/sha256_sse.cpp:95:68: warning: parameter name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
   95 |   void Transform(__m128i *s, uint32_t *b0, uint32_t *b1, uint32_t *b2, uint32_t *b3)
      |                                                                    ^
hash/sha256_sse.cpp:95:82: warning: parameter name 'b3' is too short, expected at least 3 characters [readability-identifier-length]
   95 |   void Transform(__m128i *s, uint32_t *b0, uint32_t *b1, uint32_t *b2, uint32_t *b3)
      |                                                                                  ^
hash/sha256_sse.cpp:97:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   97 |     __m128i a,b,c,d,e,f,g,h;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~
hash/sha256_sse.cpp:97:13: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
   97 |     __m128i a,b,c,d,e,f,g,h;
      |             ^
hash/sha256_sse.cpp:97:15: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
   97 |     __m128i a,b,c,d,e,f,g,h;
      |               ^
hash/sha256_sse.cpp:97:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   97 |     __m128i a,b,c,d,e,f,g,h;
      |                 ^
hash/sha256_sse.cpp:97:19: warning: variable name 'd' is too short, expected at least 3 characters [readability-identifier-length]
   97 |     __m128i a,b,c,d,e,f,g,h;
      |                   ^
hash/sha256_sse.cpp:97:21: warning: variable name 'e' is too short, expected at least 3 characters [readability-identifier-length]
   97 |     __m128i a,b,c,d,e,f,g,h;
      |                     ^
hash/sha256_sse.cpp:97:23: warning: variable name 'f' is too short, expected at least 3 characters [readability-identifier-length]
   97 |     __m128i a,b,c,d,e,f,g,h;
      |                       ^
hash/sha256_sse.cpp:97:25: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
   97 |     __m128i a,b,c,d,e,f,g,h;
      |                         ^
hash/sha256_sse.cpp:97:27: warning: variable name 'h' is too short, expected at least 3 characters [readability-identifier-length]
   97 |     __m128i a,b,c,d,e,f,g,h;
      |                           ^
hash/sha256_sse.cpp:98:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   98 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash/sha256_sse.cpp:98:13: warning: variable name 'w0' is too short, expected at least 3 characters [readability-identifier-length]
   98 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |             ^
hash/sha256_sse.cpp:98:17: warning: variable name 'w1' is too short, expected at least 3 characters [readability-identifier-length]
   98 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                 ^
hash/sha256_sse.cpp:98:21: warning: variable name 'w2' is too short, expected at least 3 characters [readability-identifier-length]
   98 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                     ^
hash/sha256_sse.cpp:98:25: warning: variable name 'w3' is too short, expected at least 3 characters [readability-identifier-length]
   98 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                         ^
hash/sha256_sse.cpp:98:29: warning: variable name 'w4' is too short, expected at least 3 characters [readability-identifier-length]
   98 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                             ^
hash/sha256_sse.cpp:98:33: warning: variable name 'w5' is too short, expected at least 3 characters [readability-identifier-length]
   98 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                                 ^
hash/sha256_sse.cpp:98:37: warning: variable name 'w6' is too short, expected at least 3 characters [readability-identifier-length]
   98 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                                     ^
hash/sha256_sse.cpp:98:41: warning: variable name 'w7' is too short, expected at least 3 characters [readability-identifier-length]
   98 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                                         ^
hash/sha256_sse.cpp:99:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   99 |     __m128i w8, w9, w10, w11, w12, w13, w14, w15;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash/sha256_sse.cpp:99:13: warning: variable name 'w8' is too short, expected at least 3 characters [readability-identifier-length]
   99 |     __m128i w8, w9, w10, w11, w12, w13, w14, w15;
      |             ^
hash/sha256_sse.cpp:99:17: warning: variable name 'w9' is too short, expected at least 3 characters [readability-identifier-length]
   99 |     __m128i w8, w9, w10, w11, w12, w13, w14, w15;
      |                 ^
hash/sha256_sse.cpp:100:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  100 |     __m128i T1, T2;
      |     ^~~~~~~~~~~~~~~
hash/sha256_sse.cpp:100:13: warning: variable name 'T1' is too short, expected at least 3 characters [readability-identifier-length]
  100 |     __m128i T1, T2;
      |             ^
hash/sha256_sse.cpp:100:17: warning: variable name 'T2' is too short, expected at least 3 characters [readability-identifier-length]
  100 |     __m128i T1, T2;
      |                 ^
hash/sha256_sse.cpp:107:28: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  107 |     f = _mm_load_si128(s + 5);
      |                            ^
hash/sha256_sse.cpp:108:28: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  108 |     g = _mm_load_si128(s + 6);
      |                            ^
hash/sha256_sse.cpp:109:28: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  109 |     h = _mm_load_si128(s + 7);
      |                            ^
hash/sha256_sse.cpp:116:27: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  116 |     w5 = _mm_set_epi32(b0[5], b1[5], b2[5], b3[5]);
      |                           ^
hash/sha256_sse.cpp:116:34: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  116 |     w5 = _mm_set_epi32(b0[5], b1[5], b2[5], b3[5]);
      |                                  ^
hash/sha256_sse.cpp:116:41: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  116 |     w5 = _mm_set_epi32(b0[5], b1[5], b2[5], b3[5]);
      |                                         ^
hash/sha256_sse.cpp:116:48: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  116 |     w5 = _mm_set_epi32(b0[5], b1[5], b2[5], b3[5]);
      |                                                ^
hash/sha256_sse.cpp:117:27: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  117 |     w6 = _mm_set_epi32(b0[6], b1[6], b2[6], b3[6]);
      |                           ^
hash/sha256_sse.cpp:117:34: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  117 |     w6 = _mm_set_epi32(b0[6], b1[6], b2[6], b3[6]);
      |                                  ^
hash/sha256_sse.cpp:117:41: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  117 |     w6 = _mm_set_epi32(b0[6], b1[6], b2[6], b3[6]);
      |                                         ^
hash/sha256_sse.cpp:117:48: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  117 |     w6 = _mm_set_epi32(b0[6], b1[6], b2[6], b3[6]);
      |                                                ^
hash/sha256_sse.cpp:118:27: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  118 |     w7 = _mm_set_epi32(b0[7], b1[7], b2[7], b3[7]);
      |                           ^
hash/sha256_sse.cpp:118:34: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  118 |     w7 = _mm_set_epi32(b0[7], b1[7], b2[7], b3[7]);
      |                                  ^
hash/sha256_sse.cpp:118:41: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  118 |     w7 = _mm_set_epi32(b0[7], b1[7], b2[7], b3[7]);
      |                                         ^
hash/sha256_sse.cpp:118:48: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  118 |     w7 = _mm_set_epi32(b0[7], b1[7], b2[7], b3[7]);
      |                                                ^
hash/sha256_sse.cpp:119:27: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  119 |     w8 = _mm_set_epi32(b0[8], b1[8], b2[8], b3[8]);
      |                           ^
hash/sha256_sse.cpp:119:34: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  119 |     w8 = _mm_set_epi32(b0[8], b1[8], b2[8], b3[8]);
      |                                  ^
hash/sha256_sse.cpp:119:41: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  119 |     w8 = _mm_set_epi32(b0[8], b1[8], b2[8], b3[8]);
      |                                         ^
hash/sha256_sse.cpp:119:48: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  119 |     w8 = _mm_set_epi32(b0[8], b1[8], b2[8], b3[8]);
      |                                                ^
hash/sha256_sse.cpp:120:27: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  120 |     w9 = _mm_set_epi32(b0[9], b1[9], b2[9], b3[9]);
      |                           ^
hash/sha256_sse.cpp:120:34: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  120 |     w9 = _mm_set_epi32(b0[9], b1[9], b2[9], b3[9]);
      |                                  ^
hash/sha256_sse.cpp:120:41: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  120 |     w9 = _mm_set_epi32(b0[9], b1[9], b2[9], b3[9]);
      |                                         ^
hash/sha256_sse.cpp:120:48: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  120 |     w9 = _mm_set_epi32(b0[9], b1[9], b2[9], b3[9]);
      |                                                ^
hash/sha256_sse.cpp:121:28: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  121 |     w10 = _mm_set_epi32(b0[10], b1[10], b2[10], b3[10]);
      |                            ^
hash/sha256_sse.cpp:121:36: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  121 |     w10 = _mm_set_epi32(b0[10], b1[10], b2[10], b3[10]);
      |                                    ^
hash/sha256_sse.cpp:121:44: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  121 |     w10 = _mm_set_epi32(b0[10], b1[10], b2[10], b3[10]);
      |                                            ^
hash/sha256_sse.cpp:121:52: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  121 |     w10 = _mm_set_epi32(b0[10], b1[10], b2[10], b3[10]);
      |                                                    ^
hash/sha256_sse.cpp:122:28: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  122 |     w11 = _mm_set_epi32(b0[11], b1[11], b2[11], b3[11]);
      |                            ^
hash/sha256_sse.cpp:122:36: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  122 |     w11 = _mm_set_epi32(b0[11], b1[11], b2[11], b3[11]);
      |                                    ^
hash/sha256_sse.cpp:122:44: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  122 |     w11 = _mm_set_epi32(b0[11], b1[11], b2[11], b3[11]);
      |                                            ^
hash/sha256_sse.cpp:122:52: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  122 |     w11 = _mm_set_epi32(b0[11], b1[11], b2[11], b3[11]);
      |                                                    ^
hash/sha256_sse.cpp:123:28: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  123 |     w12 = _mm_set_epi32(b0[12], b1[12], b2[12], b3[12]);
      |                            ^
hash/sha256_sse.cpp:123:36: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  123 |     w12 = _mm_set_epi32(b0[12], b1[12], b2[12], b3[12]);
      |                                    ^
hash/sha256_sse.cpp:123:44: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  123 |     w12 = _mm_set_epi32(b0[12], b1[12], b2[12], b3[12]);
      |                                            ^
hash/sha256_sse.cpp:123:52: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  123 |     w12 = _mm_set_epi32(b0[12], b1[12], b2[12], b3[12]);
      |                                                    ^
hash/sha256_sse.cpp:124:28: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  124 |     w13 = _mm_set_epi32(b0[13], b1[13], b2[13], b3[13]);
      |                            ^
hash/sha256_sse.cpp:124:36: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  124 |     w13 = _mm_set_epi32(b0[13], b1[13], b2[13], b3[13]);
      |                                    ^
hash/sha256_sse.cpp:124:44: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  124 |     w13 = _mm_set_epi32(b0[13], b1[13], b2[13], b3[13]);
      |                                            ^
hash/sha256_sse.cpp:124:52: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  124 |     w13 = _mm_set_epi32(b0[13], b1[13], b2[13], b3[13]);
      |                                                    ^
hash/sha256_sse.cpp:125:28: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  125 |     w14 = _mm_set_epi32(b0[14], b1[14], b2[14], b3[14]);
      |                            ^
hash/sha256_sse.cpp:125:36: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  125 |     w14 = _mm_set_epi32(b0[14], b1[14], b2[14], b3[14]);
      |                                    ^
hash/sha256_sse.cpp:125:44: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  125 |     w14 = _mm_set_epi32(b0[14], b1[14], b2[14], b3[14]);
      |                                            ^
hash/sha256_sse.cpp:125:52: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  125 |     w14 = _mm_set_epi32(b0[14], b1[14], b2[14], b3[14]);
      |                                                    ^
hash/sha256_sse.cpp:126:28: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  126 |     w15 = _mm_set_epi32(b0[15], b1[15], b2[15], b3[15]);
      |                            ^
hash/sha256_sse.cpp:126:36: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  126 |     w15 = _mm_set_epi32(b0[15], b1[15], b2[15], b3[15]);
      |                                    ^
hash/sha256_sse.cpp:126:44: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  126 |     w15 = _mm_set_epi32(b0[15], b1[15], b2[15], b3[15]);
      |                                            ^
hash/sha256_sse.cpp:126:52: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  126 |     w15 = _mm_set_epi32(b0[15], b1[15], b2[15], b3[15]);
      |                                                    ^
hash/sha256_sse.cpp:207:7: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  207 |     s[5] = _mm_add_epi32(f, s[5]);
      |       ^
hash/sha256_sse.cpp:207:31: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  207 |     s[5] = _mm_add_epi32(f, s[5]);
      |                               ^
hash/sha256_sse.cpp:208:7: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  208 |     s[6] = _mm_add_epi32(g, s[6]);
      |       ^
hash/sha256_sse.cpp:208:31: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  208 |     s[6] = _mm_add_epi32(g, s[6]);
      |                               ^
hash/sha256_sse.cpp:209:7: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  209 |     s[7] = _mm_add_epi32(h, s[7]);
      |       ^
hash/sha256_sse.cpp:209:31: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  209 |     s[7] = _mm_add_epi32(h, s[7]);
      |                               ^
hash/sha256_sse.cpp:214:28: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
  214 |   void Transform2(__m128i *s, uint32_t *b0, uint32_t *b1, uint32_t *b2, uint32_t *b3) {
      |                            ^
hash/sha256_sse.cpp:214:41: warning: parameter name 'b0' is too short, expected at least 3 characters [readability-identifier-length]
  214 |   void Transform2(__m128i *s, uint32_t *b0, uint32_t *b1, uint32_t *b2, uint32_t *b3) {
      |                                         ^
hash/sha256_sse.cpp:214:55: warning: parameter name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
  214 |   void Transform2(__m128i *s, uint32_t *b0, uint32_t *b1, uint32_t *b2, uint32_t *b3) {
      |                                                       ^
hash/sha256_sse.cpp:214:69: warning: parameter name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
  214 |   void Transform2(__m128i *s, uint32_t *b0, uint32_t *b1, uint32_t *b2, uint32_t *b3) {
      |                                                                     ^
hash/sha256_sse.cpp:214:83: warning: parameter name 'b3' is too short, expected at least 3 characters [readability-identifier-length]
  214 |   void Transform2(__m128i *s, uint32_t *b0, uint32_t *b1, uint32_t *b2, uint32_t *b3) {
      |                                                                                   ^
hash/sha256_sse.cpp:215:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  215 |     __m128i a, b, c, d, e, f, g, h;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash/sha256_sse.cpp:215:13: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  215 |     __m128i a, b, c, d, e, f, g, h;
      |             ^
hash/sha256_sse.cpp:215:16: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  215 |     __m128i a, b, c, d, e, f, g, h;
      |                ^
hash/sha256_sse.cpp:215:19: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  215 |     __m128i a, b, c, d, e, f, g, h;
      |                   ^
hash/sha256_sse.cpp:215:22: warning: variable name 'd' is too short, expected at least 3 characters [readability-identifier-length]
  215 |     __m128i a, b, c, d, e, f, g, h;
      |                      ^
hash/sha256_sse.cpp:215:25: warning: variable name 'e' is too short, expected at least 3 characters [readability-identifier-length]
  215 |     __m128i a, b, c, d, e, f, g, h;
      |                         ^
hash/sha256_sse.cpp:215:28: warning: variable name 'f' is too short, expected at least 3 characters [readability-identifier-length]
  215 |     __m128i a, b, c, d, e, f, g, h;
      |                            ^
hash/sha256_sse.cpp:215:31: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
  215 |     __m128i a, b, c, d, e, f, g, h;
      |                               ^
hash/sha256_sse.cpp:215:34: warning: variable name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  215 |     __m128i a, b, c, d, e, f, g, h;
      |                                  ^
hash/sha256_sse.cpp:216:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  216 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash/sha256_sse.cpp:216:13: warning: variable name 'w0' is too short, expected at least 3 characters [readability-identifier-length]
  216 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |             ^
hash/sha256_sse.cpp:216:17: warning: variable name 'w1' is too short, expected at least 3 characters [readability-identifier-length]
  216 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                 ^
hash/sha256_sse.cpp:216:21: warning: variable name 'w2' is too short, expected at least 3 characters [readability-identifier-length]
  216 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                     ^
hash/sha256_sse.cpp:216:25: warning: variable name 'w3' is too short, expected at least 3 characters [readability-identifier-length]
  216 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                         ^
hash/sha256_sse.cpp:216:29: warning: variable name 'w4' is too short, expected at least 3 characters [readability-identifier-length]
  216 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                             ^
hash/sha256_sse.cpp:216:33: warning: variable name 'w5' is too short, expected at least 3 characters [readability-identifier-length]
  216 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                                 ^
hash/sha256_sse.cpp:216:37: warning: variable name 'w6' is too short, expected at least 3 characters [readability-identifier-length]
  216 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                                     ^
hash/sha256_sse.cpp:216:41: warning: variable name 'w7' is too short, expected at least 3 characters [readability-identifier-length]
  216 |     __m128i w0, w1, w2, w3, w4, w5, w6, w7;
      |                                         ^
hash/sha256_sse.cpp:217:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  217 |     __m128i w8, w9, w10, w11, w12, w13, w14, w15;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash/sha256_sse.cpp:217:13: warning: variable name 'w8' is too short, expected at least 3 characters [readability-identifier-length]
  217 |     __m128i w8, w9, w10, w11, w12, w13, w14, w15;
      |             ^
hash/sha256_sse.cpp:217:17: warning: variable name 'w9' is too short, expected at least 3 characters [readability-identifier-length]
  217 |     __m128i w8, w9, w10, w11, w12, w13, w14, w15;
      |                 ^
hash/sha256_sse.cpp:218:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  218 |     __m128i T1, T2;
      |     ^~~~~~~~~~~~~~~
hash/sha256_sse.cpp:218:13: warning: variable name 'T1' is too short, expected at least 3 characters [readability-identifier-length]
  218 |     __m128i T1, T2;
      |             ^
hash/sha256_sse.cpp:218:17: warning: variable name 'T2' is too short, expected at least 3 characters [readability-identifier-length]
  218 |     __m128i T1, T2;
      |                 ^
hash/sha256_sse.cpp:225:28: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  225 |     f = _mm_load_si128(s + 5);
      |                            ^
hash/sha256_sse.cpp:226:28: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  226 |     g = _mm_load_si128(s + 6);
      |                            ^
hash/sha256_sse.cpp:227:28: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  227 |     h = _mm_load_si128(s + 7);
      |                            ^
hash/sha256_sse.cpp:234:27: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  234 |     w5 = _mm_set_epi32(b0[5], b1[5], b2[5], b3[5]);
      |                           ^
hash/sha256_sse.cpp:234:34: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  234 |     w5 = _mm_set_epi32(b0[5], b1[5], b2[5], b3[5]);
      |                                  ^
hash/sha256_sse.cpp:234:41: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  234 |     w5 = _mm_set_epi32(b0[5], b1[5], b2[5], b3[5]);
      |                                         ^
hash/sha256_sse.cpp:234:48: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  234 |     w5 = _mm_set_epi32(b0[5], b1[5], b2[5], b3[5]);
      |                                                ^
hash/sha256_sse.cpp:235:27: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  235 |     w6 = _mm_set_epi32(b0[6], b1[6], b2[6], b3[6]);
      |                           ^
hash/sha256_sse.cpp:235:34: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  235 |     w6 = _mm_set_epi32(b0[6], b1[6], b2[6], b3[6]);
      |                                  ^
hash/sha256_sse.cpp:235:41: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  235 |     w6 = _mm_set_epi32(b0[6], b1[6], b2[6], b3[6]);
      |                                         ^
hash/sha256_sse.cpp:235:48: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  235 |     w6 = _mm_set_epi32(b0[6], b1[6], b2[6], b3[6]);
      |                                                ^
hash/sha256_sse.cpp:236:27: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  236 |     w7 = _mm_set_epi32(b0[7], b1[7], b2[7], b3[7]);
      |                           ^
hash/sha256_sse.cpp:236:34: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  236 |     w7 = _mm_set_epi32(b0[7], b1[7], b2[7], b3[7]);
      |                                  ^
hash/sha256_sse.cpp:236:41: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  236 |     w7 = _mm_set_epi32(b0[7], b1[7], b2[7], b3[7]);
      |                                         ^
hash/sha256_sse.cpp:236:48: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  236 |     w7 = _mm_set_epi32(b0[7], b1[7], b2[7], b3[7]);
      |                                                ^
hash/sha256_sse.cpp:237:27: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  237 |     w8 = _mm_set_epi32(b0[8], b1[8], b2[8], b3[8]);
      |                           ^
hash/sha256_sse.cpp:237:34: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  237 |     w8 = _mm_set_epi32(b0[8], b1[8], b2[8], b3[8]);
      |                                  ^
hash/sha256_sse.cpp:237:41: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  237 |     w8 = _mm_set_epi32(b0[8], b1[8], b2[8], b3[8]);
      |                                         ^
hash/sha256_sse.cpp:237:48: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  237 |     w8 = _mm_set_epi32(b0[8], b1[8], b2[8], b3[8]);
      |                                                ^
hash/sha256_sse.cpp:238:27: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  238 |     w9 = _mm_set_epi32(b0[9], b1[9], b2[9], b3[9]);
      |                           ^
hash/sha256_sse.cpp:238:34: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  238 |     w9 = _mm_set_epi32(b0[9], b1[9], b2[9], b3[9]);
      |                                  ^
hash/sha256_sse.cpp:238:41: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  238 |     w9 = _mm_set_epi32(b0[9], b1[9], b2[9], b3[9]);
      |                                         ^
hash/sha256_sse.cpp:238:48: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  238 |     w9 = _mm_set_epi32(b0[9], b1[9], b2[9], b3[9]);
      |                                                ^
hash/sha256_sse.cpp:239:28: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  239 |     w10 = _mm_set_epi32(b0[10], b1[10], b2[10], b3[10]);
      |                            ^
hash/sha256_sse.cpp:239:36: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  239 |     w10 = _mm_set_epi32(b0[10], b1[10], b2[10], b3[10]);
      |                                    ^
hash/sha256_sse.cpp:239:44: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  239 |     w10 = _mm_set_epi32(b0[10], b1[10], b2[10], b3[10]);
      |                                            ^
hash/sha256_sse.cpp:239:52: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  239 |     w10 = _mm_set_epi32(b0[10], b1[10], b2[10], b3[10]);
      |                                                    ^
hash/sha256_sse.cpp:240:28: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  240 |     w11 = _mm_set_epi32(b0[11], b1[11], b2[11], b3[11]);
      |                            ^
hash/sha256_sse.cpp:240:36: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  240 |     w11 = _mm_set_epi32(b0[11], b1[11], b2[11], b3[11]);
      |                                    ^
hash/sha256_sse.cpp:240:44: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  240 |     w11 = _mm_set_epi32(b0[11], b1[11], b2[11], b3[11]);
      |                                            ^
hash/sha256_sse.cpp:240:52: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  240 |     w11 = _mm_set_epi32(b0[11], b1[11], b2[11], b3[11]);
      |                                                    ^
hash/sha256_sse.cpp:241:28: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  241 |     w12 = _mm_set_epi32(b0[12], b1[12], b2[12], b3[12]);
      |                            ^
hash/sha256_sse.cpp:241:36: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  241 |     w12 = _mm_set_epi32(b0[12], b1[12], b2[12], b3[12]);
      |                                    ^
hash/sha256_sse.cpp:241:44: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  241 |     w12 = _mm_set_epi32(b0[12], b1[12], b2[12], b3[12]);
      |                                            ^
hash/sha256_sse.cpp:241:52: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  241 |     w12 = _mm_set_epi32(b0[12], b1[12], b2[12], b3[12]);
      |                                                    ^
hash/sha256_sse.cpp:242:28: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  242 |     w13 = _mm_set_epi32(b0[13], b1[13], b2[13], b3[13]);
      |                            ^
hash/sha256_sse.cpp:242:36: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  242 |     w13 = _mm_set_epi32(b0[13], b1[13], b2[13], b3[13]);
      |                                    ^
hash/sha256_sse.cpp:242:44: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  242 |     w13 = _mm_set_epi32(b0[13], b1[13], b2[13], b3[13]);
      |                                            ^
hash/sha256_sse.cpp:242:52: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  242 |     w13 = _mm_set_epi32(b0[13], b1[13], b2[13], b3[13]);
      |                                                    ^
hash/sha256_sse.cpp:243:28: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  243 |     w14 = _mm_set_epi32(b0[14], b1[14], b2[14], b3[14]);
      |                            ^
hash/sha256_sse.cpp:243:36: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  243 |     w14 = _mm_set_epi32(b0[14], b1[14], b2[14], b3[14]);
      |                                    ^
hash/sha256_sse.cpp:243:44: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  243 |     w14 = _mm_set_epi32(b0[14], b1[14], b2[14], b3[14]);
      |                                            ^
hash/sha256_sse.cpp:243:52: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  243 |     w14 = _mm_set_epi32(b0[14], b1[14], b2[14], b3[14]);
      |                                                    ^
hash/sha256_sse.cpp:244:28: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  244 |     w15 = _mm_set_epi32(b0[15], b1[15], b2[15], b3[15]);
      |                            ^
hash/sha256_sse.cpp:244:36: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  244 |     w15 = _mm_set_epi32(b0[15], b1[15], b2[15], b3[15]);
      |                                    ^
hash/sha256_sse.cpp:244:44: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  244 |     w15 = _mm_set_epi32(b0[15], b1[15], b2[15], b3[15]);
      |                                            ^
hash/sha256_sse.cpp:244:52: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  244 |     w15 = _mm_set_epi32(b0[15], b1[15], b2[15], b3[15]);
      |                                                    ^
hash/sha256_sse.cpp:325:29: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  325 |     w5 = _mm_add_epi32(f, s[5]);
      |                             ^
hash/sha256_sse.cpp:326:29: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  326 |     w6 = _mm_add_epi32(g, s[6]);
      |                             ^
hash/sha256_sse.cpp:327:29: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  327 |     w7 = _mm_add_epi32(h, s[7]);
      |                             ^
hash/sha256_sse.cpp:328:25: warning: 0x80000000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  328 |     w8 = _mm_set1_epi32(0x80000000);
      |                         ^
hash/sha256_sse.cpp:335:26: warning: 0x100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  335 |     w15 = _mm_set1_epi32(0x100);
      |                          ^
hash/sha256_sse.cpp:342:28: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  342 |     f = _mm_load_si128(s + 5);
      |                            ^
hash/sha256_sse.cpp:343:28: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  343 |     g = _mm_load_si128(s + 6);
      |                            ^
hash/sha256_sse.cpp:344:28: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  344 |     h = _mm_load_si128(s + 7);
      |                            ^
hash/sha256_sse.cpp:427:13: warning: parameter name 'i0' is too short, expected at least 3 characters [readability-identifier-length]
  427 |   uint32_t *i0,
      |             ^
hash/sha256_sse.cpp:428:13: warning: parameter name 'i1' is too short, expected at least 3 characters [readability-identifier-length]
  428 |   uint32_t *i1,
      |             ^
hash/sha256_sse.cpp:429:13: warning: parameter name 'i2' is too short, expected at least 3 characters [readability-identifier-length]
  429 |   uint32_t *i2,
      |             ^
hash/sha256_sse.cpp:430:13: warning: parameter name 'i3' is too short, expected at least 3 characters [readability-identifier-length]
  430 |   uint32_t *i3,
      |             ^
hash/sha256_sse.cpp:431:18: warning: parameter name 'd0' is too short, expected at least 3 characters [readability-identifier-length]
  431 |   unsigned char *d0,
      |                  ^
hash/sha256_sse.cpp:432:18: warning: parameter name 'd1' is too short, expected at least 3 characters [readability-identifier-length]
  432 |   unsigned char *d1,
      |                  ^
hash/sha256_sse.cpp:433:18: warning: parameter name 'd2' is too short, expected at least 3 characters [readability-identifier-length]
  433 |   unsigned char *d2,
      |                  ^
hash/sha256_sse.cpp:434:18: warning: parameter name 'd3' is too short, expected at least 3 characters [readability-identifier-length]
  434 |   unsigned char *d3) {
      |                  ^
hash/sha256_sse.cpp:436:11: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  436 |   __m128i s[8];
      |           ^
hash/sha256_sse.cpp:436:13: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  436 |   __m128i s[8];
      |             ^
hash/sha256_sse.cpp:442:31: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                               ^
hash/sha256_sse.cpp:442:35: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                                   ^
hash/sha256_sse.cpp:442:39: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                                       ^
hash/sha256_sse.cpp:442:43: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                                           ^
hash/sha256_sse.cpp:442:55: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                                                       ^
hash/sha256_sse.cpp:442:58: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                                                          ^
hash/sha256_sse.cpp:442:61: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                                                             ^
hash/sha256_sse.cpp:442:70: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                                                                      ^
hash/sha256_sse.cpp:442:73: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                                                                         ^
hash/sha256_sse.cpp:442:76: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                                                                            ^
hash/sha256_sse.cpp:442:80: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  442 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3 );
      |                                                                                ^
hash/sha256_sse.cpp:444:11: warning: variable name 'u0' is too short, expected at least 3 characters [readability-identifier-length]
  444 |   __m128i u0 = _mm_unpacklo_epi32(s[0], s[1]);   // S2_1 S2_0 S3_1 S3_0
      |           ^
hash/sha256_sse.cpp:445:11: warning: variable name 'u1' is too short, expected at least 3 characters [readability-identifier-length]
  445 |   __m128i u1 = _mm_unpackhi_epi32(s[0], s[1]);   // S0_1 S0_0 S1_1 S1_0
      |           ^
hash/sha256_sse.cpp:447:11: warning: variable name 'u2' is too short, expected at least 3 characters [readability-identifier-length]
  447 |   __m128i u2 = _mm_unpacklo_epi32(s[2], s[3]);   // S2_3 S2_2 S3_3 S3_2
      |           ^
hash/sha256_sse.cpp:448:11: warning: variable name 'u3' is too short, expected at least 3 characters [readability-identifier-length]
  448 |   __m128i u3 = _mm_unpackhi_epi32(s[2], s[3]);   // S0_3 S0_2 S1_3 S1_2
      |           ^
hash/sha256_sse.cpp:467:35: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  467 |   u0 = _mm_unpacklo_epi32(s[4], s[5]);
      |                                   ^
hash/sha256_sse.cpp:468:35: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  468 |   u1 = _mm_unpackhi_epi32(s[4], s[5]);
      |                                   ^
hash/sha256_sse.cpp:470:29: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  470 |   u2 = _mm_unpacklo_epi32(s[6], s[7]);
      |                             ^
hash/sha256_sse.cpp:470:35: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  470 |   u2 = _mm_unpacklo_epi32(s[6], s[7]);
      |                                   ^
hash/sha256_sse.cpp:471:29: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  471 |   u3 = _mm_unpackhi_epi32(s[6], s[7]);
      |                             ^
hash/sha256_sse.cpp:471:35: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  471 |   u3 = _mm_unpackhi_epi32(s[6], s[7]);
      |                                   ^
hash/sha256_sse.cpp:483:36: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  483 |   _mm_store_si128((__m128i *)(d0 + 16), _d0);
      |                                    ^
hash/sha256_sse.cpp:484:36: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  484 |   _mm_store_si128((__m128i *)(d1 + 16), _d1);
      |                                    ^
hash/sha256_sse.cpp:485:36: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  485 |   _mm_store_si128((__m128i *)(d2 + 16), _d2);
      |                                    ^
hash/sha256_sse.cpp:486:36: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  486 |   _mm_store_si128((__m128i *)(d3 + 16), _d3);
      |                                    ^
hash/sha256_sse.cpp:492:13: warning: parameter name 'i0' is too short, expected at least 3 characters [readability-identifier-length]
  492 |   uint32_t *i0,
      |             ^
hash/sha256_sse.cpp:493:13: warning: parameter name 'i1' is too short, expected at least 3 characters [readability-identifier-length]
  493 |   uint32_t *i1,
      |             ^
hash/sha256_sse.cpp:494:13: warning: parameter name 'i2' is too short, expected at least 3 characters [readability-identifier-length]
  494 |   uint32_t *i2,
      |             ^
hash/sha256_sse.cpp:495:13: warning: parameter name 'i3' is too short, expected at least 3 characters [readability-identifier-length]
  495 |   uint32_t *i3,
      |             ^
hash/sha256_sse.cpp:496:18: warning: parameter name 'd0' is too short, expected at least 3 characters [readability-identifier-length]
  496 |   unsigned char *d0,
      |                  ^
hash/sha256_sse.cpp:497:18: warning: parameter name 'd1' is too short, expected at least 3 characters [readability-identifier-length]
  497 |   unsigned char *d1,
      |                  ^
hash/sha256_sse.cpp:498:18: warning: parameter name 'd2' is too short, expected at least 3 characters [readability-identifier-length]
  498 |   unsigned char *d2,
      |                  ^
hash/sha256_sse.cpp:499:18: warning: parameter name 'd3' is too short, expected at least 3 characters [readability-identifier-length]
  499 |   unsigned char *d3) {
      |                  ^
hash/sha256_sse.cpp:501:11: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  501 |   __m128i s[8];
      |           ^
hash/sha256_sse.cpp:501:13: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  501 |   __m128i s[8];
      |             ^
hash/sha256_sse.cpp:505:33: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  505 |   _sha256sse::Transform(s, i0 + 16, i1 + 16, i2 + 16, i3 + 16);
      |                                 ^
hash/sha256_sse.cpp:505:42: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  505 |   _sha256sse::Transform(s, i0 + 16, i1 + 16, i2 + 16, i3 + 16);
      |                                          ^
hash/sha256_sse.cpp:505:51: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  505 |   _sha256sse::Transform(s, i0 + 16, i1 + 16, i2 + 16, i3 + 16);
      |                                                   ^
hash/sha256_sse.cpp:505:60: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  505 |   _sha256sse::Transform(s, i0 + 16, i1 + 16, i2 + 16, i3 + 16);
      |                                                            ^
hash/sha256_sse.cpp:508:31: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                               ^
hash/sha256_sse.cpp:508:35: warning: 13 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                                   ^
hash/sha256_sse.cpp:508:39: warning: 14 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                                       ^
hash/sha256_sse.cpp:508:43: warning: 15 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                                           ^
hash/sha256_sse.cpp:508:55: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                                                       ^
hash/sha256_sse.cpp:508:58: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                                                          ^
hash/sha256_sse.cpp:508:61: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                                                             ^
hash/sha256_sse.cpp:508:70: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                                                                      ^
hash/sha256_sse.cpp:508:73: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                                                                         ^
hash/sha256_sse.cpp:508:76: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                                                                            ^
hash/sha256_sse.cpp:508:80: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  508 |   __m128i mask = _mm_set_epi8(12, 13, 14, 15, /**/ 4, 5, 6, 7,  /**/ 8, 9, 10, 11,  /**/ 0, 1, 2, 3);
      |                                                                                ^
hash/sha256_sse.cpp:510:11: warning: variable name 'u0' is too short, expected at least 3 characters [readability-identifier-length]
  510 |   __m128i u0 = _mm_unpacklo_epi32(s[0], s[1]);   // S2_1 S2_0 S3_1 S3_0
      |           ^
hash/sha256_sse.cpp:511:11: warning: variable name 'u1' is too short, expected at least 3 characters [readability-identifier-length]
  511 |   __m128i u1 = _mm_unpackhi_epi32(s[0], s[1]);   // S0_1 S0_0 S1_1 S1_0
      |           ^
hash/sha256_sse.cpp:513:11: warning: variable name 'u2' is too short, expected at least 3 characters [readability-identifier-length]
  513 |   __m128i u2 = _mm_unpacklo_epi32(s[2], s[3]);   // S2_3 S2_2 S3_3 S3_2
      |           ^
hash/sha256_sse.cpp:514:11: warning: variable name 'u3' is too short, expected at least 3 characters [readability-identifier-length]
  514 |   __m128i u3 = _mm_unpackhi_epi32(s[2], s[3]);   // S0_3 S0_2 S1_3 S1_2
      |           ^
hash/sha256_sse.cpp:533:35: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  533 |   u0 = _mm_unpacklo_epi32(s[4], s[5]);
      |                                   ^
hash/sha256_sse.cpp:534:35: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  534 |   u1 = _mm_unpackhi_epi32(s[4], s[5]);
      |                                   ^
hash/sha256_sse.cpp:536:29: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  536 |   u2 = _mm_unpacklo_epi32(s[6], s[7]);
      |                             ^
hash/sha256_sse.cpp:536:35: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  536 |   u2 = _mm_unpacklo_epi32(s[6], s[7]);
      |                                   ^
hash/sha256_sse.cpp:537:29: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  537 |   u3 = _mm_unpackhi_epi32(s[6], s[7]);
      |                             ^
hash/sha256_sse.cpp:537:35: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  537 |   u3 = _mm_unpackhi_epi32(s[6], s[7]);
      |                                   ^
hash/sha256_sse.cpp:549:36: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  549 |   _mm_store_si128((__m128i *)(d0 + 16), _d0);
      |                                    ^
hash/sha256_sse.cpp:550:36: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  550 |   _mm_store_si128((__m128i *)(d1 + 16), _d1);
      |                                    ^
hash/sha256_sse.cpp:551:36: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  551 |   _mm_store_si128((__m128i *)(d2 + 16), _d2);
      |                                    ^
hash/sha256_sse.cpp:552:36: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  552 |   _mm_store_si128((__m128i *)(d3 + 16), _d3);
      |                                    ^
hash/sha256_sse.cpp:556:35: warning: parameter name 'i0' is too short, expected at least 3 characters [readability-identifier-length]
  556 | void sha256sse_checksum(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3,
      |                                   ^
hash/sha256_sse.cpp:556:49: warning: parameter name 'i1' is too short, expected at least 3 characters [readability-identifier-length]
  556 | void sha256sse_checksum(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3,
      |                                                 ^
hash/sha256_sse.cpp:556:63: warning: parameter name 'i2' is too short, expected at least 3 characters [readability-identifier-length]
  556 | void sha256sse_checksum(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3,
      |                                                               ^
hash/sha256_sse.cpp:556:77: warning: parameter name 'i3' is too short, expected at least 3 characters [readability-identifier-length]
  556 | void sha256sse_checksum(uint32_t *i0, uint32_t *i1, uint32_t *i2, uint32_t *i3,
      |                                                                             ^
hash/sha256_sse.cpp:557:12: warning: parameter name 'd0' is too short, expected at least 3 characters [readability-identifier-length]
  557 |   uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |            ^
hash/sha256_sse.cpp:557:25: warning: parameter name 'd1' is too short, expected at least 3 characters [readability-identifier-length]
  557 |   uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                         ^
hash/sha256_sse.cpp:557:38: warning: parameter name 'd2' is too short, expected at least 3 characters [readability-identifier-length]
  557 |   uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                      ^
hash/sha256_sse.cpp:557:51: warning: parameter name 'd3' is too short, expected at least 3 characters [readability-identifier-length]
  557 |   uint8_t *d0, uint8_t *d1, uint8_t *d2, uint8_t *d3) {
      |                                                   ^
hash/sha256_sse.cpp:559:11: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  559 |   __m128i s[8];
      |           ^
hash/sha256_sse.cpp:559:13: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  559 |   __m128i s[8];
      |             ^
hash/sha256_sse.cpp:579:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
  579 | #if 0
      |  ^
4276 warnings generated.
Suppressed 4024 warnings (4024 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/base58/base58.c
base58/base58.c:46:15: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
   46 |         b58_maxint_t t;
      |                      ^
base58/base58.c:47:21: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
   47 |         b58_almostmaxint_t c;
      |                            ^
base58/base58.c:48:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   48 |         size_t i, j;
      |         ^~~~~~~~~~~~
base58/base58.c:48:9: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
   48 |         size_t i, j;
      |                ^
base58/base58.c:48:12: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
   48 |         size_t i, j;
      |                   ^
base58/base58.c:50:83: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   50 |         b58_almostmaxint_t zeromask = bytesleft ? (b58_almostmaxint_mask << (bytesleft * 8)) : 0;
      |                                                                                          ^
base58/base58.c:53:13: warning: statement should be inside braces [readability-braces-around-statements]
   53 |         if (!b58sz)
      |                    ^
      |                     {
   54 |                 b58sz = strlen(b58);
      |                                     
base58/base58.c:61:47: warning: statement should be inside braces [readability-braces-around-statements]
   61 |         for (i = 0; i < b58sz && b58u[i] == '1'; ++i)
      |                                                      ^
      |                                                       {
   62 |                 ++zerocount;
      |                             
base58/base58.c:66:17: warning: 0x80 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   66 |                 if (b58u[i] & 0x80)
      |                               ^
base58/base58.c:66:22: warning: statement should be inside braces [readability-braces-around-statements]
   66 |                 if (b58u[i] & 0x80)
      |                                    ^
      |                                     {
   67 |                         // High-bit set on invalid digit
   68 |                         return false;
      |                                      
base58/base58.c:69:36: warning: statement should be inside braces [readability-braces-around-statements]
   69 |                 if (b58digits_map[b58u[i]] == -1)
      |                                                  ^
      |                                                   {
   70 |                         // Invalid base58 digit
   71 |                         return false;
      |                                      
base58/base58.c:75:34: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   75 |                         t = ((b58_maxint_t)outi[j]) * 58 + c;
      |                                                       ^
base58/base58.c:79:9: warning: statement should be inside braces [readability-braces-around-statements]
   79 |                 if (c)
      |                       ^
      |                        {
   80 |                         // Output number too big (carry to the next int32)
   81 |                         return false;
      |                                      
base58/base58.c:82:26: warning: statement should be inside braces [readability-braces-around-statements]
   82 |                 if (outi[0] & zeromask)
      |                                        ^
      |                                         {
   83 |                         // Output number too big (last int32 filled too far)
   84 |                         return false;
      |                                      
base58/base58.c:90:29: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   90 |                         *(binu++) = (outi[0] >> (8 * (i - 1))) & 0xff;
      |                                                  ^
base58/base58.c:90:45: warning: 0xff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   90 |                         *(binu++) = (outi[0] >> (8 * (i - 1))) & 0xff;
      |                                                                  ^
base58/base58.c:98:29: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   98 |                         *(binu++) = (outi[j] >> (8 * (i - 1))) & 0xff;
      |                                                  ^
base58/base58.c:98:45: warning: 0xff is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   98 |                         *(binu++) = (outi[j] >> (8 * (i - 1))) & 0xff;
      |                                                                  ^
base58/base58.c:106:15: warning: statement should be inside braces [readability-braces-around-statements]
  106 |                 if (binu[i])
      |                             ^
      |                              {
  107 |                         break;
      |                               
base58/base58.c:118:14: warning: 0x20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  118 |         uint8_t buf[0x20];
      |                     ^
base58/base58.c:122:75: warning: parameter 'b58sz' is unused [misc-unused-parameters]
  122 | int b58check(const void *bin, size_t binsz, const char *base58str, size_t b58sz)
      |                                                                           ^
base58/base58.c:124:20: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  124 |         unsigned char buf[32];
      |                           ^
base58/base58.c:126:11: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  126 |         unsigned i;
      |                  ^
base58/base58.c:127:16: warning: statement should be inside braces [readability-braces-around-statements]
  127 |         if (binsz < 4)
      |                       ^
      |                        {
  128 |                 return -4;
      |                           
base58/base58.c:129:41: warning: statement should be inside braces [readability-braces-around-statements]
  129 |         if (!my_dblsha256(buf, bin, binsz - 4))
      |                                                ^
      |                                                 {
  130 |                 return -2;
      |                           
base58/base58.c:131:39: warning: statement should be inside braces [readability-braces-around-statements]
  131 |         if (memcmp(&binc[binsz - 4], buf, 4))
      |                                              ^
      |                                               {
  132 |                 return -1;
      |                           
base58/base58.c:137:45: warning: statement should be inside braces [readability-braces-around-statements]
  137 |         if (binc[i] == '\0' || base58str[i] == '1')
      |                                                    ^
      |                                                     {
  138 |                 return -3;
      |                           
base58/base58.c:149:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  149 |         size_t i, j, high, zcount = 0;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
base58/base58.c:149:9: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  149 |         size_t i, j, high, zcount = 0;
      |                ^
base58/base58.c:149:12: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
  149 |         size_t i, j, high, zcount = 0;
      |                   ^
base58/base58.c:152:40: warning: statement should be inside braces [readability-braces-around-statements]
  152 |         while (zcount < binsz && !bin[zcount])
      |                                               ^
      |                                                {
  153 |                 ++zcount;
      |                          
base58/base58.c:155:28: warning: 138 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  155 |         size = (binsz - zcount) * 138 / 100 + 1;
      |                                   ^
base58/base58.c:155:34: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  155 |         size = (binsz - zcount) * 138 / 100 + 1;
      |                                         ^
base58/base58.c:163:13: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  163 |                         carry += 256 * buf[j];
      |                                  ^
base58/base58.c:164:21: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  164 |                         buf[j] = carry % 58;
      |                                          ^
base58/base58.c:165:13: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  165 |                         carry /= 58;
      |                                  ^
base58/base58.c:173:39: warning: statement should be inside braces [readability-braces-around-statements]
  173 |         for (j = 0; j < size && !buf[j]; ++j);
      |                                              ^
      |                                               {
base58/base58.c:181:13: warning: statement should be inside braces [readability-braces-around-statements]
  181 |         if (zcount)
      |                    ^
      |                     {
  182 |                 memset(b58, '1', zcount);
      |                                          
base58/base58.c:183:38: warning: statement should be inside braces [readability-braces-around-statements]
  183 |         for (i = zcount; j < size; ++i, ++j)
      |                                             ^
      |                                              {
  184 |                 b58[i] = b58digits_ordered[buf[j]];
      |                                                    
base58/base58.c:195:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  195 |         size_t i, j, high, zcount = 0;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
base58/base58.c:195:9: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  195 |         size_t i, j, high, zcount = 0;
      |                ^
base58/base58.c:195:12: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
  195 |         size_t i, j, high, zcount = 0;
      |                   ^
base58/base58.c:198:40: warning: statement should be inside braces [readability-braces-around-statements]
  198 |         while (zcount < binsz && !bin[zcount])
      |                                               ^
      |                                                {
  199 |                 ++zcount;
      |                          
base58/base58.c:201:28: warning: 138 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  201 |         size = (binsz - zcount) * 138 / 100 + 1;
      |                                   ^
base58/base58.c:201:34: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  201 |         size = (binsz - zcount) * 138 / 100 + 1;
      |                                         ^
base58/base58.c:209:13: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  209 |                         carry += 256 * buf[j];
      |                                  ^
base58/base58.c:210:21: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  210 |                         buf[j] = carry % 58;
      |                                          ^
base58/base58.c:211:13: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  211 |                         carry /= 58;
      |                                  ^
base58/base58.c:219:39: warning: statement should be inside braces [readability-braces-around-statements]
  219 |         for (j = 0; j < size && !buf[j]; ++j);
      |                                              ^
      |                                               {
base58/base58.c:227:13: warning: statement should be inside braces [readability-braces-around-statements]
  227 |         if (zcount)
      |                    ^
      |                     {
  228 |                 memset(b58, buffer[0], zcount);
      |                                                
base58/base58.c:229:38: warning: statement should be inside braces [readability-braces-around-statements]
  229 |         for (i = zcount; j < size; ++i, ++j)
      |                                             ^
      |                                              {
  230 |                 b58[i] = buffer[buf[j]];
      |                                         
base58/base58.c:240:27: warning: 0x20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  240 |         uint8_t buf[1 + datasz + 0x20];
      |                                  ^
base58/libbase58.h:14:12: warning: function 'b58check' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
   14 | extern int b58check(const void *bin, size_t binsz, const char *b58, size_t b58sz);
      |            ^
base58/base58.c:122:5: note: the definition seen here
  122 | int b58check(const void *bin, size_t binsz, const char *base58str, size_t b58sz)
      |     ^
base58/libbase58.h:14:12: note: differing parameters are named here: ('b58'), in definition: ('base58str')
   14 | extern int b58check(const void *bin, size_t binsz, const char *b58, size_t b58sz);
      |            ^                                                   ~~~
      |                                                                base58str
base58/libbase58.h:16:13: warning: function 'b58enc_custom' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
   16 | extern bool b58enc_custom(char *b58, size_t *b58sz, const void *bin, size_t binsz,char* buffer);
      |             ^
base58/base58.c:191:6: note: the definition seen here
  191 | bool b58enc_custom(char *b58, size_t *b58sz, const void *data, size_t binsz,char *buffer)
      |      ^
base58/libbase58.h:16:13: note: differing parameters are named here: ('bin'), in definition: ('data')
   16 | extern bool b58enc_custom(char *b58, size_t *b58sz, const void *bin, size_t binsz,char* buffer);
      |             ^                                                   ~~~
      |                                                                 data
base58/libbase58.h:17:13: warning: function 'b58enc' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
   17 | extern bool b58enc(char *b58, size_t *b58sz, const void *bin, size_t binsz);
      |             ^
base58/base58.c:145:6: note: the definition seen here
  145 | bool b58enc(char *b58, size_t *b58sz, const void *data, size_t binsz)
      |      ^
base58/libbase58.h:17:13: note: differing parameters are named here: ('bin'), in definition: ('data')
   17 | extern bool b58enc(char *b58, size_t *b58sz, const void *bin, size_t binsz);
      |             ^                                            ~~~
      |                                                          data
67 warnings generated.
Suppressed 12 warnings (12 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
clang-tidy-18 -checks=-*,readability-*,misc-unused-*,clang-analyzer-deadcode.* -p=. /home/engine/project/albertobsd-keyhunt/keyhunt.cpp
error: no such file or directory: 'Int.o' [clang-diagnostic-error]
error: no such file or directory: 'IntGroup.o' [clang-diagnostic-error]
error: no such file or directory: 'IntMod.o' [clang-diagnostic-error]
error: no such file or directory: 'Point.o' [clang-diagnostic-error]
error: no such file or directory: 'Random.o' [clang-diagnostic-error]
error: no such file or directory: 'SECP256K1.o' [clang-diagnostic-error]
error: no such file or directory: 'base58.o' [clang-diagnostic-error]
error: no such file or directory: 'bloom.o' [clang-diagnostic-error]
error: no such file or directory: 'gpu_backend.o' [clang-diagnostic-error]
error: no such file or directory: 'keccak.o' [clang-diagnostic-error]
error: no such file or directory: 'oldbloom.o' [clang-diagnostic-error]
error: no such file or directory: 'rmd160.o' [clang-diagnostic-error]
error: no such file or directory: 'sha3.o' [clang-diagnostic-error]
error: no such file or directory: 'util.o' [clang-diagnostic-error]
error: no such file or directory: 'xxhash.o' [clang-diagnostic-error]
keyhunt.cpp:63:30: warning: 1048576 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   63 | uint32_t  THREADBPWORKLOAD = 1048576;
      |                              ^
keyhunt.cpp:66:12: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   66 |         char data[32];
      |                   ^
keyhunt.cpp:67:14: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   67 |         char backup[32];
      |                     ^
keyhunt.cpp:71:16: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   71 |         uint8_t value[6];
      |                       ^
keyhunt.cpp:76:16: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
   76 |         uint8_t value[20];
      |                       ^
keyhunt.cpp:110:17: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  110 |                 uint8_t data8[32];
      |                               ^
keyhunt.cpp:111:19: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  111 |                 uint32_t data32[8];
      |                                 ^
keyhunt.cpp:136:20: warning: variable name 'Gn' is too short, expected at least 3 characters [readability-identifier-length]
  136 | std::vector<Point> Gn;
      |                    ^
keyhunt.cpp:148:46: warning: parameter name 'N' is too short, expected at least 3 characters [readability-identifier-length]
  148 | void _sort(struct address_value *arr,int64_t N);
      |                                              ^
keyhunt.cpp:151:34: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  151 | void _swap(struct address_value *a,struct address_value *b);
      |                                  ^
keyhunt.cpp:151:58: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  151 | void _swap(struct address_value *a,struct address_value *b);
      |                                                          ^
keyhunt.cpp:154:61: warning: parameter name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  154 | void _heapify(struct address_value *arr, int64_t n, int64_t i);
      |                                                             ^
keyhunt.cpp:160:36: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  160 | void bsgs_swap(struct bsgs_xvalue *a,struct bsgs_xvalue *b);
      |                                    ^
keyhunt.cpp:160:58: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
  160 | void bsgs_swap(struct bsgs_xvalue *a,struct bsgs_xvalue *b);
      |                                                          ^
keyhunt.cpp:161:63: warning: parameter name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  161 | void bsgs_heapify(struct bsgs_xvalue *arr, int64_t n, int64_t i);
      |                                                               ^
keyhunt.cpp:164:5: warning: function 'bsgs_searchbinary' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
  164 | int bsgs_searchbinary(struct bsgs_xvalue *arr,char *data,int64_t array_length,uint64_t *r_value);
      |     ^
keyhunt.cpp:3905:5: note: the definition seen here
 3905 | int bsgs_searchbinary(struct bsgs_xvalue *buffer,char *data,int64_t array_length,uint64_t *r_value) {
      |     ^
keyhunt.cpp:164:5: note: differing parameters are named here: ('arr'), in definition: ('buffer')
  164 | int bsgs_searchbinary(struct bsgs_xvalue *arr,char *data,int64_t array_length,uint64_t *r_value);
      |     ^                                     ~~~
      |                                           buffer
keyhunt.cpp:165:48: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  165 | int bsgs_secondcheck(Int *start_range,uint32_t a,uint32_t k_index,Int *privatekey);
      |                                                ^
keyhunt.cpp:166:47: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  166 | int bsgs_thirdcheck(Int *start_range,uint32_t a,uint32_t k_index,Int *privatekey);
      |                                               ^
keyhunt.cpp:174:39: warning: parameter name 'A' is too short, expected at least 3 characters [readability-identifier-length]
  174 | int minimum_same_bytes(unsigned char* A,unsigned char* B, int length);
      |                                       ^
keyhunt.cpp:174:56: warning: parameter name 'B' is too short, expected at least 3 characters [readability-identifier-length]
  174 | int minimum_same_bytes(unsigned char* A,unsigned char* B, int length);
      |                                                        ^
keyhunt.cpp:181:20: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  181 | bool isBase58(char c);
      |                    ^
keyhunt.cpp:195:25: warning: parameter name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  195 | void calcualteindex(int i,Int *key);
      |                         ^
keyhunt.cpp:234:24: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  234 | const char *bsgs_modes[5] = {"sequential","backward","both","random","dance"};
      |                        ^
keyhunt.cpp:235:19: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  235 | const char *modes[7] = {"xpoint","address","bsgs","rmd160","pub2rmd","minikeys","vanity"};
      |                   ^
keyhunt.cpp:268:45: warning: 999999 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  268 | int vanity_rmd_minimun_bytes_check_length = 999999;
      |                                             ^
keyhunt.cpp:276:10: warning: variable name 'N' is too short, expected at least 3 characters [readability-identifier-length]
  276 | uint64_t N = 0;
      |          ^
keyhunt.cpp:278:29: warning: 0x100000000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  278 | uint64_t N_SEQUENTIAL_MAX = 0x100000000;
      |                             ^
keyhunt.cpp:279:23: warning: 0x400 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  279 | uint64_t DEBUGCOUNT = 0x400;
      |                       ^
keyhunt.cpp:325:28: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  325 | uint64_t BSGS_XVALUE_RAM = 6;
      |                            ^
keyhunt.cpp:326:36: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  326 | uint64_t BSGS_BUFFERXPOINTLENGTH = 32;
      |                                    ^
keyhunt.cpp:327:38: warning: 36 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  327 | uint64_t BSGS_BUFFERREGISTERLENGTH = 36;
      |                                      ^
keyhunt.cpp:337:15: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  337 | char checksum[32],checksum_backup[32];
      |               ^
keyhunt.cpp:337:35: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  337 | char checksum[32],checksum_backup[32];
      |                                   ^
keyhunt.cpp:338:24: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  338 | char buffer_bloom_file[1024];
      |                        ^
keyhunt.cpp:368:19: warning: 4194304 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  368 | uint64_t bsgs_m = 4194304;
      |                   ^
keyhunt.cpp:374:32: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  374 | const char *str_limits_prefixs[7] = {"Mkeys/s","Gkeys/s","Tkeys/s","Pkeys/s","Ekeys/s","Zkeys/s","Ykeys/s"};
      |                                ^
keyhunt.cpp:375:24: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  375 | const char *str_limits[7] = {"1000000","1000000000","1000000000000","1000000000000000","1000000000000000000","1000000000000000000000","1000000000000000000000000"};
      |                        ^
keyhunt.cpp:376:16: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  376 | Int int_limits[7];
      |                ^
keyhunt.cpp:429:5: warning: function 'main' has cognitive complexity of 907 (threshold 25) [readability-function-cognitive-complexity]
  429 | int main(int argc, char **argv) {
      |     ^
keyhunt.cpp:432:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  432 |         if(env_batch != NULL) {
      |         ^
keyhunt.cpp:434:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  434 |                 if(custom_batch >= MIN_GPU_BATCH_SIZE && custom_batch <= MAX_GPU_BATCH_SIZE) {
      |                 ^
keyhunt.cpp:434:41: note: +1
  434 |                 if(custom_batch >= MIN_GPU_BATCH_SIZE && custom_batch <= MAX_GPU_BATCH_SIZE) {
      |                                                       ^
keyhunt.cpp:437:5: note: +1, nesting level increased to 2
  437 |                 } else {
      |                   ^
keyhunt.cpp:440:4: note: +1, nesting level increased to 1
  440 |         } else {
      |           ^
keyhunt.cpp:499:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  499 |         if(bytes_read > 0)      {
      |         ^
keyhunt.cpp:506:2: note: +1, nesting level increased to 1
  506 |         else    {
      |         ^
keyhunt.cpp:521:1: note: +1, including nesting penalty of 0, nesting level increased to 1
  521 | while ((c = getopt(argc, argv, "deh6MgqRSB:b:c:C:E:f:I:k:l:m:N:n:p:r:s:t:v:G:8:z:")) != -1) {
      | ^
keyhunt.cpp:522:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  522 |                 switch(c) {
      |                 ^
keyhunt.cpp:536:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  536 |                                 if(index_value >= 0 && index_value <= 4)        {
      |                                 ^
keyhunt.cpp:536:25: note: +1
  536 |                                 if(index_value >= 0 && index_value <= 4)        {
      |                                                     ^
keyhunt.cpp:540:5: note: +1, nesting level increased to 3
  540 |                                 else    {
      |                                 ^
keyhunt.cpp:546:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  546 |                                 if(bitrange > 0 && bitrange <=256 )     {
      |                                 ^
keyhunt.cpp:546:21: note: +1
  546 |                                 if(bitrange > 0 && bitrange <=256 )     {
      |                                                 ^
keyhunt.cpp:553:6: note: +4, including nesting penalty of 3, nesting level increased to 4
  553 |                                         if(MPZAUX.IsGreater(&secp->order))      {
      |                                         ^
keyhunt.cpp:560:5: note: +1, nesting level increased to 3
  560 |                                 else    {
      |                                 ^
keyhunt.cpp:566:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  566 |                                 switch(index_value) {
      |                                 ^
keyhunt.cpp:587:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  587 |                                 if(strlen(optarg) == 22)        {
      |                                 ^
keyhunt.cpp:594:6: note: +4, including nesting penalty of 3, nesting level increased to 4
  594 |                                         for(i = 0; i< 21; i++)  {
      |                                         ^
keyhunt.cpp:595:7: note: +5, including nesting penalty of 4, nesting level increased to 5
  595 |                                                 if(strchr(Ccoinbuffer,str_baseminikey[i+1]) != NULL)    {
      |                                                 ^
keyhunt.cpp:598:7: note: +1, nesting level increased to 5
  598 |                                                 else    {
      |                                                 ^
keyhunt.cpp:605:5: note: +1, nesting level increased to 3
  605 |                                 else    {
      |                                 ^
keyhunt.cpp:633:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  633 |                                 if(KFACTOR <= 0)        {
      |                                 ^
keyhunt.cpp:640:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  640 |                                 switch(indexOf(optarg,publicsearch,3)) {
      |                                 ^
keyhunt.cpp:660:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  660 |                                 switch(indexOf(optarg,modes,7)) {
      |                                 ^
keyhunt.cpp:690:7: note: +4, including nesting penalty of 3, nesting level increased to 4
  690 |                                                 if(vanity_bloom == NULL){
      |                                                 ^
keyhunt.cpp:715:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  715 |                                 if(optarg != NULL)      {
      |                                 ^
keyhunt.cpp:717:6: note: +4, including nesting penalty of 3, nesting level increased to 4
  717 |                                         switch(t.n)     {
      |                                         ^
keyhunt.cpp:720:8: note: +5, including nesting penalty of 4, nesting level increased to 5
  720 |                                                         if(isValidHex(range_start)) {
      |                                                         ^
keyhunt.cpp:724:8: note: +1, nesting level increased to 5
  724 |                                                         else    {
      |                                                         ^
keyhunt.cpp:731:8: note: +5, including nesting penalty of 4, nesting level increased to 5
  731 |                                                         if(isValidHex(range_start) && isValidHex(range_end)) {
      |                                                         ^
keyhunt.cpp:731:35: note: +1
  731 |                                                         if(isValidHex(range_start) && isValidHex(range_end)) {
      |                                                                                    ^
keyhunt.cpp:734:8: note: +1, nesting level increased to 5
  734 |                                                         else    {
      |                                                         ^
keyhunt.cpp:735:9: note: +6, including nesting penalty of 5, nesting level increased to 6
  735 |                                                                 if(isValidHex(range_start)) {
      |                                                                 ^
keyhunt.cpp:738:9: note: +1, nesting level increased to 6
  738 |                                                                 else    {
      |                                                                 ^
keyhunt.cpp:751:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  751 |                                 if(OUTPUTSECONDS.IsLower(&ZERO))        {
      |                                 ^
keyhunt.cpp:754:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  754 |                                 if(OUTPUTSECONDS.IsZero())      {
      |                                 ^
keyhunt.cpp:757:5: note: +1, nesting level increased to 3
  757 |                                 else    {
      |                                 ^
keyhunt.cpp:768:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  768 |                                 if(NTHREADS <= 0)       {
      |                                 ^
keyhunt.cpp:771:27: note: +3, including nesting penalty of 2, nesting level increased to 3
  771 |                                 printf((NTHREADS > 1) ? "[+] Threads : %u\n": "[+] Thread : %u\n",NTHREADS);
      |                                                       ^
keyhunt.cpp:775:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  775 |                                 if(vanity_bloom == NULL){
      |                                 ^
keyhunt.cpp:779:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  779 |                                 if(isValidBase58String(optarg)) {
      |                                 ^
keyhunt.cpp:780:6: note: +4, including nesting penalty of 3, nesting level increased to 4
  780 |                                         if(addvanity(optarg) > 0)       {
      |                                         ^
keyhunt.cpp:783:6: note: +1, nesting level increased to 4
  783 |                                         else    {
      |                                         ^
keyhunt.cpp:787:5: note: +1, nesting level increased to 3
  787 |                                 else {
      |                                 ^
keyhunt.cpp:793:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  793 |                                 if(strlen(optarg) == 58)        {
      |                                 ^
keyhunt.cpp:797:5: note: +1, nesting level increased to 3
  797 |                                 else    {
      |                                 ^
keyhunt.cpp:804:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  804 |                                 if(FLAGBLOOMMULTIPLIER <= 0)    {
      |                                 ^
keyhunt.cpp:816:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  816 |         if(  FLAGBSGSMODE == MODE_BSGS && FLAGENDOMORPHISM)     {
      |         ^
keyhunt.cpp:816:33: note: +1
  816 |         if(  FLAGBSGSMODE == MODE_BSGS && FLAGENDOMORPHISM)     {
      |                                        ^
keyhunt.cpp:822:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  822 |         if(  FLAGBSGSMODE == MODE_BSGS  && FLAGSTRIDE)  {
      |         ^
keyhunt.cpp:822:34: note: +1
  822 |         if(  FLAGBSGSMODE == MODE_BSGS  && FLAGSTRIDE)  {
      |                                         ^
keyhunt.cpp:826:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  826 |         if(FLAGSTRIDE)  {
      |         ^
keyhunt.cpp:827:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  827 |                 if(str_stride[0] == '0' && str_stride[1] == 'x')        {
      |                 ^
keyhunt.cpp:827:27: note: +1
  827 |                 if(str_stride[0] == '0' && str_stride[1] == 'x')        {
      |                                         ^
keyhunt.cpp:830:3: note: +1, nesting level increased to 2
  830 |                 else{
      |                 ^
keyhunt.cpp:835:2: note: +1, nesting level increased to 1
  835 |         else    {
      |         ^
keyhunt.cpp:840:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  840 |         if(FLAGMODE == MODE_BSGS )      {
      |         ^
keyhunt.cpp:844:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  844 |         if(FLAGFILE == 0) {
      |         ^
keyhunt.cpp:849:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  849 |         if (FLAGGPU) {
      |         ^
keyhunt.cpp:850:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  850 |                 if (!GPU_IsAvailable()) {
      |                 ^
keyhunt.cpp:853:5: note: +1, nesting level increased to 2
  853 |                 } else {
      |                   ^
keyhunt.cpp:859:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  859 |         if(FLAGMODE == MODE_ADDRESS && FLAGCRYPTO == CRYPTO_NONE) {     //When none crypto is defined the default search is for Bitcoin
      |         ^
keyhunt.cpp:859:30: note: +1
  859 |         if(FLAGMODE == MODE_ADDRESS && FLAGCRYPTO == CRYPTO_NONE) {     //When none crypto is defined the default search is for Bitcoin
      |                                     ^
keyhunt.cpp:863:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  863 |         if(FLAGRANGE) {
      |         ^
keyhunt.cpp:865:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  865 |                 if(n_range_start.IsZero())      {
      |                 ^
keyhunt.cpp:869:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  869 |                 if(n_range_start.IsEqual(&n_range_end) == false ) {
      |                 ^
keyhunt.cpp:870:4: note: +3, including nesting penalty of 2, nesting level increased to 3
  870 |                         if(  n_range_start.IsLower(&secp->order) &&  n_range_end.IsLowerOrEqual(&secp->order) ) {
      |                         ^
keyhunt.cpp:870:45: note: +1
  870 |                         if(  n_range_start.IsLower(&secp->order) &&  n_range_end.IsLowerOrEqual(&secp->order) ) {
      |                                                                  ^
keyhunt.cpp:871:5: note: +4, including nesting penalty of 3, nesting level increased to 4
  871 |                                 if( n_range_start.IsGreater(&n_range_end)) {
      |                                 ^
keyhunt.cpp:880:4: note: +1, nesting level increased to 3
  880 |                         else    {
      |                         ^
keyhunt.cpp:885:3: note: +1, nesting level increased to 2
  885 |                 else    {
      |                 ^
keyhunt.cpp:890:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  890 |         if(FLAGMODE != MODE_BSGS && FLAGMODE != MODE_MINIKEYS)  {
      |         ^
keyhunt.cpp:890:27: note: +1
  890 |         if(FLAGMODE != MODE_BSGS && FLAGMODE != MODE_MINIKEYS)  {
      |                                  ^
keyhunt.cpp:892:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  892 |                 if(FLAGRANGE == 0 && FLAGBITRANGE == 0) {
      |                 ^
keyhunt.cpp:892:21: note: +1
  892 |                 if(FLAGRANGE == 0 && FLAGBITRANGE == 0) {
      |                                   ^
keyhunt.cpp:898:3: note: +1, nesting level increased to 2
  898 |                 else    {
      |                 ^
keyhunt.cpp:899:4: note: +3, including nesting penalty of 2, nesting level increased to 3
  899 |                         if(FLAGBITRANGE)        {
      |                         ^
keyhunt.cpp:905:4: note: +1, nesting level increased to 3
  905 |                         else    {
      |                         ^
keyhunt.cpp:906:5: note: +4, including nesting penalty of 3, nesting level increased to 4
  906 |                                 if(FLAGRANGE == 0)      {
      |                                 ^
keyhunt.cpp:914:2: note: +1, including nesting penalty of 0, nesting level increased to 1
  914 |         if(FLAGMODE != MODE_BSGS )      {
      |         ^
keyhunt.cpp:915:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  915 |                 if(FLAG_N){
      |                 ^
keyhunt.cpp:916:4: note: +3, including nesting penalty of 2, nesting level increased to 3
  916 |                         if(str_N[0] == '0' && str_N[1] == 'x')  {
      |                         ^
keyhunt.cpp:916:23: note: +1
  916 |                         if(str_N[0] == '0' && str_N[1] == 'x')  {
      |                                            ^
keyhunt.cpp:919:4: note: +1, nesting level increased to 3
  919 |                         else    {
      |                         ^
keyhunt.cpp:923:4: note: +3, including nesting penalty of 2, nesting level increased to 3
  923 |                         if(N_SEQUENTIAL_MAX < 1024)     {
      |                         ^
keyhunt.cpp:928:4: note: +3, including nesting penalty of 2, nesting level increased to 3
  928 |                         if(N_SEQUENTIAL_MAX % 1024 != 0)        {
      |                         ^
keyhunt.cpp:935:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  935 |                 if(FLAGMODE == MODE_MINIKEYS)   {
      |                 ^
keyhunt.cpp:937:4: note: +3, including nesting penalty of 2, nesting level increased to 3
  937 |                         if(FLAGBASEMINIKEY)     {
      |                         ^
keyhunt.cpp:949:4: note: +3, including nesting penalty of 2, nesting level increased to 3
  949 |                         do      {
      |                         ^
keyhunt.cpp:950:5: note: +4, including nesting penalty of 3, nesting level increased to 4
  950 |                                 if(!int_aux.IsZero())   {
      |                                 ^
keyhunt.cpp:960:5: note: +1, nesting level increased to 4
  960 |                                 else    {
      |                                 ^
keyhunt.cpp:963:18: note: +1
  963 |                         }while(!salir && i > 0);
      |                                       ^
keyhunt.cpp:966:3: note: +1, nesting level increased to 2
  966 |                 else    {
      |                 ^
keyhunt.cpp:967:4: note: +3, including nesting penalty of 2, nesting level increased to 3
  967 |                         if(FLAGBITRANGE)        {       // Bit Range
      |                         ^
keyhunt.cpp:970:4: note: +1, nesting level increased to 3
  970 |                         else    {
      |                         ^
keyhunt.cpp:974:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  974 |                 if(FLAGMODE != MODE_MINIKEYS)   {
      |                 ^
keyhunt.cpp:983:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  983 |                 switch(FLAGMODE)        {
      |                 ^
keyhunt.cpp:988:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  988 |                                 if(!readFileAddress(fileName))  {
      |                                 ^
keyhunt.cpp:994:5: note: +3, including nesting penalty of 2, nesting level increased to 3
  994 |                                 if(!readFileVanity(fileName))   {
      |                                 ^
keyhunt.cpp:1001:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1001 |                 if(FLAGMODE != MODE_VANITY && !FLAGREADEDFILE1) {
      |                 ^
keyhunt.cpp:1001:30: note: +1
 1001 |                 if(FLAGMODE != MODE_VANITY && !FLAGREADEDFILE1) {
      |                                            ^
keyhunt.cpp:1009:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 1009 |         if(FLAGMODE == MODE_BSGS )      {
      |         ^
keyhunt.cpp:1012:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1012 |                 if(fd == NULL)  {
      |                 ^
keyhunt.cpp:1018:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1018 |                 while(!feof(fd))        {
      |                 ^
keyhunt.cpp:1019:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1019 |                         if(fgets(aux,1022,fd) == aux)   {
      |                         ^
keyhunt.cpp:1021:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1021 |                                 if(strlen(aux) >= 128)  {       //Length of a full address in hexadecimal without 04
      |                                 ^
keyhunt.cpp:1023:6: note: +1, nesting level increased to 4
 1023 |                                 }else   {
      |                                  ^
keyhunt.cpp:1024:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1024 |                                         if(strlen(aux) >= 66)   {
      |                                         ^
keyhunt.cpp:1030:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1030 |                 if(N == 0)      {
      |                 ^
keyhunt.cpp:1045:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1045 |                 while(!feof(fd))        {
      |                 ^
keyhunt.cpp:1046:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1046 |                         if(fgets(aux,1022,fd) == aux)   {
      |                         ^
keyhunt.cpp:1048:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1048 |                                 if(strlen(aux) >= 66)   {
      |                                 ^
keyhunt.cpp:1053:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1053 |                                         switch(strlen(aux2))    {
      |                                         ^
keyhunt.cpp:1056:8: note: +6, including nesting penalty of 5, nesting level increased to 6
 1056 |                                                         if(secp->ParsePublicKeyHex(aux2,OriginalPointsBSGS[i],OriginalPointsBSGScompressed[i])) {
      |                                                         ^
keyhunt.cpp:1059:8: note: +1, nesting level increased to 6
 1059 |                                                         else    {
      |                                                         ^
keyhunt.cpp:1066:8: note: +6, including nesting penalty of 5, nesting level increased to 6
 1066 |                                                         if(secp->ParsePublicKeyHex(aux2,OriginalPointsBSGS[i],OriginalPointsBSGScompressed[i])) {
      |                                                         ^
keyhunt.cpp:1069:8: note: +1, nesting level increased to 6
 1069 |                                                         else    {
      |                                                         ^
keyhunt.cpp:1085:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1085 |                 if(bsgs_point_number > 0)       {
      |                 ^
keyhunt.cpp:1088:3: note: +1, nesting level increased to 2
 1088 |                 else    {
      |                 ^
keyhunt.cpp:1099:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1099 |                 if(FLAG_N)      {       //Custom N by the -n param
      |                 ^
keyhunt.cpp:1104:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1104 |                         if(str_N[0] == '0' && str_N[1] == 'x' ) {       /*We expected a hexadecimal value after 0x  -> str_N +2 */
      |                         ^
keyhunt.cpp:1104:23: note: +1
 1104 |                         if(str_N[0] == '0' && str_N[1] == 'x' ) {       /*We expected a hexadecimal value after 0x  -> str_N +2 */
      |                                            ^
keyhunt.cpp:1107:4: note: +1, nesting level increased to 3
 1107 |                         else    {
      |                         ^
keyhunt.cpp:1112:3: note: +1, nesting level increased to 2
 1112 |                 else    {       //Default N
      |                 ^
keyhunt.cpp:1116:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1116 |                 if(BSGS_N.HasSqrt())    {       //If the root is exact
      |                 ^
keyhunt.cpp:1120:3: note: +1, nesting level increased to 2
 1120 |                 else    {
      |                 ^
keyhunt.cpp:1128:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1128 |                 if(!BSGS_AUX.IsZero()){ //If M is not divisible by  BSGS_GROUP_SIZE (1024) 
      |                 ^
keyhunt.cpp:1136:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1136 |                 if(FLAGRANGE || FLAGBITRANGE)   {
      |                 ^
keyhunt.cpp:1136:16: note: +1
 1136 |                 if(FLAGRANGE || FLAGBITRANGE)   {
      |                              ^
keyhunt.cpp:1137:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1137 |                         if(FLAGBITRANGE)        {       // Bit Range
      |                         ^
keyhunt.cpp:1147:4: note: +1, nesting level increased to 3
 1147 |                         else    {
      |                         ^
keyhunt.cpp:1153:3: note: +1, nesting level increased to 2
 1153 |                 else    {       //Random start
      |                 ^
keyhunt.cpp:1163:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1163 |                 if(n_range_diff.IsLower(&BSGS_N) )      {
      |                 ^
keyhunt.cpp:1183:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1183 |                 if(!BSGS_R.IsZero())    { /* If BSGS_M modulo 32 is not 0*/
      |                 ^
keyhunt.cpp:1200:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1200 |                 if(!BSGS_R.IsZero())    { /* If BSGS_M2 modulo 32 is not 0*/
      |                 ^
keyhunt.cpp:1216:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1216 |                 if(!BSGS_R.IsZero())    { /* if BSGS_N modulo BSGS_M is not 0*/
      |                 ^
keyhunt.cpp:1232:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1232 |                 if(((uint64_t)(bsgs_m/256)) > 10000)    {
      |                 ^
keyhunt.cpp:1234:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1234 |                         if(bsgs_m % 256 != 0 )  {
      |                         ^
keyhunt.cpp:1238:3: note: +1, nesting level increased to 2
 1238 |                 else{
      |                 ^
keyhunt.cpp:1242:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1242 |                 if(((uint64_t)(bsgs_m2/256)) > 1000)    {
      |                 ^
keyhunt.cpp:1244:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1244 |                         if(bsgs_m2 % 256 != 0)  {
      |                         ^
keyhunt.cpp:1248:3: note: +1, nesting level increased to 2
 1248 |                 else    {
      |                 ^
keyhunt.cpp:1252:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1252 |                 if(((uint64_t)(bsgs_m3/256)) > 1000)    {
      |                 ^
keyhunt.cpp:1254:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1254 |                         if(bsgs_m3 % 256 != 0 ) {
      |                         ^
keyhunt.cpp:1258:3: note: +1, nesting level increased to 2
 1258 |                 else    {
      |                 ^
keyhunt.cpp:1279:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1279 |                 for(i=0; i< 256; i++)   {
      |                 ^
keyhunt.cpp:1285:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1285 |                         if(bloom_init2(&bloom_bP[i],itemsbloom,0.000001)        == 1){
      |                         ^
keyhunt.cpp:1308:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1308 |                 for(i=0; i< 256; i++)   {
      |                 ^
keyhunt.cpp:1314:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1314 |                         if(bloom_init2(&bloom_bPx2nd[i],itemsbloom2,0.000001)   == 1){
      |                         ^
keyhunt.cpp:1337:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1337 |                 for(i=0; i< 256; i++)   {
      |                 ^
keyhunt.cpp:1343:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1343 |                         if(bloom_init2(&bloom_bPx3rd[i],itemsbloom3,0.000001)   == 1){
      |                         ^
keyhunt.cpp:1379:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1379 |                 for(int i = 2; i < CPU_GRP_SIZE / 2; i++) {
      |                 ^
keyhunt.cpp:1395:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1395 |                 for(i = 1; i < 32; i++) {
      |                 ^
keyhunt.cpp:1408:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1408 |                 for(i = 1; i < 32; i++) {
      |                 ^
keyhunt.cpp:1420:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1420 |                 if(FLAGSAVEREADFILE)    {
      |                 ^
keyhunt.cpp:1425:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1425 |                         if(fd_aux1 != NULL)     {
      |                         ^
keyhunt.cpp:1428:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1428 |                                 for(i = 0; i < 256;i++) {
      |                                 ^
keyhunt.cpp:1431:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1431 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:1437:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1437 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:1442:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1442 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:1446:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1446 |                                         if(FLAGSKIPCHECKSUM == 0)       {
      |                                         ^
keyhunt.cpp:1448:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1448 |                                                 if(memcmp(bloom_bP_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bP_checksums[i].backup,rawvalue,32) != 0 )       {       /* Verification */
      |                                                 ^
keyhunt.cpp:1448:62: note: +1
 1448 |                                                 if(memcmp(bloom_bP_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bP_checksums[i].backup,rawvalue,32) != 0 )       {       /* Verification */
      |                                                                                                        ^
keyhunt.cpp:1453:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1453 |                                         if(i % 64 == 0 )        {
      |                                         ^
keyhunt.cpp:1463:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1463 |                                 if(fd_aux1 != NULL)     {
      |                                 ^
keyhunt.cpp:1469:4: note: +1, nesting level increased to 3
 1469 |                         else    {       /*Checking for old file    keyhunt_bsgs_3_   */
      |                         ^
keyhunt.cpp:1472:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1472 |                                 if(fd_aux1 != NULL)     {
      |                                 ^
keyhunt.cpp:1475:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1475 |                                         for(i = 0; i < 256;i++) {
      |                                         ^
keyhunt.cpp:1486:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1486 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:1494:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1494 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:1501:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1501 |                                                 if(FLAGSKIPCHECKSUM == 0)       {
      |                                                 ^
keyhunt.cpp:1503:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 1503 |                                                         if(memcmp(bloom_bP_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bP_checksums[i].backup,rawvalue,32) != 0 )       {       /* Verification */
      |                                                         ^
keyhunt.cpp:1503:63: note: +1
 1503 |                                                         if(memcmp(bloom_bP_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bP_checksums[i].backup,rawvalue,32) != 0 )       {       /* Verification */
      |                                                                                                                ^
keyhunt.cpp:1508:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1508 |                                                 if(i % 32 == 0 )        {
      |                                                 ^
keyhunt.cpp:1519:5: note: +1, nesting level increased to 4
 1519 |                                 else    {
      |                                 ^
keyhunt.cpp:1528:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1528 |                         if(fd_aux2 != NULL)     {
      |                         ^
keyhunt.cpp:1531:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1531 |                                 for(i = 0; i < 256;i++) {
      |                                 ^
keyhunt.cpp:1534:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1534 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:1540:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1540 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:1545:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1545 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:1550:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1550 |                                         if(FLAGSKIPCHECKSUM == 0)       {                                                               
      |                                         ^
keyhunt.cpp:1552:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1552 |                                                 if(memcmp(bloom_bPx2nd_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bPx2nd_checksums[i].backup,rawvalue,32) != 0 )       {               /* Verification */
      |                                                 ^
keyhunt.cpp:1552:66: note: +1
 1552 |                                                 if(memcmp(bloom_bPx2nd_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bPx2nd_checksums[i].backup,rawvalue,32) != 0 )       {               /* Verification */
      |                                                                                                            ^
keyhunt.cpp:1557:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1557 |                                         if(i % 64 == 0) {
      |                                         ^
keyhunt.cpp:1567:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1567 |                                 if(fd_aux2 != NULL)     {
      |                                 ^
keyhunt.cpp:1574:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1574 |                                 if(fd_aux2 != NULL)     {
      |                                 ^
keyhunt.cpp:1580:4: note: +1, nesting level increased to 3
 1580 |                         else    {       
      |                         ^
keyhunt.cpp:1587:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1587 |                         if(fd_aux3 != NULL)     {
      |                         ^
keyhunt.cpp:1591:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1591 |                                 if(rsize != 1)  {
      |                                 ^
keyhunt.cpp:1596:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1596 |                                 if(rsize != 1)  {
      |                                 ^
keyhunt.cpp:1600:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1600 |                                 if(FLAGSKIPCHECKSUM == 0)       {
      |                                 ^
keyhunt.cpp:1602:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1602 |                                         if(memcmp(checksum,checksum_backup,32) != 0)    {
      |                                         ^
keyhunt.cpp:1611:4: note: +1, nesting level increased to 3
 1611 |                         else    {
      |                         ^
keyhunt.cpp:1618:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1618 |                         if(fd_aux2 != NULL)     {
      |                         ^
keyhunt.cpp:1621:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1621 |                                 for(i = 0; i < 256;i++) {
      |                                 ^
keyhunt.cpp:1624:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1624 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:1630:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1630 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:1635:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1635 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:1640:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1640 |                                         if(FLAGSKIPCHECKSUM == 0)       {                                                       
      |                                         ^
keyhunt.cpp:1642:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1642 |                                                 if(memcmp(bloom_bPx3rd_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bPx3rd_checksums[i].backup,rawvalue,32) != 0 )       {               /* Verification */
      |                                                 ^
keyhunt.cpp:1642:66: note: +1
 1642 |                                                 if(memcmp(bloom_bPx3rd_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bPx3rd_checksums[i].backup,rawvalue,32) != 0 )       {               /* Verification */
      |                                                                                                            ^
keyhunt.cpp:1647:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1647 |                                         if(i % 64 == 0) {
      |                                         ^
keyhunt.cpp:1656:4: note: +1, nesting level increased to 3
 1656 |                         else    {
      |                         ^
keyhunt.cpp:1662:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1662 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE3 || !FLAGREADEDFILE4)        {
      |                 ^
keyhunt.cpp:1662:63: note: +1
 1662 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE3 || !FLAGREADEDFILE4)        {
      |                                                                             ^
keyhunt.cpp:1663:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1663 |                         if(FLAGREADEDFILE1 == 1)        {
      |                         ^
keyhunt.cpp:1677:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1677 |                                 if(THREADBPWORKLOAD >= bsgs_m2) {
      |                                 ^
keyhunt.cpp:1682:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1682 |                                 if(PERTHREAD_R != 0)    {
      |                                 ^
keyhunt.cpp:1705:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1705 |                                 for(j = 0; j < NTHREADS; j++)   {
      |                                 ^
keyhunt.cpp:1713:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1713 |                                 do      {
      |                                 ^
keyhunt.cpp:1714:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1714 |                                         for(j = 0; j < NTHREADS && !salir; j++) {
      |                                         ^
keyhunt.cpp:1714:30: note: +1
 1714 |                                         for(j = 0; j < NTHREADS && !salir; j++) {
      |                                                                 ^
keyhunt.cpp:1716:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1716 |                                                 if(bPload_threads_available[j] && !salir)       {
      |                                                 ^
keyhunt.cpp:1716:38: note: +1
 1716 |                                                 if(bPload_threads_available[j] && !salir)       {
      |                                                                                ^
keyhunt.cpp:1721:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 1721 |                                                         if( THREADCOUNTER < THREADCYCLES-1)     {
      |                                                         ^
keyhunt.cpp:1725:8: note: +1, nesting level increased to 7
 1725 |                                                         else    {
      |                                                         ^
keyhunt.cpp:1741:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1741 |                                         if(OLDFINISHED_ITEMS != FINISHED_ITEMS) {
      |                                         ^
keyhunt.cpp:1747:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1747 |                                         for(j = 0 ; j < NTHREADS ; j++) {
      |                                         ^
keyhunt.cpp:1758:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1758 |                                                 if(finished)    {
      |                                                 ^
keyhunt.cpp:1773:4: note: +1, nesting level increased to 3
 1773 |                         else{   
      |                         ^
keyhunt.cpp:1786:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1786 |                                 if(THREADBPWORKLOAD >= bsgs_m)  {
      |                                 ^
keyhunt.cpp:1792:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1792 |                                 if(PERTHREAD_R != 0)    {
      |                                 ^
keyhunt.cpp:1818:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1818 |                                 for(j = 0; j < NTHREADS; j++)   {
      |                                 ^
keyhunt.cpp:1826:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1826 |                                 do      {
      |                                 ^
keyhunt.cpp:1827:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1827 |                                         for(j = 0; j < NTHREADS && !salir; j++) {
      |                                         ^
keyhunt.cpp:1827:30: note: +1
 1827 |                                         for(j = 0; j < NTHREADS && !salir; j++) {
      |                                                                 ^
keyhunt.cpp:1829:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1829 |                                                 if(bPload_threads_available[j] && !salir)       {
      |                                                 ^
keyhunt.cpp:1829:38: note: +1
 1829 |                                                 if(bPload_threads_available[j] && !salir)       {
      |                                                                                ^
keyhunt.cpp:1834:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 1834 |                                                         if( THREADCOUNTER < THREADCYCLES-1)     {
      |                                                         ^
keyhunt.cpp:1838:8: note: +1, nesting level increased to 7
 1838 |                                                         else    {
      |                                                         ^
keyhunt.cpp:1855:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1855 |                                         if(OLDFINISHED_ITEMS != FINISHED_ITEMS) {
      |                                         ^
keyhunt.cpp:1861:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1861 |                                         for(j = 0 ; j < NTHREADS ; j++) {
      |                                         ^
keyhunt.cpp:1872:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1872 |                                                 if(finished)    {
      |                                                 ^
keyhunt.cpp:1890:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1890 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE4)    {
      |                 ^
keyhunt.cpp:1890:43: note: +1
 1890 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE4)    {
      |                                                         ^
keyhunt.cpp:1894:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1894 |                 if(!FLAGREADEDFILE1)    {
      |                 ^
keyhunt.cpp:1895:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1895 |                         for(i = 0; i < 256 ; i++)       {
      |                         ^
keyhunt.cpp:1901:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1901 |                 if(!FLAGREADEDFILE2)    {
      |                 ^
keyhunt.cpp:1902:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1902 |                         for(i = 0; i < 256 ; i++)       {
      |                         ^
keyhunt.cpp:1908:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1908 |                 if(!FLAGREADEDFILE4)    {
      |                 ^
keyhunt.cpp:1909:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1909 |                         for(i = 0; i < 256 ; i++)       {
      |                         ^
keyhunt.cpp:1915:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1915 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE4)    {
      |                 ^
keyhunt.cpp:1915:43: note: +1
 1915 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE4)    {
      |                                                         ^
keyhunt.cpp:1919:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1919 |                 if(!FLAGREADEDFILE3)    {
      |                 ^
keyhunt.cpp:1928:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 1928 |                 if(FLAGSAVEREADFILE || FLAGUPDATEFILE1 )        {
      |                 ^
keyhunt.cpp:1928:23: note: +1
 1928 |                 if(FLAGSAVEREADFILE || FLAGUPDATEFILE1 )        {
      |                                     ^
keyhunt.cpp:1929:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1929 |                         if(!FLAGREADEDFILE1 || FLAGUPDATEFILE1) {
      |                         ^
keyhunt.cpp:1929:24: note: +1
 1929 |                         if(!FLAGREADEDFILE1 || FLAGUPDATEFILE1) {
      |                                             ^
keyhunt.cpp:1932:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1932 |                                 if(FLAGUPDATEFILE1)     {
      |                                 ^
keyhunt.cpp:1939:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1939 |                                 if(fd_aux1 != NULL)     {
      |                                 ^
keyhunt.cpp:1942:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1942 |                                         for(i = 0; i < 256;i++) {
      |                                         ^
keyhunt.cpp:1944:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1944 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:1949:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1949 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:1954:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1954 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:1958:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1958 |                                                 if(i % 64 == 0) {
      |                                                 ^
keyhunt.cpp:1966:5: note: +1, nesting level increased to 4
 1966 |                                 else    {
      |                                 ^
keyhunt.cpp:1971:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 1971 |                         if(!FLAGREADEDFILE2  )  {
      |                         ^
keyhunt.cpp:1977:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 1977 |                                 if(fd_aux2 != NULL)     {
      |                                 ^
keyhunt.cpp:1980:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 1980 |                                         for(i = 0; i < 256;i++) {
      |                                         ^
keyhunt.cpp:1982:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1982 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:1987:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1987 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:1992:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1992 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:1996:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 1996 |                                                 if(i % 64 == 0) {
      |                                                 ^
keyhunt.cpp:2004:5: note: +1, nesting level increased to 4
 2004 |                                 else    {
      |                                 ^
keyhunt.cpp:2010:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2010 |                         if(!FLAGREADEDFILE3)    {
      |                         ^
keyhunt.cpp:2014:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2014 |                                 if(fd_aux3 != NULL)     {
      |                                 ^
keyhunt.cpp:2018:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2018 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:2023:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2023 |                                         if(readed != 1) {
      |                                         ^
keyhunt.cpp:2030:5: note: +1, nesting level increased to 4
 2030 |                                 else    {
      |                                 ^
keyhunt.cpp:2035:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2035 |                         if(!FLAGREADEDFILE4)    {
      |                         ^
keyhunt.cpp:2040:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2040 |                                 if(fd_aux2 != NULL)     {
      |                                 ^
keyhunt.cpp:2043:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2043 |                                         for(i = 0; i < 256;i++) {
      |                                         ^
keyhunt.cpp:2045:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2045 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:2050:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2050 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:2055:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2055 |                                                 if(readed != 1) {
      |                                                 ^
keyhunt.cpp:2059:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2059 |                                                 if(i % 64 == 0) {
      |                                                 ^
keyhunt.cpp:2067:5: note: +1, nesting level increased to 4
 2067 |                                 else    {
      |                                 ^
keyhunt.cpp:2088:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 2088 |                 for(j= 0;j < NTHREADS; j++)     {
      |                 ^
keyhunt.cpp:2094:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2094 |                         switch(FLAGBSGSMODE)    {
      |                         ^
keyhunt.cpp:2133:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2133 |                         if(s != 0)      {
      |                         ^
keyhunt.cpp:2141:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 2141 |         if(FLAGMODE != MODE_BSGS)       {
      |         ^
keyhunt.cpp:2152:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 2152 |                 for(j= 0;j < NTHREADS; j++)     {
      |                 ^
keyhunt.cpp:2158:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2158 |                         switch(FLAGMODE)        {
      |                         ^
keyhunt.cpp:2185:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2185 |                         if(s != 0)      {
      |                         ^
keyhunt.cpp:2192:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 2192 |         for(j =0; j < 7; j++)   {
      |         ^
keyhunt.cpp:2201:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 2201 |         do      {
      |         ^
keyhunt.cpp:2205:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 2205 |                 for(j = 0; j <NTHREADS && check_flag; j++) {
      |                 ^
keyhunt.cpp:2205:26: note: +1
 2205 |                 for(j = 0; j <NTHREADS && check_flag; j++) {
      |                                        ^
keyhunt.cpp:2208:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 2208 |                 if(check_flag)  {
      |                 ^
keyhunt.cpp:2211:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 2211 |                 if(OUTPUTSECONDS.IsGreater(&ZERO) ){
      |                 ^
keyhunt.cpp:2214:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2214 |                         if(MPZAUX.IsZero()) {
      |                         ^
keyhunt.cpp:2216:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2216 |                                 for(j = 0; j < NTHREADS; j++) {
      |                                 ^
keyhunt.cpp:2222:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2222 |                                 if(FLAGENDOMORPHISM)    {
      |                                 ^
keyhunt.cpp:2223:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2223 |                                         if(FLAGMODE == MODE_XPOINT)     {
      |                                         ^
keyhunt.cpp:2226:6: note: +1, nesting level increased to 5
 2226 |                                         else    {
      |                                         ^
keyhunt.cpp:2230:5: note: +1, nesting level increased to 4
 2230 |                                 else    {
      |                                 ^
keyhunt.cpp:2231:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2231 |                                         if(FLAGSEARCH == SEARCH_COMPRESS)       {
      |                                         ^
keyhunt.cpp:2248:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2248 |                                 if(pretotal.IsLower(&int_limits[0]))    {
      |                                 ^
keyhunt.cpp:2249:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2249 |                                         if(FLAGMATRIX)  {
      |                                         ^
keyhunt.cpp:2252:6: note: +1, nesting level increased to 5
 2252 |                                         else    {
      |                                         ^
keyhunt.cpp:2256:5: note: +1, nesting level increased to 4
 2256 |                                 else    {
      |                                 ^
keyhunt.cpp:2259:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2259 |                                         while( i < 6 && !salir) {
      |                                         ^
keyhunt.cpp:2259:19: note: +1
 2259 |                                         while( i < 6 && !salir) {
      |                                                      ^
keyhunt.cpp:2260:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2260 |                                                 if(pretotal.IsLower(&int_limits[i+1]))  {
      |                                                 ^
keyhunt.cpp:2263:7: note: +1, nesting level increased to 6
 2263 |                                                 else    {
      |                                                 ^
keyhunt.cpp:2269:41: note: +5, including nesting penalty of 4, nesting level increased to 5
 2269 |                                         div_pretotal.Div(&int_limits[salir ? i : i-1]);
      |                                                                            ^
keyhunt.cpp:2271:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2271 |                                         if(FLAGMATRIX)  {
      |                                         ^
keyhunt.cpp:2272:141: note: +6, including nesting penalty of 5, nesting level increased to 6
 2272 |                                                 sprintf(buffer,"[+] Total %s keys in %s seconds: ~%s %s (%s keys/s)\n",str_total,str_seconds,str_divpretotal,str_limits_prefixs[salir ? i : i-1],str_pretotal);
      |                                                                                                                                                                                       ^
keyhunt.cpp:2274:6: note: +1, nesting level increased to 5
 2274 |                                         else    {
      |                                         ^
keyhunt.cpp:2275:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2275 |                                                 if(THREADOUTPUT == 1)   {
      |                                                 ^
keyhunt.cpp:2276:144: note: +7, including nesting penalty of 6, nesting level increased to 7
 2276 |                                                         sprintf(buffer,"\r[+] Total %s keys in %s seconds: ~%s %s (%s keys/s)\r",str_total,str_seconds,str_divpretotal,str_limits_prefixs[salir ? i : i-1],str_pretotal);
      |                                                                                                                                                                                                 ^
keyhunt.cpp:2278:7: note: +1, nesting level increased to 6
 2278 |                                                 else    {
      |                                                 ^
keyhunt.cpp:2279:144: note: +7, including nesting penalty of 6, nesting level increased to 7
 2279 |                                                         sprintf(buffer,"\r[+] Total %s keys in %s seconds: ~%s %s (%s keys/s)\r",str_total,str_seconds,str_divpretotal,str_limits_prefixs[salir ? i : i-1],str_pretotal);
      |                                                                                                                                                                                                 ^
keyhunt.cpp:429:5: warning: function 'main' exceeds recommended size/complexity thresholds [readability-function-size]
  429 | int main(int argc, char **argv) {
      |     ^
keyhunt.cpp:429:5: note: 1415 statements (threshold 800)
keyhunt.cpp:443:20: warning: 65536 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  443 |                 GPU_BATCH_SIZE = 65536;  // 64K default for high performance
      |                                  ^
keyhunt.cpp:447:14: warning: 2048 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  447 |         char buffer[2048];
      |                     ^
keyhunt.cpp:448:16: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  448 |         char rawvalue[32];
      |                       ^
keyhunt.cpp:449:19: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
  449 |         struct tothread *tt;    //tothread
      |                          ^
keyhunt.cpp:450:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  450 |         Tokenizer t,tokenizerbsgs;      //tokenizer
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:450:12: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  450 |         Tokenizer t,tokenizerbsgs;      //tokenizer
      |                   ^
keyhunt.cpp:463:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  463 |         FILE *fd,*fd_aux1,*fd_aux2,*fd_aux3;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:463:8: warning: variable name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
  463 |         FILE *fd,*fd_aux1,*fd_aux2,*fd_aux3;
      |               ^
keyhunt.cpp:464:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  464 |         uint64_t i,BASE,PERTHREAD_R,itemsbloom,itemsbloom2,itemsbloom3;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:464:11: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  464 |         uint64_t i,BASE,PERTHREAD_R,itemsbloom,itemsbloom2,itemsbloom3;
      |                  ^
keyhunt.cpp:466:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  466 |         int readed,continue_flag,check_flag,c,salir,index_value,j;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:466:38: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  466 |         int readed,continue_flag,check_flag,c,salir,index_value,j;
      |                                             ^
keyhunt.cpp:466:58: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
  466 |         int readed,continue_flag,check_flag,c,salir,index_value,j;
      |                                                                 ^
keyhunt.cpp:467:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  467 |         Int total,pretotal,debugcount_mpz,seconds,div_pretotal,int_aux,int_r,int_q,int58;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:480:6: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
  480 |         int s;
      |             ^
keyhunt.cpp:487:24: warning: 30 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  487 | OUTPUTSECONDS.SetInt32(30);
      |                        ^
keyhunt.cpp:535:45: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  535 |                                 index_value = indexOf(optarg,bsgs_modes,5);
      |                                                                         ^
keyhunt.cpp:545:35: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  545 |                                 bitrange = strtol(optarg,NULL,10);
      |                                                               ^
keyhunt.cpp:546:35: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  546 |                                 if(bitrange > 0 && bitrange <=256 )     {
      |                                                               ^
keyhunt.cpp:587:26: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  587 |                                 if(strlen(optarg) == 22)        {
      |                                                      ^
keyhunt.cpp:589:39: warning: 23 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  589 |                                         str_baseminikey = (char*) malloc(23);
      |                                                                          ^
keyhunt.cpp:591:39: warning: 23 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  591 |                                         raw_baseminikey = (char*) malloc(23);
      |                                                                          ^
keyhunt.cpp:593:37: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  593 |                                         strncpy(str_baseminikey,optarg,22);
      |                                                                        ^
keyhunt.cpp:594:20: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  594 |                                         for(i = 0; i< 21; i++)  {
      |                                                       ^
keyhunt.cpp:596:93: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  596 |                                                         raw_baseminikey[i] = (int)(strchr(Ccoinbuffer,str_baseminikey[i+1]) - Ccoinbuffer) % 58;
      |                                                                                                                                              ^
keyhunt.cpp:632:39: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  632 |                                 KFACTOR = (int)strtol(optarg,NULL,10);
      |                                                                   ^
keyhunt.cpp:660:33: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  660 |                                 switch(indexOf(optarg,modes,7)) {
      |                                                             ^
keyhunt.cpp:720:11: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  720 |                                                         if(isValidHex(range_start)) {
      |                                                            ^                      
      |                                                                                    != 0
keyhunt.cpp:731:11: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  731 |                                                         if(isValidHex(range_start) && isValidHex(range_end)) {
      |                                                            ^
      |                                                            (                       != 0)
keyhunt.cpp:731:38: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  731 |                                                         if(isValidHex(range_start) && isValidHex(range_end)) {
      |                                                                                       ^                    
      |                                                                                       (                     != 0)
keyhunt.cpp:735:12: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  735 |                                                                 if(isValidHex(range_start)) {
      |                                                                    ^                      
      |                                                                                            != 0
keyhunt.cpp:752:29: warning: 30 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  752 |                                         OUTPUTSECONDS.SetInt32(30);
      |                                                                ^
keyhunt.cpp:767:35: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  767 |                                 NTHREADS = strtol(optarg,NULL,10);
      |                                                               ^
keyhunt.cpp:793:26: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  793 |                                 if(strlen(optarg) == 58)        {
      |                                                      ^
keyhunt.cpp:803:45: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  803 |                                 FLAGBLOOMMULTIPLIER= strtol(optarg,NULL,10);
      |                                                                         ^
keyhunt.cpp:816:36: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  816 |         if(  FLAGBSGSMODE == MODE_BSGS && FLAGENDOMORPHISM)     {
      |                                           ^               
      |                                           (                != 0)
keyhunt.cpp:822:37: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  822 |         if(  FLAGBSGSMODE == MODE_BSGS  && FLAGSTRIDE)  {
      |                                            ^         
      |                                            (          != 0)
keyhunt.cpp:826:5: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  826 |         if(FLAGSTRIDE)  {
      |            ^         
      |                       != 0
keyhunt.cpp:849:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  849 |         if (FLAGGPU) {
      |             ^      
      |                     != 0
keyhunt.cpp:850:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  850 |                 if (!GPU_IsAvailable()) {
      |                     ~^                
      |                                        == 0
keyhunt.cpp:863:5: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  863 |         if(FLAGRANGE) {
      |            ^        
      |                      != 0
keyhunt.cpp:869:45: warning: redundant boolean literal supplied to boolean operator [readability-simplify-boolean-expr]
  869 |                 if(n_range_start.IsEqual(&n_range_end) == false ) {
      |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~
      |                    !n_range_start.IsEqual(&n_range_end)
keyhunt.cpp:899:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  899 |                         if(FLAGBITRANGE)        {
      |                            ^           
      |                                         != 0
keyhunt.cpp:915:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  915 |                 if(FLAG_N){
      |                    ^     
      |                           != 0
keyhunt.cpp:917:41: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  917 |                                 N_SEQUENTIAL_MAX =strtol(str_N,NULL,16);
      |                                                                     ^
keyhunt.cpp:920:41: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  920 |                                 N_SEQUENTIAL_MAX =strtol(str_N,NULL,10);
      |                                                                     ^
keyhunt.cpp:923:26: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  923 |                         if(N_SEQUENTIAL_MAX < 1024)     {
      |                                               ^
keyhunt.cpp:926:24: warning: 0x100000000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  926 |                                 N_SEQUENTIAL_MAX = 0x100000000;
      |                                                    ^
keyhunt.cpp:928:26: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  928 |                         if(N_SEQUENTIAL_MAX % 1024 != 0)        {
      |                                               ^
keyhunt.cpp:931:24: warning: 0x100000000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  931 |                                 N_SEQUENTIAL_MAX = 0x100000000;
      |                                                    ^
keyhunt.cpp:937:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  937 |                         if(FLAGBASEMINIKEY)     {
      |                            ^              
      |                                            != 0
keyhunt.cpp:940:30: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  940 |                         minikeyN = (char*) malloc(22);
      |                                                   ^
keyhunt.cpp:942:4: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]
  942 |                         i =0;
      |                         ^  ~
keyhunt.cpp:942:4: note: Value stored to 'i' is never read
  942 |                         i =0;
      |                         ^  ~
keyhunt.cpp:943:19: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  943 |                         int58.SetInt32(58);
      |                                        ^
keyhunt.cpp:945:17: warning: 253 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  945 |                         int_aux.Mult(253);      
      |                                      ^
keyhunt.cpp:947:8: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  947 |                         i = 20;
      |                             ^
keyhunt.cpp:963:12: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  963 |                         }while(!salir && i > 0);
      |                                ~^
      |                                (      == 0)
keyhunt.cpp:964:22: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
  964 |                         minikey_n_limit = 21 -i;
      |                                           ^
keyhunt.cpp:967:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
  967 |                         if(FLAGBITRANGE)        {       // Bit Range
      |                            ^           
      |                                         != 0
keyhunt.cpp:1001:34: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1001 |                 if(FLAGMODE != MODE_VANITY && !FLAGREADEDFILE1) {
      |                                               ~^              
      |                                               (                == 0)
keyhunt.cpp:1016:24: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1016 |                 aux = (char*) malloc(1024);
      |                                      ^
keyhunt.cpp:1018:10: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1018 |                 while(!feof(fd))        {
      |                       ~^       
      |                                 == 0
keyhunt.cpp:1019:17: warning: 1022 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1019 |                         if(fgets(aux,1022,fd) == aux)   {
      |                                      ^
keyhunt.cpp:1021:23: warning: 128 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1021 |                                 if(strlen(aux) >= 128)  {       //Length of a full address in hexadecimal without 04
      |                                                   ^
keyhunt.cpp:1024:24: warning: 66 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1024 |                                         if(strlen(aux) >= 66)   {
      |                                                           ^
keyhunt.cpp:1039:31: warning: 65 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1039 |                 pointx_str = (char*) malloc(65);
      |                                             ^
keyhunt.cpp:1041:31: warning: 65 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1041 |                 pointy_str = (char*) malloc(65);
      |                                             ^
keyhunt.cpp:1045:10: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1045 |                 while(!feof(fd))        {
      |                       ~^       
      |                                 == 0
keyhunt.cpp:1046:17: warning: 1022 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1046 |                         if(fgets(aux,1022,fd) == aux)   {
      |                                      ^
keyhunt.cpp:1048:23: warning: 66 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1048 |                                 if(strlen(aux) >= 66)   {
      |                                                   ^
keyhunt.cpp:1051:26: warning: 65 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1051 |                                         memset(pointx_str,0,65);
      |                                                             ^
keyhunt.cpp:1052:26: warning: 65 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1052 |                                         memset(pointy_str,0,65);
      |                                                             ^
keyhunt.cpp:1054:12: warning: 66 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1054 |                                                 case 66:        //Compress
      |                                                      ^
keyhunt.cpp:1064:12: warning: 130 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1064 |                                                 case 130:       //With the 04
      |                                                      ^
keyhunt.cpp:1099:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1099 |                 if(FLAG_N)      {       //Custom N by the -n param
      |                    ^     
      |                           != 0
keyhunt.cpp:1113:30: warning: 0x100000000000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1113 |                         BSGS_N.SetInt64((uint64_t)0x100000000000);
      |                                                   ^
keyhunt.cpp:1136:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1136 |                 if(FLAGRANGE || FLAGBITRANGE)   {
      |                    ^
      |                    (         != 0)
keyhunt.cpp:1136:19: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1136 |                 if(FLAGRANGE || FLAGBITRANGE)   {
      |                                 ^           
      |                                 (            != 0)
keyhunt.cpp:1137:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1137 |                         if(FLAGBITRANGE)        {       // Bit Range
      |                            ^           
      |                                         != 0
keyhunt.cpp:1177:21: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1177 |                 BSGS_AUX.SetInt32(32);
      |                                   ^
keyhunt.cpp:1232:25: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1232 |                 if(((uint64_t)(bsgs_m/256)) > 10000)    {
      |                                       ^
keyhunt.cpp:1232:33: warning: 10000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1232 |                 if(((uint64_t)(bsgs_m/256)) > 10000)    {
      |                                               ^
keyhunt.cpp:1233:37: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1233 |                         itemsbloom = (uint64_t)(bsgs_m / 256);
      |                                                          ^
keyhunt.cpp:1234:16: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1234 |                         if(bsgs_m % 256 != 0 )  {
      |                                     ^
keyhunt.cpp:1239:17: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1239 |                         itemsbloom = 1000;
      |                                      ^
keyhunt.cpp:1242:26: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1242 |                 if(((uint64_t)(bsgs_m2/256)) > 1000)    {
      |                                        ^
keyhunt.cpp:1242:34: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1242 |                 if(((uint64_t)(bsgs_m2/256)) > 1000)    {
      |                                                ^
keyhunt.cpp:1243:39: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1243 |                         itemsbloom2 = (uint64_t)(bsgs_m2 / 256);
      |                                                            ^
keyhunt.cpp:1244:17: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1244 |                         if(bsgs_m2 % 256 != 0)  {
      |                                      ^
keyhunt.cpp:1249:18: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1249 |                         itemsbloom2 = 1000;
      |                                       ^
keyhunt.cpp:1252:26: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1252 |                 if(((uint64_t)(bsgs_m3/256)) > 1000)    {
      |                                        ^
keyhunt.cpp:1252:34: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1252 |                 if(((uint64_t)(bsgs_m3/256)) > 1000)    {
      |                                                ^
keyhunt.cpp:1253:37: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1253 |                         itemsbloom3 = (uint64_t)(bsgs_m3/256);
      |                                                          ^
keyhunt.cpp:1254:17: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1254 |                         if(bsgs_m3 % 256 != 0 ) {
      |                                      ^
keyhunt.cpp:1259:18: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1259 |                         itemsbloom3 = 1000;
      |                                       ^
keyhunt.cpp:1263:36: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1263 |                 bloom_bP = (struct bloom*)calloc(256,sizeof(struct bloom));
      |                                                  ^
keyhunt.cpp:1265:55: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1265 |                 bloom_bP_checksums = (struct checksumsha256*)calloc(256,sizeof(struct checksumsha256));
      |                                                                     ^
keyhunt.cpp:1272:46: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1272 |                 bloom_bP_mutex = (pthread_mutex_t*) calloc(256,sizeof(pthread_mutex_t));
      |                                                            ^
keyhunt.cpp:1279:15: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1279 |                 for(i=0; i< 256; i++)   {
      |                             ^
keyhunt.cpp:1285:43: warning: 0.000001 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1285 |                         if(bloom_init2(&bloom_bP[i],itemsbloom,0.000001)        == 1){
      |                                                                ^
keyhunt.cpp:1292:24: warning: redundant explicit casting to the same type 'float' as the sub-expression, remove this casting [readability-redundant-casting]
 1292 |                 printf(": %.2f MB\n",(float)((float)(uint64_t)bloom_bP_totalbytes/(float)(uint64_t)1048576));
      |                                      ^~~~~~~~                                                             ~
      |                                      (                                                                    )
keyhunt.cpp:1292:39: warning: redundant explicit casting to the same type 'uint64_t' (aka 'unsigned long') as the sub-expression, remove this casting [readability-redundant-casting]
 1292 |                 printf(": %.2f MB\n",(float)((float)(uint64_t)bloom_bP_totalbytes/(float)(uint64_t)1048576));
      |                                                     ^~~~~~~~~~
keyhunt.cpp:365:10: note: source type originates from referencing this variable
  365 | uint64_t bloom_bP_totalbytes = 0;
      | ~~~~~~~~ ^
keyhunt.cpp:1292:86: warning: 1048576 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1292 |                 printf(": %.2f MB\n",(float)((float)(uint64_t)bloom_bP_totalbytes/(float)(uint64_t)1048576));
      |                                                                                                    ^
keyhunt.cpp:1300:50: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1300 |                 bloom_bPx2nd_mutex = (pthread_mutex_t*) calloc(256,sizeof(pthread_mutex_t));
      |                                                                ^
keyhunt.cpp:1303:40: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1303 |                 bloom_bPx2nd = (struct bloom*)calloc(256,sizeof(struct bloom));
      |                                                      ^
keyhunt.cpp:1305:60: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1305 |                 bloom_bPx2nd_checksums = (struct checksumsha256*) calloc(256,sizeof(struct checksumsha256));
      |                                                                          ^
keyhunt.cpp:1308:15: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1308 |                 for(i=0; i< 256; i++)   {
      |                             ^
keyhunt.cpp:1314:48: warning: 0.000001 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1314 |                         if(bloom_init2(&bloom_bPx2nd[i],itemsbloom2,0.000001)   == 1){
      |                                                                     ^
keyhunt.cpp:1321:24: warning: redundant explicit casting to the same type 'float' as the sub-expression, remove this casting [readability-redundant-casting]
 1321 |                 printf(": %.2f MB\n",(float)((float)(uint64_t)bloom_bP2_totalbytes/(float)(uint64_t)1048576));
      |                                      ^~~~~~~~                                                              ~
      |                                      (                                                                     )
keyhunt.cpp:1321:39: warning: redundant explicit casting to the same type 'uint64_t' (aka 'unsigned long') as the sub-expression, remove this casting [readability-redundant-casting]
 1321 |                 printf(": %.2f MB\n",(float)((float)(uint64_t)bloom_bP2_totalbytes/(float)(uint64_t)1048576));
      |                                                     ^~~~~~~~~~
keyhunt.cpp:366:10: note: source type originates from referencing this variable
  366 | uint64_t bloom_bP2_totalbytes = 0;
      | ~~~~~~~~ ^
keyhunt.cpp:1321:87: warning: 1048576 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1321 |                 printf(": %.2f MB\n",(float)((float)(uint64_t)bloom_bP2_totalbytes/(float)(uint64_t)1048576));
      |                                                                                                     ^
keyhunt.cpp:1327:50: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1327 |                 bloom_bPx3rd_mutex = (pthread_mutex_t*) calloc(256,sizeof(pthread_mutex_t));
      |                                                                ^
keyhunt.cpp:1330:40: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1330 |                 bloom_bPx3rd = (struct bloom*)calloc(256,sizeof(struct bloom));
      |                                                      ^
keyhunt.cpp:1332:60: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1332 |                 bloom_bPx3rd_checksums = (struct checksumsha256*) calloc(256,sizeof(struct checksumsha256));
      |                                                                          ^
keyhunt.cpp:1337:15: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1337 |                 for(i=0; i< 256; i++)   {
      |                             ^
keyhunt.cpp:1343:48: warning: 0.000001 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1343 |                         if(bloom_init2(&bloom_bPx3rd[i],itemsbloom3,0.000001)   == 1){
      |                                                                     ^
keyhunt.cpp:1350:24: warning: redundant explicit casting to the same type 'float' as the sub-expression, remove this casting [readability-redundant-casting]
 1350 |                 printf(": %.2f MB\n",(float)((float)(uint64_t)bloom_bP3_totalbytes/(float)(uint64_t)1048576));
      |                                      ^~~~~~~~                                                              ~
      |                                      (                                                                     )
keyhunt.cpp:1350:39: warning: redundant explicit casting to the same type 'uint64_t' (aka 'unsigned long') as the sub-expression, remove this casting [readability-redundant-casting]
 1350 |                 printf(": %.2f MB\n",(float)((float)(uint64_t)bloom_bP3_totalbytes/(float)(uint64_t)1048576));
      |                                                     ^~~~~~~~~~
keyhunt.cpp:367:10: note: source type originates from referencing this variable
  367 | uint64_t bloom_bP3_totalbytes = 0;
      | ~~~~~~~~ ^
keyhunt.cpp:1350:87: warning: 1048576 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1350 |                 printf(": %.2f MB\n",(float)((float)(uint64_t)bloom_bP3_totalbytes/(float)(uint64_t)1048576));
      |                                                                                                     ^
keyhunt.cpp:1363:21: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1363 |                 BSGS_AMP2.reserve(32);
      |                                   ^
keyhunt.cpp:1364:21: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1364 |                 BSGS_AMP3.reserve(32);
      |                                   ^
keyhunt.cpp:1367:3: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]
 1367 |                 i= 0;
      |                 ^  ~
keyhunt.cpp:1367:3: note: Value stored to 'i' is never read
 1367 |                 i= 0;
      |                 ^  ~
keyhunt.cpp:1373:9: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
 1373 |                 Point g = bsP;
      |                       ^
keyhunt.cpp:1387:3: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]
 1387 |                 i = 0;
      |                 ^   ~
keyhunt.cpp:1387:3: note: Value stored to 'i' is never read
 1387 |                 i = 0;
      |                 ^   ~
keyhunt.cpp:1395:18: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1395 |                 for(i = 1; i < 32; i++) {
      |                                ^
keyhunt.cpp:1400:3: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]
 1400 |                 i  = 0;
      |                 ^    ~
keyhunt.cpp:1400:3: note: Value stored to 'i' is never read
 1400 |                 i  = 0;
      |                 ^    ~
keyhunt.cpp:1408:18: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1408 |                 for(i = 1; i < 32; i++) {
      |                                ^
keyhunt.cpp:1413:11: warning: redundant explicit casting to the same type 'uint64_t' (aka 'unsigned long') as the sub-expression, remove this casting [readability-redundant-casting]
 1413 |                 bytes = (uint64_t)bsgs_m3 * (uint64_t) sizeof(struct bsgs_xvalue);
      |                         ^~~~~~~~~~
keyhunt.cpp:370:10: note: source type originates from referencing this variable
  370 | uint64_t bsgs_m3;
      | ~~~~~~~~ ^
keyhunt.cpp:1414:79: warning: 1048576 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1414 |                 printf("[+] Allocating %.2f MB for %" PRIu64  " bP Points\n",(double)(bytes/1048576),bsgs_m3);
      |                                                                                             ^
keyhunt.cpp:1420:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1420 |                 if(FLAGSAVEREADFILE)    {
      |                    ^               
      |                                     != 0
keyhunt.cpp:1423:31: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1423 |                         snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_4_%" PRIu64 ".blm",bsgs_m);
      |                                                    ^
keyhunt.cpp:1428:20: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1428 |                                 for(i = 0; i < 256;i++) {
      |                                                ^
keyhunt.cpp:1447:14: warning: redundant explicit casting to the same type 'uint8_t *' (aka 'unsigned char *') as the sub-expression, remove this casting [readability-redundant-casting]
 1447 |                                                 sha256((uint8_t*)bloom_bP[i].bf,bloom_bP[i].bytes,(uint8_t*)rawvalue);
      |                                                        ^~~~~~~~~~
./bloom/bloom.h:44:12: note: source type originates from referencing this member
   44 |   uint8_t *bf;
      |   ~~~~~~~~~^
keyhunt.cpp:1448:53: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1448 |                                                 if(memcmp(bloom_bP_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bP_checksums[i].backup,rawvalue,32) != 0 )       {       /* Verification */
      |                                                                                               ^
keyhunt.cpp:1448:110: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1448 |                                                 if(memcmp(bloom_bP_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bP_checksums[i].backup,rawvalue,32) != 0 )       {       /* Verification */
      |                                                                                                                                                        ^
keyhunt.cpp:1453:13: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1453 |                                         if(i % 64 == 0 )        {
      |                                                ^
keyhunt.cpp:1460:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1460 |                                 memset(buffer_bloom_file,0,1024);
      |                                                            ^
keyhunt.cpp:1461:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1461 |                                 snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_3_%" PRIu64 ".blm",bsgs_m);
      |                                                            ^
keyhunt.cpp:1470:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1470 |                                 snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_3_%" PRIu64 ".blm",bsgs_m);
      |                                                            ^
keyhunt.cpp:1475:21: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1475 |                                         for(i = 0; i < 256;i++) {
      |                                                        ^
keyhunt.cpp:1498:62: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1498 |                                                 memcpy(bloom_bP_checksums[i].data,oldbloom_bP.checksum,32);
      |                                                                                                        ^
keyhunt.cpp:1499:71: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1499 |                                                 memcpy(bloom_bP_checksums[i].backup,oldbloom_bP.checksum_backup,32);
      |                                                                                                                 ^
keyhunt.cpp:1500:25: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1500 |                                                 memset(rawvalue,0,32);
      |                                                                   ^
keyhunt.cpp:1502:15: warning: redundant explicit casting to the same type 'uint8_t *' (aka 'unsigned char *') as the sub-expression, remove this casting [readability-redundant-casting]
 1502 |                                                         sha256((uint8_t*)bloom_bP[i].bf,bloom_bP[i].bytes,(uint8_t*)rawvalue);
      |                                                                ^~~~~~~~~~
./bloom/bloom.h:44:12: note: source type originates from referencing this member
   44 |   uint8_t *bf;
      |   ~~~~~~~~~^
keyhunt.cpp:1503:54: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1503 |                                                         if(memcmp(bloom_bP_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bP_checksums[i].backup,rawvalue,32) != 0 )       {       /* Verification */
      |                                                                                                       ^
keyhunt.cpp:1503:111: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1503 |                                                         if(memcmp(bloom_bP_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bP_checksums[i].backup,rawvalue,32) != 0 )       {       /* Verification */
      |                                                                                                                                                                ^
keyhunt.cpp:1508:14: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1508 |                                                 if(i % 32 == 0 )        {
      |                                                        ^
keyhunt.cpp:1526:31: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1526 |                         snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_6_%" PRIu64 ".blm",bsgs_m2);
      |                                                    ^
keyhunt.cpp:1531:20: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1531 |                                 for(i = 0; i < 256;i++) {
      |                                                ^
keyhunt.cpp:1549:24: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1549 |                                         memset(rawvalue,0,32);
      |                                                           ^
keyhunt.cpp:1551:14: warning: redundant explicit casting to the same type 'uint8_t *' (aka 'unsigned char *') as the sub-expression, remove this casting [readability-redundant-casting]
 1551 |                                                 sha256((uint8_t*)bloom_bPx2nd[i].bf,bloom_bPx2nd[i].bytes,(uint8_t*)rawvalue);
      |                                                        ^~~~~~~~~~
./bloom/bloom.h:44:12: note: source type originates from referencing this member
   44 |   uint8_t *bf;
      |   ~~~~~~~~~^
keyhunt.cpp:1552:57: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1552 |                                                 if(memcmp(bloom_bPx2nd_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bPx2nd_checksums[i].backup,rawvalue,32) != 0 )       {               /* Verification */
      |                                                                                                   ^
keyhunt.cpp:1552:118: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1552 |                                                 if(memcmp(bloom_bPx2nd_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bPx2nd_checksums[i].backup,rawvalue,32) != 0 )       {               /* Verification */
      |                                                                                                                                                                ^
keyhunt.cpp:1557:13: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1557 |                                         if(i % 64 == 0) {
      |                                                ^
keyhunt.cpp:1564:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1564 |                                 memset(buffer_bloom_file,0,1024);
      |                                                            ^
keyhunt.cpp:1565:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1565 |                                 snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_5_%" PRIu64 ".blm",bsgs_m2);
      |                                                            ^
keyhunt.cpp:1571:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1571 |                                 memset(buffer_bloom_file,0,1024);
      |                                                            ^
keyhunt.cpp:1572:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1572 |                                 snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_1_%" PRIu64 ".blm",bsgs_m2);
      |                                                            ^
keyhunt.cpp:1585:31: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1585 |                         snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_2_%" PRIu64 ".tbl",bsgs_m3);
      |                                                    ^
keyhunt.cpp:1595:28: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1595 |                                 rsize = fread(checksum,32,1,fd_aux3);
      |                                                        ^
keyhunt.cpp:1602:41: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1602 |                                         if(memcmp(checksum,checksum_backup,32) != 0)    {
      |                                                                            ^
keyhunt.cpp:1616:31: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1616 |                         snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_7_%" PRIu64 ".blm",bsgs_m3);
      |                                                    ^
keyhunt.cpp:1621:20: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1621 |                                 for(i = 0; i < 256;i++) {
      |                                                ^
keyhunt.cpp:1639:24: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1639 |                                         memset(rawvalue,0,32);
      |                                                           ^
keyhunt.cpp:1641:14: warning: redundant explicit casting to the same type 'uint8_t *' (aka 'unsigned char *') as the sub-expression, remove this casting [readability-redundant-casting]
 1641 |                                                 sha256((uint8_t*)bloom_bPx3rd[i].bf,bloom_bPx3rd[i].bytes,(uint8_t*)rawvalue);
      |                                                        ^~~~~~~~~~
./bloom/bloom.h:44:12: note: source type originates from referencing this member
   44 |   uint8_t *bf;
      |   ~~~~~~~~~^
keyhunt.cpp:1642:57: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1642 |                                                 if(memcmp(bloom_bPx3rd_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bPx3rd_checksums[i].backup,rawvalue,32) != 0 )       {               /* Verification */
      |                                                                                                   ^
keyhunt.cpp:1642:118: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1642 |                                                 if(memcmp(bloom_bPx3rd_checksums[i].data,rawvalue,32) != 0 || memcmp(bloom_bPx3rd_checksums[i].backup,rawvalue,32) != 0 )       {               /* Verification */
      |                                                                                                                                                                ^
keyhunt.cpp:1647:13: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1647 |                                         if(i % 64 == 0) {
      |                                                ^
keyhunt.cpp:1662:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1662 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE3 || !FLAGREADEDFILE4)        {
      |                    ~^
      |                    (                == 0)
keyhunt.cpp:1662:27: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1662 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE3 || !FLAGREADEDFILE4)        {
      |                                        ~^
      |                                        (                == 0)
keyhunt.cpp:1662:47: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1662 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE3 || !FLAGREADEDFILE4)        {
      |                                                            ~^
      |                                                            (                == 0)
keyhunt.cpp:1662:67: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1662 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE3 || !FLAGREADEDFILE4)        {
      |                                                                                ~^              
      |                                                                                (                == 0)
keyhunt.cpp:1686:127: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1686 |                                 printf("\r[+] processing %lu/%lu bP points : %i%%\r",FINISHED_ITEMS,bsgs_m,(int) (((double)FINISHED_ITEMS/(double)bsgs_m)*100));
      |                                                                                                                                                           ^
keyhunt.cpp:1714:34: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1714 |                                         for(j = 0; j < NTHREADS && !salir; j++) {
      |                                                                    ~^    
      |                                                                    (      == 0)
keyhunt.cpp:1716:10: warning: implicit conversion 'char' -> 'bool' [readability-implicit-bool-conversion]
 1716 |                                                 if(bPload_threads_available[j] && !salir)       {
      |                                                    ^
      |                                                    (                           != 0)
keyhunt.cpp:1716:42: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1716 |                                                 if(bPload_threads_available[j] && !salir)       {
      |                                                                                   ~^    
      |                                                                                   (      == 0)
keyhunt.cpp:1733:8: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]
 1733 |                                                         s = pthread_create(&tid[j],NULL,thread_bPload_2blooms,(void*) &bPload_temp_ptr[j]);
      |                                                         ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:1733:8: note: Value stored to 's' is never read
 1733 |                                                         s = pthread_create(&tid[j],NULL,thread_bPload_2blooms,(void*) &bPload_temp_ptr[j]);
      |                                                         ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:1742:131: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1742 |                                                 printf("\r[+] processing %lu/%lu bP points : %i%%\r",FINISHED_ITEMS,bsgs_m2,(int) (((double)FINISHED_ITEMS/(double)bsgs_m2)*100));
      |                                                                                                                                                                             ^
keyhunt.cpp:1758:10: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 1758 |                                                 if(finished)    {
      |                                                    ^       
      |                                                             != 0u
keyhunt.cpp:1797:127: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1797 |                                 printf("\r[+] processing %lu/%lu bP points : %i%%\r",FINISHED_ITEMS,bsgs_m,(int) (((double)FINISHED_ITEMS/(double)bsgs_m)*100));
      |                                                                                                                                                           ^
keyhunt.cpp:1827:34: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1827 |                                         for(j = 0; j < NTHREADS && !salir; j++) {
      |                                                                    ~^    
      |                                                                    (      == 0)
keyhunt.cpp:1829:10: warning: implicit conversion 'char' -> 'bool' [readability-implicit-bool-conversion]
 1829 |                                                 if(bPload_threads_available[j] && !salir)       {
      |                                                    ^
      |                                                    (                           != 0)
keyhunt.cpp:1829:42: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1829 |                                                 if(bPload_threads_available[j] && !salir)       {
      |                                                                                   ~^    
      |                                                                                   (      == 0)
keyhunt.cpp:1848:8: warning: Value stored to 's' is never read [clang-analyzer-deadcode.DeadStores]
 1848 |                                                         s = pthread_create(&tid[j],NULL,thread_bPload,(void*) &bPload_temp_ptr[j]);
      |                                                         ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:1848:8: note: Value stored to 's' is never read
 1848 |                                                         s = pthread_create(&tid[j],NULL,thread_bPload,(void*) &bPload_temp_ptr[j]);
      |                                                         ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:1856:129: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1856 |                                                 printf("\r[+] processing %lu/%lu bP points : %i%%\r",FINISHED_ITEMS,bsgs_m,(int) (((double)FINISHED_ITEMS/(double)bsgs_m)*100));
      |                                                                                                                                                                           ^
keyhunt.cpp:1872:10: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 1872 |                                                 if(finished)    {
      |                                                    ^       
      |                                                             != 0u
keyhunt.cpp:1890:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1890 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE4)    {
      |                    ~^
      |                    (                == 0)
keyhunt.cpp:1890:27: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1890 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE4)    {
      |                                        ~^
      |                                        (                == 0)
keyhunt.cpp:1890:47: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1890 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE4)    {
      |                                                            ~^              
      |                                                            (                == 0)
keyhunt.cpp:1894:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1894 |                 if(!FLAGREADEDFILE1)    {
      |                    ~^              
      |                                     == 0
keyhunt.cpp:1895:19: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1895 |                         for(i = 0; i < 256 ; i++)       {
      |                                        ^
keyhunt.cpp:1896:12: warning: redundant explicit casting to the same type 'uint8_t *' (aka 'unsigned char *') as the sub-expression, remove this casting [readability-redundant-casting]
 1896 |                                 sha256((uint8_t*)bloom_bP[i].bf, bloom_bP[i].bytes,(uint8_t*) bloom_bP_checksums[i].data);
      |                                        ^~~~~~~~~~
./bloom/bloom.h:44:12: note: source type originates from referencing this member
   44 |   uint8_t *bf;
      |   ~~~~~~~~~^
keyhunt.cpp:1897:68: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1897 |                                 memcpy(bloom_bP_checksums[i].backup,bloom_bP_checksums[i].data,32);
      |                                                                                                ^
keyhunt.cpp:1901:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1901 |                 if(!FLAGREADEDFILE2)    {
      |                    ~^              
      |                                     == 0
keyhunt.cpp:1902:19: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1902 |                         for(i = 0; i < 256 ; i++)       {
      |                                        ^
keyhunt.cpp:1903:12: warning: redundant explicit casting to the same type 'uint8_t *' (aka 'unsigned char *') as the sub-expression, remove this casting [readability-redundant-casting]
 1903 |                                 sha256((uint8_t*)bloom_bPx2nd[i].bf, bloom_bPx2nd[i].bytes,(uint8_t*) bloom_bPx2nd_checksums[i].data);
      |                                        ^~~~~~~~~~
./bloom/bloom.h:44:12: note: source type originates from referencing this member
   44 |   uint8_t *bf;
      |   ~~~~~~~~~^
keyhunt.cpp:1904:76: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1904 |                                 memcpy(bloom_bPx2nd_checksums[i].backup,bloom_bPx2nd_checksums[i].data,32);
      |                                                                                                        ^
keyhunt.cpp:1908:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1908 |                 if(!FLAGREADEDFILE4)    {
      |                    ~^              
      |                                     == 0
keyhunt.cpp:1909:19: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1909 |                         for(i = 0; i < 256 ; i++)       {
      |                                        ^
keyhunt.cpp:1910:12: warning: redundant explicit casting to the same type 'uint8_t *' (aka 'unsigned char *') as the sub-expression, remove this casting [readability-redundant-casting]
 1910 |                                 sha256((uint8_t*)bloom_bPx3rd[i].bf, bloom_bPx3rd[i].bytes,(uint8_t*) bloom_bPx3rd_checksums[i].data);
      |                                        ^~~~~~~~~~
./bloom/bloom.h:44:12: note: source type originates from referencing this member
   44 |   uint8_t *bf;
      |   ~~~~~~~~~^
keyhunt.cpp:1911:76: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1911 |                                 memcpy(bloom_bPx3rd_checksums[i].backup,bloom_bPx3rd_checksums[i].data,32);
      |                                                                                                        ^
keyhunt.cpp:1915:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1915 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE4)    {
      |                    ~^
      |                    (                == 0)
keyhunt.cpp:1915:27: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1915 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE4)    {
      |                                        ~^
      |                                        (                == 0)
keyhunt.cpp:1915:47: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1915 |                 if(!FLAGREADEDFILE1 || !FLAGREADEDFILE2 || !FLAGREADEDFILE4)    {
      |                                                            ~^              
      |                                                            (                == 0)
keyhunt.cpp:1919:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1919 |                 if(!FLAGREADEDFILE3)    {
      |                    ~^              
      |                                     == 0
keyhunt.cpp:1924:36: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1924 |                         memcpy(checksum_backup,checksum,32);
      |                                                         ^
keyhunt.cpp:1928:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1928 |                 if(FLAGSAVEREADFILE || FLAGUPDATEFILE1 )        {
      |                    ^
      |                    (                != 0)
keyhunt.cpp:1928:26: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1928 |                 if(FLAGSAVEREADFILE || FLAGUPDATEFILE1 )        {
      |                                        ^
      |                                        (               != 0)
keyhunt.cpp:1929:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1929 |                         if(!FLAGREADEDFILE1 || FLAGUPDATEFILE1) {
      |                            ~^
      |                            (                == 0)
keyhunt.cpp:1929:27: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1929 |                         if(!FLAGREADEDFILE1 || FLAGUPDATEFILE1) {
      |                                                ^              
      |                                                (               != 0)
keyhunt.cpp:1930:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1930 |                                 snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_4_%" PRIu64 ".blm",bsgs_m);
      |                                                            ^
keyhunt.cpp:1932:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1932 |                                 if(FLAGUPDATEFILE1)     {
      |                                    ^              
      |                                                    != 0
keyhunt.cpp:1942:21: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1942 |                                         for(i = 0; i < 256;i++) {
      |                                                        ^
keyhunt.cpp:1958:14: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1958 |                                                 if(i % 64 == 0) {
      |                                                        ^
keyhunt.cpp:1971:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 1971 |                         if(!FLAGREADEDFILE2  )  {
      |                            ~^
      |                                             == 0
keyhunt.cpp:1973:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1973 |                                 snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_6_%" PRIu64 ".blm",bsgs_m2);
      |                                                            ^
keyhunt.cpp:1980:21: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1980 |                                         for(i = 0; i < 256;i++) {
      |                                                        ^
keyhunt.cpp:1996:14: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 1996 |                                                 if(i % 64 == 0) {
      |                                                        ^
keyhunt.cpp:2010:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2010 |                         if(!FLAGREADEDFILE3)    {
      |                            ~^              
      |                                             == 0
keyhunt.cpp:2012:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2012 |                                 snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_2_%" PRIu64 ".tbl",bsgs_m3);
      |                                                            ^
keyhunt.cpp:2022:31: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2022 |                                         readed = fwrite(checksum,32,1,fd_aux3);
      |                                                                  ^
keyhunt.cpp:2035:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2035 |                         if(!FLAGREADEDFILE4)    {
      |                            ~^              
      |                                             == 0
keyhunt.cpp:2036:32: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2036 |                                 snprintf(buffer_bloom_file,1024,"keyhunt_bsgs_7_%" PRIu64 ".blm",bsgs_m3);
      |                                                            ^
keyhunt.cpp:2043:21: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2043 |                                         for(i = 0; i < 256;i++) {
      |                                                        ^
keyhunt.cpp:2059:14: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2059 |                                                 if(i % 64 == 0) {
      |                                                        ^
keyhunt.cpp:2075:3: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]
 2075 |                 i = 0;
      |                 ^   ~
keyhunt.cpp:2075:3: note: Value stored to 'i' is never read
 2075 |                 i = 0;
      |                 ^   ~
keyhunt.cpp:2192:16: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2192 |         for(j =0; j < 7; j++)   {
      |                       ^
keyhunt.cpp:2202:12: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2202 |                 sleep_ms(1000);
      |                          ^
keyhunt.cpp:2205:29: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2205 |                 for(j = 0; j <NTHREADS && check_flag; j++) {
      |                                           ^         
      |                                           (          != 0)
keyhunt.cpp:2208:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2208 |                 if(check_flag)  {
      |                    ^         
      |                               != 0
keyhunt.cpp:2222:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2222 |                                 if(FLAGENDOMORPHISM)    {
      |                                    ^               
      |                                                     != 0
keyhunt.cpp:2227:18: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2227 |                                                 total.Mult(6);
      |                                                            ^
keyhunt.cpp:2249:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2249 |                                         if(FLAGMATRIX)  {
      |                                            ^         
      |                                                       != 0
keyhunt.cpp:2259:17: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2259 |                                         while( i < 6 && !salir) {
      |                                                    ^
keyhunt.cpp:2259:23: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2259 |                                         while( i < 6 && !salir) {
      |                                                         ~^    
      |                                                         (      == 0)
keyhunt.cpp:2269:35: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2269 |                                         div_pretotal.Div(&int_limits[salir ? i : i-1]);
      |                                                                      ^
      |                                                                      (     != 0)
keyhunt.cpp:2271:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2271 |                                         if(FLAGMATRIX)  {
      |                                            ^         
      |                                                       != 0
keyhunt.cpp:2272:135: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2272 |                                                 sprintf(buffer,"[+] Total %s keys in %s seconds: ~%s %s (%s keys/s)\n",str_total,str_seconds,str_divpretotal,str_limits_prefixs[salir ? i : i-1],str_pretotal);
      |                                                                                                                                                                                 ^
      |                                                                                                                                                                                 (     != 0)
keyhunt.cpp:2276:138: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2276 |                                                         sprintf(buffer,"\r[+] Total %s keys in %s seconds: ~%s %s (%s keys/s)\r",str_total,str_seconds,str_divpretotal,str_limits_prefixs[salir ? i : i-1],str_pretotal);
      |                                                                                                                                                                                           ^
      |                                                                                                                                                                                           (     != 0)
keyhunt.cpp:2279:138: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2279 |                                                         sprintf(buffer,"\r[+] Total %s keys in %s seconds: ~%s %s (%s keys/s)\r",str_total,str_seconds,str_divpretotal,str_limits_prefixs[salir ? i : i-1],str_pretotal);
      |                                                                                                                                                                                           ^
      |                                                                                                                                                                                           (     != 0)
keyhunt.cpp:2299:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2299 |         }while(continue_flag);
      |                ^            
      |                              != 0
keyhunt.cpp:2309:14: warning: 60 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2309 |         char digest[60];
      |                     ^
keyhunt.cpp:2310:27: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2310 |         size_t pubaddress_size = 40;
      |                                  ^
keyhunt.cpp:2312:42: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2312 |         RMD160Data((const unsigned char*)digest,32, digest+1);
      |                                                 ^
keyhunt.cpp:2314:27: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2314 |         sha256((uint8_t*)digest, 21,(uint8_t*) digest+21);
      |                                  ^
keyhunt.cpp:2314:48: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2314 |         sha256((uint8_t*)digest, 21,(uint8_t*) digest+21);
      |                                                       ^
keyhunt.cpp:2315:26: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2315 |         sha256((uint8_t*)digest+21, 32,(uint8_t*) digest+21);
      |                                 ^
keyhunt.cpp:2315:30: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2315 |         sha256((uint8_t*)digest+21, 32,(uint8_t*) digest+21);
      |                                     ^
keyhunt.cpp:2315:51: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2315 |         sha256((uint8_t*)digest+21, 32,(uint8_t*) digest+21);
      |                                                          ^
keyhunt.cpp:2316:41: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2316 |         if(!b58enc(dst,&pubaddress_size,digest,25)){
      |                                                ^
keyhunt.cpp:2322:14: warning: 60 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2322 |         char digest[60];
      |                     ^
keyhunt.cpp:2323:27: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2323 |         size_t pubaddress_size = 40;
      |                                  ^
keyhunt.cpp:2325:22: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2325 |         memcpy(digest+1,rmd,20);
      |                             ^
keyhunt.cpp:2326:27: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2326 |         sha256((uint8_t*)digest, 21,(uint8_t*) digest+21);
      |                                  ^
keyhunt.cpp:2326:48: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2326 |         sha256((uint8_t*)digest, 21,(uint8_t*) digest+21);
      |                                                       ^
keyhunt.cpp:2327:26: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2327 |         sha256((uint8_t*)digest+21, 32,(uint8_t*) digest+21);
      |                                 ^
keyhunt.cpp:2327:30: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2327 |         sha256((uint8_t*)digest+21, 32,(uint8_t*) digest+21);
      |                                     ^
keyhunt.cpp:2327:51: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2327 |         sha256((uint8_t*)digest+21, 32,(uint8_t*) digest+21);
      |                                                          ^
keyhunt.cpp:2328:41: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2328 |         if(!b58enc(dst,&pubaddress_size,digest,25)){
      |                                                ^
keyhunt.cpp:2335:53: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2335 |         char *pubaddress = (char*) calloc(MAXLENGTHADDRESS+10,1);
      |                                                            ^
keyhunt.cpp:2336:32: warning: 60 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2336 |         char *digest = (char*) calloc(60,1);
      |                                       ^
keyhunt.cpp:2337:44: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2337 |         size_t pubaddress_size = MAXLENGTHADDRESS+10;
      |                                                   ^
keyhunt.cpp:2343:42: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2343 |         RMD160Data((const unsigned char*)digest,32, digest+1);
      |                                                 ^
keyhunt.cpp:2347:27: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2347 |         sha256((uint8_t*)digest, 21,(uint8_t*) digest+21);
      |                                  ^
keyhunt.cpp:2347:48: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2347 |         sha256((uint8_t*)digest, 21,(uint8_t*) digest+21);
      |                                                       ^
keyhunt.cpp:2349:26: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2349 |         sha256((uint8_t*)digest+21, 32,(uint8_t*) digest+21);
      |                                 ^
keyhunt.cpp:2349:30: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2349 |         sha256((uint8_t*)digest+21, 32,(uint8_t*) digest+21);
      |                                     ^
keyhunt.cpp:2349:51: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2349 |         sha256((uint8_t*)digest+21, 32,(uint8_t*) digest+21);
      |                                                          ^
keyhunt.cpp:2351:48: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2351 |         if(!b58enc(pubaddress,&pubaddress_size,digest,25)){
      |                                                       ^
keyhunt.cpp:2359:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2359 |         int64_t half,min,max,current;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:2360:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2360 |         int r = 0,rcmp;
      |         ^~~~~~~~~~~~~~~
keyhunt.cpp:2360:6: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 2360 |         int r = 0,rcmp;
      |             ^
keyhunt.cpp:2365:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2365 |         while(!r && half >= 1) {
      |               ~^
      |               (  == 0)
keyhunt.cpp:2367:49: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2367 |                 rcmp = memcmp(data,buffer[current+half].value,20);
      |                                                               ^
keyhunt.cpp:2387:7: warning: function 'thread_process_minikeys' has cognitive complexity of 100 (threshold 25) [readability-function-cognitive-complexity]
 2387 | void *thread_process_minikeys(void *vargp)      {
      |       ^
keyhunt.cpp:2405:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 2405 |         for(k = 0; k < 4; k++)  {
      |         ^
keyhunt.cpp:2414:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 2414 |         do      {
      |         ^
keyhunt.cpp:2415:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 2415 |                 if(FLAGRANDOM)  {
      |                 ^
keyhunt.cpp:2417:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2417 |                         for(k = 0; k < 21; k++) {
      |                         ^
keyhunt.cpp:2421:3: note: +1, nesting level increased to 2
 2421 |                 else    {
      |                 ^
keyhunt.cpp:2422:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2422 |                         if(FLAGBASEMINIKEY)     {
      |                         ^
keyhunt.cpp:2435:4: note: +1, nesting level increased to 3
 2435 |                         else    {
      |                         ^
keyhunt.cpp:2441:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2441 |                                 if(raw_baseminikey == NULL){
      |                                 ^
keyhunt.cpp:2445:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2445 |                                         for(k = 0; k < 21; k++) {
      |                                         ^
keyhunt.cpp:2452:5: note: +1, nesting level increased to 4
 2452 |                                 else    {
      |                                 ^
keyhunt.cpp:2465:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 2465 |                 if(continue_flag)       {
      |                 ^
keyhunt.cpp:2467:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2467 |                         if(FLAGMATRIX)  {
      |                         ^
keyhunt.cpp:2471:4: note: +1, nesting level increased to 3
 2471 |                         else    {
      |                         ^
keyhunt.cpp:2472:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2472 |                                 if(!FLAGQUIET)  {
      |                                 ^
keyhunt.cpp:2477:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2477 |                         do {
      |                         ^
keyhunt.cpp:2478:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2478 |                                 for(j = 0;j<256; j++)   {
      |                                 ^
keyhunt.cpp:2480:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2480 |                                         if(count_valid > 0)     {
      |                                         ^
keyhunt.cpp:2481:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2481 |                                                 for(k = 0; k < count_valid ; k++)       {
      |                                                 ^
keyhunt.cpp:2485:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2485 |                                         do      {
      |                                         ^
keyhunt.cpp:2496:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2496 |                                                 for(k = 0; k < 4; k++){
      |                                                 ^
keyhunt.cpp:2497:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 2497 |                                                         if(rawvalue[k][0] == 0x00)      {
      |                                                         ^
keyhunt.cpp:2506:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2506 |                                         for(k = 0; k < 4; k++)  {
      |                                         ^
keyhunt.cpp:2513:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2513 |                                         for(k = 0; k < 4; k++)  {
      |                                         ^
keyhunt.cpp:2515:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2515 |                                                 if(r) {
      |                                                 ^
keyhunt.cpp:2517:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 2517 |                                                         if(r) {
      |                                                         ^
keyhunt.cpp:2530:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 2530 |                                                                 if(keys != NULL)        {
      |                                                                 ^
keyhunt.cpp:2548:36: note: +1
 2548 |                         }while(count < N_SEQUENTIAL_MAX && continue_flag);
      |                                                         ^
keyhunt.cpp:2392:19: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
 2392 |         struct tothread *tt;
      |                          ^
keyhunt.cpp:2394:41: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2394 |         char publickeyhashrmd160_uncompress[4][20];
      |                                                ^
keyhunt.cpp:2395:35: warning: 131 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2395 |         char public_key_uncompressed_hex[131];
      |                                          ^
keyhunt.cpp:2396:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2396 |         char address[4][40],minikey[4][24],minikeys[8][24],buffer_b58[21],minikey2check[24],rawvalue[4][32];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:2396:18: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2396 |         char address[4][40],minikey[4][24],minikeys[8][24],buffer_b58[21],minikey2check[24],rawvalue[4][32];
      |                         ^
keyhunt.cpp:2396:33: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2396 |         char address[4][40],minikey[4][24],minikeys[8][24],buffer_b58[21],minikey2check[24],rawvalue[4][32];
      |                                        ^
keyhunt.cpp:2396:46: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2396 |         char address[4][40],minikey[4][24],minikeys[8][24],buffer_b58[21],minikey2check[24],rawvalue[4][32];
      |                                                     ^
keyhunt.cpp:2396:49: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2396 |         char address[4][40],minikey[4][24],minikeys[8][24],buffer_b58[21],minikey2check[24],rawvalue[4][32];
      |                                                        ^
keyhunt.cpp:2396:64: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2396 |         char address[4][40],minikey[4][24],minikeys[8][24],buffer_b58[21],minikey2check[24],rawvalue[4][32];
      |                                                                       ^
keyhunt.cpp:2396:82: warning: 24 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2396 |         char address[4][40],minikey[4][24],minikeys[8][24],buffer_b58[21],minikey2check[24],rawvalue[4][32];
      |                                                                                         ^
keyhunt.cpp:2396:98: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2396 |         char address[4][40],minikey[4][24],minikeys[8][24],buffer_b58[21],minikey2check[24],rawvalue[4][32];
      |                                                                                                         ^
keyhunt.cpp:2397:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2397 |         char *hextemp,*rawbuffer;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:2398:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2398 |         int r,thread_number,continue_flag = 1,k,j,count_valid;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:2398:6: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 2398 |         int r,thread_number,continue_flag = 1,k,j,count_valid;
      |             ^
keyhunt.cpp:2398:40: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 2398 |         int r,thread_number,continue_flag = 1,k,j,count_valid;
      |                                               ^
keyhunt.cpp:2398:42: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 2398 |         int r,thread_number,continue_flag = 1,k,j,count_valid;
      |                                                 ^
keyhunt.cpp:2407:14: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2407 |                 minikey[k][22] = '?';
      |                            ^
keyhunt.cpp:2408:14: warning: 23 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2408 |                 minikey[k][23] = 0x00;
      |                            ^
keyhunt.cpp:2411:16: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2411 |         minikey2check[22] = '?';
      |                       ^
keyhunt.cpp:2412:16: warning: 23 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2412 |         minikey2check[23] = 0x00;
      |                       ^
keyhunt.cpp:2415:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2415 |                 if(FLAGRANDOM)  {
      |                    ^         
      |                               != 0
keyhunt.cpp:2416:17: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2416 |                         counter.Rand(256);
      |                                      ^
keyhunt.cpp:2417:19: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2417 |                         for(k = 0; k < 21; k++) {
      |                                        ^
keyhunt.cpp:2418:55: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2418 |                                 buffer_b58[k] =(uint8_t)((uint8_t) rawbuffer[k] % 58);
      |                                                                                   ^
keyhunt.cpp:2422:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2422 |                         if(FLAGBASEMINIKEY)     {
      |                            ^              
      |                                            != 0
keyhunt.cpp:2430:39: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2430 |                                 memcpy(buffer_b58,raw_baseminikey,21);
      |                                                                   ^
keyhunt.cpp:2442:40: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2442 |                                         raw_baseminikey = (char *) malloc(22);
      |                                                                           ^
keyhunt.cpp:2444:19: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2444 |                                         counter.Rand(256);
      |                                                      ^
keyhunt.cpp:2445:21: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2445 |                                         for(k = 0; k < 21; k++) {
      |                                                        ^
keyhunt.cpp:2446:62: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2446 |                                                 raw_baseminikey[k] =(uint8_t)((uint8_t) rawbuffer[k] % 58);
      |                                                                                                        ^
keyhunt.cpp:2448:40: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2448 |                                         memcpy(buffer_b58,raw_baseminikey,21);
      |                                                                           ^
keyhunt.cpp:2453:40: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2453 |                                         memcpy(buffer_b58,raw_baseminikey,21);
      |                                                                           ^
keyhunt.cpp:2464:42: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2464 |                 set_minikey(minikey2check+1,buffer_b58,21);
      |                                                        ^
keyhunt.cpp:2465:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2465 |                 if(continue_flag)       {
      |                    ^            
      |                                  != 0
keyhunt.cpp:2467:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2467 |                         if(FLAGMATRIX)  {
      |                            ^         
      |                                       != 0
keyhunt.cpp:2472:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2472 |                                 if(!FLAGQUIET)  {
      |                                    ~^        
      |                                               == 0
keyhunt.cpp:2478:17: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2478 |                                 for(j = 0;j<256; j++)   {
      |                                             ^
keyhunt.cpp:2482:41: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2482 |                                                         memcpy(minikeys[k],minikeys[4+k],22);
      |                                                                                          ^
keyhunt.cpp:2486:58: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2486 |                                                 increment_minikey_index(minikey2check+1,buffer_b58,20);
      |                                                                                                    ^
keyhunt.cpp:2487:43: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2487 |                                                 memcpy(minikey[0]+1,minikey2check+1,21);
      |                                                                                     ^
keyhunt.cpp:2488:58: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2488 |                                                 increment_minikey_index(minikey2check+1,buffer_b58,20);
      |                                                                                                    ^
keyhunt.cpp:2489:43: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2489 |                                                 memcpy(minikey[1]+1,minikey2check+1,21);
      |                                                                                     ^
keyhunt.cpp:2490:58: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2490 |                                                 increment_minikey_index(minikey2check+1,buffer_b58,20);
      |                                                                                                    ^
keyhunt.cpp:2491:43: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2491 |                                                 memcpy(minikey[2]+1,minikey2check+1,21);
      |                                                                                     ^
keyhunt.cpp:2492:58: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2492 |                                                 increment_minikey_index(minikey2check+1,buffer_b58,20);
      |                                                                                                    ^
keyhunt.cpp:2493:43: warning: 21 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2493 |                                                 memcpy(minikey[3]+1,minikey2check+1,21);
      |                                                                                     ^
keyhunt.cpp:2498:49: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2498 |                                                                 memcpy(minikeys[count_valid],minikey[k],22);
      |                                                                                                         ^
keyhunt.cpp:2514:64: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2514 |                                                 r = bloom_check(&bloom,publickeyhashrmd160_uncompress[k],20);
      |                                                                                                          ^
keyhunt.cpp:2515:10: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2515 |                                                 if(r) {
      |                                                    ^
      |                                                      != 0
keyhunt.cpp:2517:11: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2517 |                                                         if(r) {
      |                                                            ^
      |                                                              != 0
keyhunt.cpp:2529:21: warning: 22 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2529 |                                                                 minikeys[k][22] = '\0';
      |                                                                             ^
keyhunt.cpp:2547:12: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2547 |                                 count+=1024;
      |                                        ^
keyhunt.cpp:2548:39: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2548 |                         }while(count < N_SEQUENTIAL_MAX && continue_flag);
      |                                                            ^            
      |                                                            (             != 0)
keyhunt.cpp:2550:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2550 |         }while(continue_flag);
      |                ^            
      |                              != 0
keyhunt.cpp:2558:7: warning: function 'thread_process' has cognitive complexity of 811 (threshold 25) [readability-function-cognitive-complexity]
 2558 | void *thread_process(void *vargp)       {
      |       ^
keyhunt.cpp:2563:42: note: +1, including nesting penalty of 0, nesting level increased to 1
 2563 |         uint32_t effective_batch_size = FLAGGPU ? GPU_BATCH_SIZE : CPU_GRP_SIZE;
      |                                                 ^
keyhunt.cpp:2593:82: note: +1
 2593 |         bool calculate_y = FLAGSEARCH == SEARCH_UNCOMPRESS || FLAGSEARCH == SEARCH_BOTH || FLAGCRYPTO  == CRYPTO_ETH;
      |                                                                                         ^
keyhunt.cpp:2602:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 2602 |         if(FLAGGPU) {
      |         ^
keyhunt.cpp:2607:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 2607 |                 if(!h_priv_le || !h_pubx_le || !h_puby_le) {
      |                 ^
keyhunt.cpp:2607:31: note: +1
 2607 |                 if(!h_priv_le || !h_pubx_le || !h_puby_le) {
      |                                             ^
keyhunt.cpp:2609:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2609 |                         if(h_priv_le) free(h_priv_le);
      |                         ^
keyhunt.cpp:2610:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2610 |                         if(h_pubx_le) free(h_pubx_le);
      |                         ^
keyhunt.cpp:2611:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2611 |                         if(h_puby_le) free(h_puby_le);
      |                         ^
keyhunt.cpp:2616:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 2616 |         do {
      |         ^
keyhunt.cpp:2617:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 2617 |                 if(FLAGRANDOM){
      |                 ^
keyhunt.cpp:2620:3: note: +1, nesting level increased to 2
 2620 |                 else    {
      |                 ^
keyhunt.cpp:2621:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2621 |                         if(n_range_start.IsLower(&n_range_end)) {
      |                         ^
keyhunt.cpp:2634:4: note: +1, nesting level increased to 3
 2634 |                         else    {
      |                         ^
keyhunt.cpp:2638:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 2638 |                 if(continue_flag)       {
      |                 ^
keyhunt.cpp:2640:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2640 |                         if(FLAGMATRIX)  {
      |                         ^
keyhunt.cpp:2646:4: note: +1, nesting level increased to 3
 2646 |                         else    {
      |                         ^
keyhunt.cpp:2647:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2647 |                                 if(FLAGQUIET == 0){
      |                                 ^
keyhunt.cpp:2657:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2657 |                         if(FLAGGPU) {
      |                         ^
keyhunt.cpp:2661:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2661 |                                 for(uint32_t i = 0; i < GPU_BATCH_SIZE; i++) {
      |                                 ^
keyhunt.cpp:2663:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2663 |                                         if(i > 0) {
      |                                         ^
keyhunt.cpp:2670:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2670 |                                         for(int j = 0; j < 8; j++) {
      |                                         ^
keyhunt.cpp:2671:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2671 |                                                 if(j < 8) {
      |                                                 ^
keyhunt.cpp:2672:44: note: +7, including nesting penalty of 6, nesting level increased to 7
 2672 |                                                         uint64_t limb64 = (j/2 < NB64BLOCK) ? temp_key.bits64[j/2] : 0ULL;
      |                                                                                             ^
keyhunt.cpp:2673:40: note: +7, including nesting penalty of 6, nesting level increased to 7
 2673 |                                                         h_priv_le[i*8 + j] = (j%2 == 0) ? (uint32_t)(limb64 & 0xFFFFFFFFULL) : (uint32_t)(limb64 >> 32);
      |                                                                                         ^
keyhunt.cpp:2674:9: note: +1, nesting level increased to 6
 2674 |                                                 } else {
      |                                                   ^
keyhunt.cpp:2682:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2682 |                                 if(rc != 0) {
      |                                 ^
keyhunt.cpp:2688:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2688 |                                 for(uint32_t i = 0; i < GPU_BATCH_SIZE; i++) {
      |                                 ^
keyhunt.cpp:2691:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2691 |                                         for(int j = 0; j < 4; j++) {  // Only need first 4 uint64 for 256-bit
      |                                         ^
keyhunt.cpp:2711:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 2711 |                         do {
      |                         ^
keyhunt.cpp:2712:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2712 |                                 if(FLAGGPU) break;  // GPU mode skips CPU point group
      |                                 ^
keyhunt.cpp:2719:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2719 |                                 for(i = 0; i < hLength; i++) {
      |                                 ^
keyhunt.cpp:2729:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2729 |                                 for(i = 0; i<hLength; i++) {
      |                                 ^
keyhunt.cpp:2743:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2743 |                                         if(calculate_y) {
      |                                         ^
keyhunt.cpp:2760:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2760 |                                         if(calculate_y) {
      |                                         ^
keyhunt.cpp:2772:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2772 |                                         if(FLAGENDOMORPHISM)    {
      |                                         ^
keyhunt.cpp:2781:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 2781 |                                                 if( calculate_y  )      {
      |                                                 ^
keyhunt.cpp:2796:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2796 |                                 if(FLAGENDOMORPHISM)    {
      |                                 ^
keyhunt.cpp:2797:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2797 |                                         if( calculate_y  )      {
      |                                         ^
keyhunt.cpp:2819:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2819 |                                 if(calculate_y) {
      |                                 ^
keyhunt.cpp:2830:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2830 |                                 if(FLAGENDOMORPHISM)    {
      |                                 ^
keyhunt.cpp:2831:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2831 |                                         if( calculate_y  )      {
      |                                         ^
keyhunt.cpp:2840:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 2840 |                                 for(j = 0; j < CPU_GRP_SIZE/4;j++){
      |                                 ^
keyhunt.cpp:2841:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2841 |                                         switch(FLAGMODE)        {
      |                                         ^
keyhunt.cpp:2844:8: note: +6, including nesting penalty of 5, nesting level increased to 6
 2844 |                                                         if(FLAGCRYPTO == CRYPTO_BTC){
      |                                                         ^
keyhunt.cpp:2846:9: note: +7, including nesting penalty of 6, nesting level increased to 7
 2846 |                                                                 if(FLAGSEARCH == SEARCH_COMPRESS || FLAGSEARCH == SEARCH_BOTH ){
      |                                                                 ^
keyhunt.cpp:2846:42: note: +1
 2846 |                                                                 if(FLAGSEARCH == SEARCH_COMPRESS || FLAGSEARCH == SEARCH_BOTH ){
      |                                                                                                  ^
keyhunt.cpp:2847:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 2847 |                                                                         if(FLAGENDOMORPHISM)    {
      |                                                                         ^
keyhunt.cpp:2857:10: note: +1, nesting level increased to 8
 2857 |                                                                         else    {
      |                                                                         ^
keyhunt.cpp:2863:9: note: +7, including nesting penalty of 6, nesting level increased to 7
 2863 |                                                                 if(FLAGSEARCH == SEARCH_UNCOMPRESS || FLAGSEARCH == SEARCH_BOTH){
      |                                                                 ^
keyhunt.cpp:2863:44: note: +1
 2863 |                                                                 if(FLAGSEARCH == SEARCH_UNCOMPRESS || FLAGSEARCH == SEARCH_BOTH){
      |                                                                                                    ^
keyhunt.cpp:2864:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 2864 |                                                                         if(FLAGENDOMORPHISM)    {
      |                                                                         ^
keyhunt.cpp:2865:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 2865 |                                                                                 for(l = 0; l < 4; l++)  {
      |                                                                                 ^
keyhunt.cpp:2870:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 2870 |                                                                                 for(l = 0; l < 4; l++)  {
      |                                                                                 ^
keyhunt.cpp:2876:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 2876 |                                                                                 for(l = 0; l < 4; l++)  {
      |                                                                                 ^
keyhunt.cpp:2883:10: note: +1, nesting level increased to 8
 2883 |                                                                         else    {
      |                                                                         ^
keyhunt.cpp:2889:13: note: +1, nesting level increased to 6
 2889 |                                                         else if(FLAGCRYPTO == CRYPTO_ETH){
      |                                                              ^
keyhunt.cpp:2890:9: note: +7, including nesting penalty of 6, nesting level increased to 7
 2890 |                                                                 if(FLAGENDOMORPHISM)    {
      |                                                                 ^
keyhunt.cpp:2891:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 2891 |                                                                         for(k = 0; k < 4;k++)   {
      |                                                                         ^
keyhunt.cpp:2903:9: note: +1, nesting level increased to 7
 2903 |                                                                 else    {
      |                                                                 ^
keyhunt.cpp:2904:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 2904 |                                                                         for(k = 0; k < 4;k++)   {
      |                                                                         ^
keyhunt.cpp:2914:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 2914 |                                         switch(FLAGMODE)        {
      |                                         ^
keyhunt.cpp:2917:8: note: +6, including nesting penalty of 5, nesting level increased to 6
 2917 |                                                         if( FLAGCRYPTO  == CRYPTO_BTC) {
      |                                                         ^
keyhunt.cpp:2919:9: note: +7, including nesting penalty of 6, nesting level increased to 7
 2919 |                                                                 for(k = 0; k < 4;k++)   {
      |                                                                 ^
keyhunt.cpp:2920:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 2920 |                                                                         if(FLAGSEARCH == SEARCH_COMPRESS || FLAGSEARCH == SEARCH_BOTH){
      |                                                                         ^
keyhunt.cpp:2920:43: note: +1
 2920 |                                                                         if(FLAGSEARCH == SEARCH_COMPRESS || FLAGSEARCH == SEARCH_BOTH){
      |                                                                                                          ^
keyhunt.cpp:2921:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 2921 |                                                                                 if(FLAGENDOMORPHISM)    {
      |                                                                                 ^
keyhunt.cpp:2922:12: note: +10, including nesting penalty of 9, nesting level increased to 10
 2922 |                                                                                         for(l = 0;l < 6; l++)   {
      |                                                                                         ^
keyhunt.cpp:2924:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 2924 |                                                                                                 if(r) {
      |                                                                                                 ^
keyhunt.cpp:2926:14: note: +12, including nesting penalty of 11, nesting level increased to 12
 2926 |                                                                                                         if(r) {
      |                                                                                                         ^
keyhunt.cpp:2931:15: note: +13, including nesting penalty of 12, nesting level increased to 13
 2931 |                                                                                                                 switch(l)       {
      |                                                                                                                 ^
keyhunt.cpp:2933:17: note: +14, including nesting penalty of 13, nesting level increased to 14
 2933 |                                                                                                                                 if(publickey.y.IsOdd()) {       //if the current publickey is odd that means, we need to negate the keyfound to get the correct key
      |                                                                                                                                 ^
keyhunt.cpp:2940:17: note: +14, including nesting penalty of 13, nesting level increased to 14
 2940 |                                                                                                                                 if(publickey.y.IsEven())        {       //if the current publickey is even that means, we need to negate the keyfound to get the correct key
      |                                                                                                                                 ^
keyhunt.cpp:2948:17: note: +14, including nesting penalty of 13, nesting level increased to 14
 2948 |                                                                                                                                 if(publickey.y.IsOdd()) {       //if the current publickey is odd that means, we need to negate the keyfound to get the correct key
      |                                                                                                                                 ^
keyhunt.cpp:2956:17: note: +14, including nesting penalty of 13, nesting level increased to 14
 2956 |                                                                                                                                 if(publickey.y.IsEven())        {       //if the current publickey is even that means, we need to negate the keyfound to get the correct key
      |                                                                                                                                 ^
keyhunt.cpp:2964:17: note: +14, including nesting penalty of 13, nesting level increased to 14
 2964 |                                                                                                                                 if(publickey.y.IsOdd()) {       //if the current publickey is odd that means, we need to negate the keyfound to get the correct key
      |                                                                                                                                 ^
keyhunt.cpp:2972:17: note: +14, including nesting penalty of 13, nesting level increased to 14
 2972 |                                                                                                                                 if(publickey.y.IsEven())        {       //if the current publickey is even that means, we need to negate the keyfound to get the correct key
      |                                                                                                                                 ^
keyhunt.cpp:2984:11: note: +1, nesting level increased to 9
 2984 |                                                                                 else    {
      |                                                                                 ^
keyhunt.cpp:2985:12: note: +10, including nesting penalty of 9, nesting level increased to 10
 2985 |                                                                                         for(l = 0;l < 2; l++)   {
      |                                                                                         ^
keyhunt.cpp:2987:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 2987 |                                                                                                 if(r) {
      |                                                                                                 ^
keyhunt.cpp:2989:14: note: +12, including nesting penalty of 11, nesting level increased to 12
 2989 |                                                                                                         if(r) {
      |                                                                                                         ^
keyhunt.cpp:2996:15: note: +13, including nesting penalty of 12, nesting level increased to 13
 2996 |                                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160,20) != 0)  {
      |                                                                                                                 ^
keyhunt.cpp:3007:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 3007 |                                                                         if(FLAGSEARCH == SEARCH_UNCOMPRESS || FLAGSEARCH == SEARCH_BOTH)        {
      |                                                                         ^
keyhunt.cpp:3007:45: note: +1
 3007 |                                                                         if(FLAGSEARCH == SEARCH_UNCOMPRESS || FLAGSEARCH == SEARCH_BOTH)        {
      |                                                                                                            ^
keyhunt.cpp:3008:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 3008 |                                                                                 if(FLAGENDOMORPHISM)    {
      |                                                                                 ^
keyhunt.cpp:3009:12: note: +10, including nesting penalty of 9, nesting level increased to 10
 3009 |                                                                                         for(l = 6;l < 12; l++)  {       //We check the array from 6 to 12(excluded) because we save the uncompressed information there
      |                                                                                         ^
keyhunt.cpp:3011:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3011 |                                                                                                 if(r) {
      |                                                                                                 ^
keyhunt.cpp:3013:14: note: +12, including nesting penalty of 11, nesting level increased to 12
 3013 |                                                                                                         if(r) {
      |                                                                                                         ^
keyhunt.cpp:3017:15: note: +13, including nesting penalty of 12, nesting level increased to 13
 3017 |                                                                                                                 switch(l)       {
      |                                                                                                                 ^
keyhunt.cpp:3022:17: note: +14, including nesting penalty of 13, nesting level increased to 14
 3022 |                                                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                 ^
keyhunt.cpp:3032:17: note: +14, including nesting penalty of 13, nesting level increased to 14
 3032 |                                                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                 ^
keyhunt.cpp:3042:17: note: +14, including nesting penalty of 13, nesting level increased to 14
 3042 |                                                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                 ^
keyhunt.cpp:3053:11: note: +1, nesting level increased to 9
 3053 |                                                                                 else    {
      |                                                                                 ^
keyhunt.cpp:3055:12: note: +10, including nesting penalty of 9, nesting level increased to 10
 3055 |                                                                                         if(r) {
      |                                                                                         ^
keyhunt.cpp:3057:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3057 |                                                                                                 if(r) {
      |                                                                                                 ^
keyhunt.cpp:3068:13: note: +1, nesting level increased to 6
 3068 |                                                         else if( FLAGCRYPTO == CRYPTO_ETH) {
      |                                                              ^
keyhunt.cpp:3069:9: note: +7, including nesting penalty of 6, nesting level increased to 7
 3069 |                                                                 if(FLAGENDOMORPHISM)    {
      |                                                                 ^
keyhunt.cpp:3070:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 3070 |                                                                         for(k = 0; k < 4;k++)   {
      |                                                                         ^
keyhunt.cpp:3071:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 3071 |                                                                                 for(l = 0;l < 6; l++)   {
      |                                                                                 ^
keyhunt.cpp:3073:12: note: +10, including nesting penalty of 9, nesting level increased to 10
 3073 |                                                                                         if(r) {
      |                                                                                         ^
keyhunt.cpp:3075:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3075 |                                                                                                 if(r) {                                                                                         
      |                                                                                                 ^
keyhunt.cpp:3079:14: note: +12, including nesting penalty of 11, nesting level increased to 12
 3079 |                                                                                                         switch(l)       {
      |                                                                                                         ^
keyhunt.cpp:3084:16: note: +13, including nesting penalty of 12, nesting level increased to 13
 3084 |                                                                                                                         if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                         ^
keyhunt.cpp:3094:16: note: +13, including nesting penalty of 12, nesting level increased to 13
 3094 |                                                                                                                         if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                         ^
keyhunt.cpp:3104:16: note: +13, including nesting penalty of 12, nesting level increased to 13
 3104 |                                                                                                                         if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                         ^
keyhunt.cpp:3116:9: note: +1, nesting level increased to 7
 3116 |                                                                 else    {
      |                                                                 ^
keyhunt.cpp:3117:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 3117 |                                                                         for(k = 0; k < 4;k++)   {
      |                                                                         ^
keyhunt.cpp:3119:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 3119 |                                                                                 if(r) {
      |                                                                                 ^
keyhunt.cpp:3121:12: note: +10, including nesting penalty of 9, nesting level increased to 10
 3121 |                                                                                         if(r) {
      |                                                                                         ^
keyhunt.cpp:3133:8: note: +6, including nesting penalty of 5, nesting level increased to 6
 3133 |                                                         for(k = 0; k < 4;k++)   {
      |                                                         ^
keyhunt.cpp:3134:9: note: +7, including nesting penalty of 6, nesting level increased to 7
 3134 |                                                                 if(FLAGENDOMORPHISM)    {
      |                                                                 ^
keyhunt.cpp:3137:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 3137 |                                                                         if(r) {
      |                                                                         ^
keyhunt.cpp:3139:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 3139 |                                                                                 if(r) {
      |                                                                                 ^
keyhunt.cpp:3149:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 3149 |                                                                         if(r) {
      |                                                                         ^
keyhunt.cpp:3151:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 3151 |                                                                                 if(r) {
      |                                                                                 ^
keyhunt.cpp:3163:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 3163 |                                                                         if(r) {
      |                                                                         ^
keyhunt.cpp:3165:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 3165 |                                                                                 if(r) {
      |                                                                                 ^
keyhunt.cpp:3174:9: note: +1, nesting level increased to 7
 3174 |                                                                 else    {
      |                                                                 ^
keyhunt.cpp:3177:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 3177 |                                                                         if(r) {
      |                                                                         ^
keyhunt.cpp:3179:11: note: +9, including nesting penalty of 8, nesting level increased to 9
 3179 |                                                                                 if(r) {
      |                                                                                 ^
keyhunt.cpp:3192:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 3192 |                                         if(!FLAGGPU) {
      |                                         ^
keyhunt.cpp:3207:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 3207 |                                 if(!FLAGGPU) {
      |                                 ^
keyhunt.cpp:3227:36: note: +1
 3227 |                         }while(count < N_SEQUENTIAL_MAX && continue_flag);
      |                                                         ^
keyhunt.cpp:3230:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 3230 |                         if(FLAGGPU) {
      |                         ^
keyhunt.cpp:3241:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 3241 |         if(FLAGGPU) {
      |         ^
keyhunt.cpp:3242:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 3242 |                 if(h_priv_le) free(h_priv_le);
      |                 ^
keyhunt.cpp:3243:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 3243 |                 if(h_pubx_le) free(h_pubx_le);
      |                 ^
keyhunt.cpp:3244:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 3244 |                 if(h_puby_le) free(h_puby_le);
      |                 ^
keyhunt.cpp:2560:19: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
 2560 |         struct tothread *tt;
      |                          ^
keyhunt.cpp:2563:34: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2563 |         uint32_t effective_batch_size = FLAGGPU ? GPU_BATCH_SIZE : CPU_GRP_SIZE;
      |                                         ^
      |                                         (       != 0)
keyhunt.cpp:2571:7: warning: variable name 'dx' is too short, expected at least 3 characters [readability-identifier-length]
 2571 |         Int *dx = new Int[effective_batch_size / 2 + 1];
      |              ^
keyhunt.cpp:2574:6: warning: variable name 'dy' is too short, expected at least 3 characters [readability-identifier-length]
 2574 |         Int dy;
      |             ^
keyhunt.cpp:2576:6: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
 2576 |         Int _s;
      |             ^
keyhunt.cpp:2577:6: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
 2577 |         Int _p;
      |             ^
keyhunt.cpp:2578:8: warning: variable name 'pp' is too short, expected at least 3 characters [readability-identifier-length]
 2578 |         Point pp;
      |               ^
keyhunt.cpp:2579:8: warning: variable name 'pn' is too short, expected at least 3 characters [readability-identifier-length]
 2579 |         Point pn;
      |               ^
keyhunt.cpp:2580:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2580 |         int i,l,pp_offset,pn_offset;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:2580:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 2580 |         int i,l,pp_offset,pn_offset;
      |             ^
keyhunt.cpp:2580:8: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
 2580 |         int i,l,pp_offset,pn_offset;
      |               ^
keyhunt.cpp:2582:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2582 |         uint64_t j,count;
      |         ^~~~~~~~~~~~~~~~~
keyhunt.cpp:2582:11: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 2582 |         uint64_t j,count;
      |                  ^
keyhunt.cpp:2583:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2583 |         Point R,temporal,publickey;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:2583:8: warning: variable name 'R' is too short, expected at least 3 characters [readability-identifier-length]
 2583 |         Point R,temporal,publickey;
      |               ^
keyhunt.cpp:2584:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2584 |         int r,thread_number,continue_flag = 1,k;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:2584:6: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 2584 |         int r,thread_number,continue_flag = 1,k;
      |             ^
keyhunt.cpp:2584:40: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 2584 |         int r,thread_number,continue_flag = 1,k;
      |                                               ^
keyhunt.cpp:2587:27: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2587 |         char publickeyhashrmd160[20];
      |                                  ^
keyhunt.cpp:2588:41: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2588 |         char publickeyhashrmd160_uncompress[4][20];
      |                                                ^
keyhunt.cpp:2589:16: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2589 |         char rawvalue[32];
      |                       ^
keyhunt.cpp:2591:40: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2591 |         char publickeyhashrmd160_endomorphism[12][4][20];
      |                                               ^
keyhunt.cpp:2591:47: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2591 |         char publickeyhashrmd160_endomorphism[12][4][20];
      |                                                      ^
keyhunt.cpp:2594:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2594 |         Int key_mpz,keyfound,temp_stride;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:2601:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 2601 |         uint32_t *h_priv_le = nullptr, *h_pubx_le = nullptr, *h_puby_le = nullptr;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:2602:5: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2602 |         if(FLAGGPU) {
      |            ^      
      |                    != 0
keyhunt.cpp:2604:50: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2604 |                 h_priv_le = (uint32_t*)malloc(GPU_BATCH_SIZE * 8 * sizeof(uint32_t));
      |                                                                ^
keyhunt.cpp:2605:50: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2605 |                 h_pubx_le = (uint32_t*)malloc(GPU_BATCH_SIZE * 8 * sizeof(uint32_t));
      |                                                                ^
keyhunt.cpp:2606:50: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2606 |                 h_puby_le = (uint32_t*)malloc(GPU_BATCH_SIZE * 8 * sizeof(uint32_t));
      |                                                                ^
keyhunt.cpp:2607:7: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
 2607 |                 if(!h_priv_le || !h_pubx_le || !h_puby_le) {
      |                    ~^
      |                    (          == nullptr)
keyhunt.cpp:2607:21: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
 2607 |                 if(!h_priv_le || !h_pubx_le || !h_puby_le) {
      |                                  ~^
      |                                  (          == nullptr)
keyhunt.cpp:2607:35: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
 2607 |                 if(!h_priv_le || !h_pubx_le || !h_puby_le) {
      |                                                ~^        
      |                                                (          == nullptr)
keyhunt.cpp:2609:7: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
 2609 |                         if(h_priv_le) free(h_priv_le);
      |                            ^        
      |                                      != nullptr
keyhunt.cpp:2609:17: warning: statement should be inside braces [readability-braces-around-statements]
 2609 |                         if(h_priv_le) free(h_priv_le);
      |                                      ^                
      |                                       {
keyhunt.cpp:2610:7: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
 2610 |                         if(h_pubx_le) free(h_pubx_le);
      |                            ^        
      |                                      != nullptr
keyhunt.cpp:2610:17: warning: statement should be inside braces [readability-braces-around-statements]
 2610 |                         if(h_pubx_le) free(h_pubx_le);
      |                                      ^                
      |                                       {
keyhunt.cpp:2611:7: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
 2611 |                         if(h_puby_le) free(h_puby_le);
      |                            ^        
      |                                      != nullptr
keyhunt.cpp:2611:17: warning: statement should be inside braces [readability-braces-around-statements]
 2611 |                         if(h_puby_le) free(h_puby_le);
      |                                      ^                
      |                                       {
keyhunt.cpp:2617:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2617 |                 if(FLAGRANDOM){
      |                    ^         
      |                               != 0
keyhunt.cpp:2638:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2638 |                 if(continue_flag)       {
      |                    ^            
      |                                  != 0
keyhunt.cpp:2640:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2640 |                         if(FLAGMATRIX)  {
      |                            ^         
      |                                       != 0
keyhunt.cpp:2657:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2657 |                         if(FLAGGPU) {
      |                            ^      
      |                                    != 0
keyhunt.cpp:2670:25: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2670 |                                         for(int j = 0; j < 8; j++) {
      |                                                            ^
keyhunt.cpp:2671:14: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2671 |                                                 if(j < 8) {
      |                                                        ^
keyhunt.cpp:2673:20: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2673 |                                                         h_priv_le[i*8 + j] = (j%2 == 0) ? (uint32_t)(limb64 & 0xFFFFFFFFULL) : (uint32_t)(limb64 >> 32);
      |                                                                     ^
keyhunt.cpp:2673:62: warning: 0xFFFFFFFFULL is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2673 |                                                         h_priv_le[i*8 + j] = (j%2 == 0) ? (uint32_t)(limb64 & 0xFFFFFFFFULL) : (uint32_t)(limb64 >> 32);
      |                                                                                                               ^
keyhunt.cpp:2673:100: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2673 |                                                         h_priv_le[i*8 + j] = (j%2 == 0) ? (uint32_t)(limb64 & 0xFFFFFFFFULL) : (uint32_t)(limb64 >> 32);
      |                                                                                                                                                     ^
keyhunt.cpp:2675:20: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2675 |                                                         h_priv_le[i*8 + j] = 0u;
      |                                                                     ^
keyhunt.cpp:2675:29: warning: integer literal has suffix 'u', which is not uppercase [readability-uppercase-literal-suffix]
 2675 |                                                         h_priv_le[i*8 + j] = 0u;
      |                                                                              ^~
      |                                                                               U
keyhunt.cpp:2681:9: warning: variable name 'rc' is too short, expected at least 3 characters [readability-identifier-length]
 2681 |                                 int rc = GPU_BatchPrivToPub(h_priv_le, h_pubx_le, h_puby_le, GPU_BATCH_SIZE, 256);
      |                                     ^
keyhunt.cpp:2681:82: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2681 |                                 int rc = GPU_BatchPrivToPub(h_priv_le, h_pubx_le, h_puby_le, GPU_BATCH_SIZE, 256);
      |                                                                                                              ^
keyhunt.cpp:2692:48: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2692 |                                                 uint64_t x_limb = ((uint64_t)h_pubx_le[i*8 + j*2]) | (((uint64_t)h_pubx_le[i*8 + j*2 + 1]) << 32);
      |                                                                                          ^
keyhunt.cpp:2692:84: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2692 |                                                 uint64_t x_limb = ((uint64_t)h_pubx_le[i*8 + j*2]) | (((uint64_t)h_pubx_le[i*8 + j*2 + 1]) << 32);
      |                                                                                                                              ^
keyhunt.cpp:2692:101: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2692 |                                                 uint64_t x_limb = ((uint64_t)h_pubx_le[i*8 + j*2]) | (((uint64_t)h_pubx_le[i*8 + j*2 + 1]) << 32);
      |                                                                                                                                               ^
keyhunt.cpp:2693:48: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2693 |                                                 uint64_t y_limb = ((uint64_t)h_puby_le[i*8 + j*2]) | (((uint64_t)h_puby_le[i*8 + j*2 + 1]) << 32);
      |                                                                                          ^
keyhunt.cpp:2693:84: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2693 |                                                 uint64_t y_limb = ((uint64_t)h_puby_le[i*8 + j*2]) | (((uint64_t)h_puby_le[i*8 + j*2 + 1]) << 32);
      |                                                                                                                              ^
keyhunt.cpp:2693:101: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2693 |                                                 uint64_t y_limb = ((uint64_t)h_puby_le[i*8 + j*2]) | (((uint64_t)h_puby_le[i*8 + j*2 + 1]) << 32);
      |                                                                                                                                               ^
keyhunt.cpp:2712:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2712 |                                 if(FLAGGPU) break;  // GPU mode skips CPU point group
      |                                    ^      
      |                                            != 0
keyhunt.cpp:2712:16: warning: statement should be inside braces [readability-braces-around-statements]
 2712 |                                 if(FLAGGPU) break;  // GPU mode skips CPU point group
      |                                            ^                                         
      |                                             {
keyhunt.cpp:2772:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2772 |                                         if(FLAGENDOMORPHISM)    {
      |                                            ^               
      |                                                             != 0
keyhunt.cpp:2796:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2796 |                                 if(FLAGENDOMORPHISM)    {
      |                                    ^               
      |                                                     != 0
keyhunt.cpp:2830:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2830 |                                 if(FLAGENDOMORPHISM)    {
      |                                    ^               
      |                                                     != 0
keyhunt.cpp:2847:13: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2847 |                                                                         if(FLAGENDOMORPHISM)    {
      |                                                                            ^               
      |                                                                                             != 0
keyhunt.cpp:2855:210: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2855 |                                                                                 secp->GetHash160_fromX(P2PKH,0x03,&endomorphism_beta2[(j*4)].x,&endomorphism_beta2[(j*4)+1].x,&endomorphism_beta2[(j*4)+2].x,&endomorphism_beta2[(j*4)+3].x,(uint8_t*)publickeyhashrmd160_endomorphism[5][0],(uint8_t*)publickeyhashrmd160_endomorphism[5][1],(uint8_t*)publickeyhashrmd160_endomorphism[5][2],(uint8_t*)publickeyhashrmd160_endomorphism[5][3]);
      |                                                                                                                                                                                                                                                                                        ^
keyhunt.cpp:2855:259: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2855 |                                                                                 secp->GetHash160_fromX(P2PKH,0x03,&endomorphism_beta2[(j*4)].x,&endomorphism_beta2[(j*4)+1].x,&endomorphism_beta2[(j*4)+2].x,&endomorphism_beta2[(j*4)+3].x,(uint8_t*)publickeyhashrmd160_endomorphism[5][0],(uint8_t*)publickeyhashrmd160_endomorphism[5][1],(uint8_t*)publickeyhashrmd160_endomorphism[5][2],(uint8_t*)publickeyhashrmd160_endomorphism[5][3]);
      |                                                                                                                                                                                                                                                                                                                                         ^
keyhunt.cpp:2855:308: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2855 |                                                                                 secp->GetHash160_fromX(P2PKH,0x03,&endomorphism_beta2[(j*4)].x,&endomorphism_beta2[(j*4)+1].x,&endomorphism_beta2[(j*4)+2].x,&endomorphism_beta2[(j*4)+3].x,(uint8_t*)publickeyhashrmd160_endomorphism[5][0],(uint8_t*)publickeyhashrmd160_endomorphism[5][1],(uint8_t*)publickeyhashrmd160_endomorphism[5][2],(uint8_t*)publickeyhashrmd160_endomorphism[5][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                          ^
keyhunt.cpp:2855:357: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2855 |                                                                                 secp->GetHash160_fromX(P2PKH,0x03,&endomorphism_beta2[(j*4)].x,&endomorphism_beta2[(j*4)+1].x,&endomorphism_beta2[(j*4)+2].x,&endomorphism_beta2[(j*4)+3].x,(uint8_t*)publickeyhashrmd160_endomorphism[5][0],(uint8_t*)publickeyhashrmd160_endomorphism[5][1],(uint8_t*)publickeyhashrmd160_endomorphism[5][2],(uint8_t*)publickeyhashrmd160_endomorphism[5][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                                                           ^
keyhunt.cpp:2864:13: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2864 |                                                                         if(FLAGENDOMORPHISM)    {
      |                                                                            ^               
      |                                                                                             != 0
keyhunt.cpp:2868:137: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2868 |                                                                                 secp->GetHash160(P2PKH,false, pts[(j*4)], pts[(j*4)+1], pts[(j*4)+2], pts[(j*4)+3],(uint8_t*)publickeyhashrmd160_endomorphism[6][0],(uint8_t*)publickeyhashrmd160_endomorphism[6][1],(uint8_t*)publickeyhashrmd160_endomorphism[6][2],(uint8_t*)publickeyhashrmd160_endomorphism[6][3]);
      |                                                                                                                                                                                                               ^
keyhunt.cpp:2868:186: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2868 |                                                                                 secp->GetHash160(P2PKH,false, pts[(j*4)], pts[(j*4)+1], pts[(j*4)+2], pts[(j*4)+3],(uint8_t*)publickeyhashrmd160_endomorphism[6][0],(uint8_t*)publickeyhashrmd160_endomorphism[6][1],(uint8_t*)publickeyhashrmd160_endomorphism[6][2],(uint8_t*)publickeyhashrmd160_endomorphism[6][3]);
      |                                                                                                                                                                                                                                                                ^
keyhunt.cpp:2868:235: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2868 |                                                                                 secp->GetHash160(P2PKH,false, pts[(j*4)], pts[(j*4)+1], pts[(j*4)+2], pts[(j*4)+3],(uint8_t*)publickeyhashrmd160_endomorphism[6][0],(uint8_t*)publickeyhashrmd160_endomorphism[6][1],(uint8_t*)publickeyhashrmd160_endomorphism[6][2],(uint8_t*)publickeyhashrmd160_endomorphism[6][3]);
      |                                                                                                                                                                                                                                                                                                                 ^
keyhunt.cpp:2868:284: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2868 |                                                                                 secp->GetHash160(P2PKH,false, pts[(j*4)], pts[(j*4)+1], pts[(j*4)+2], pts[(j*4)+3],(uint8_t*)publickeyhashrmd160_endomorphism[6][0],(uint8_t*)publickeyhashrmd160_endomorphism[6][1],(uint8_t*)publickeyhashrmd160_endomorphism[6][2],(uint8_t*)publickeyhashrmd160_endomorphism[6][3]);
      |                                                                                                                                                                                                                                                                                                                                                                  ^
keyhunt.cpp:2869:204: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2869 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0] ,endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[7][0],(uint8_t*)publickeyhashrmd160_endomorphism[7][1],(uint8_t*)publickeyhashrmd160_endomorphism[7][2],(uint8_t*)publickeyhashrmd160_endomorphism[7][3]);
      |                                                                                                                                                                                                                                                                                  ^
keyhunt.cpp:2869:253: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2869 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0] ,endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[7][0],(uint8_t*)publickeyhashrmd160_endomorphism[7][1],(uint8_t*)publickeyhashrmd160_endomorphism[7][2],(uint8_t*)publickeyhashrmd160_endomorphism[7][3]);
      |                                                                                                                                                                                                                                                                                                                                   ^
keyhunt.cpp:2869:302: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2869 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0] ,endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[7][0],(uint8_t*)publickeyhashrmd160_endomorphism[7][1],(uint8_t*)publickeyhashrmd160_endomorphism[7][2],(uint8_t*)publickeyhashrmd160_endomorphism[7][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                    ^
keyhunt.cpp:2869:351: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2869 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0] ,endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[7][0],(uint8_t*)publickeyhashrmd160_endomorphism[7][1],(uint8_t*)publickeyhashrmd160_endomorphism[7][2],(uint8_t*)publickeyhashrmd160_endomorphism[7][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                                                     ^
keyhunt.cpp:2873:194: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2873 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_beta[(j*4)],  endomorphism_beta[(j*4)+1], endomorphism_beta[(j*4)+2], endomorphism_beta[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[8][0],(uint8_t*)publickeyhashrmd160_endomorphism[8][1],(uint8_t*)publickeyhashrmd160_endomorphism[8][2],(uint8_t*)publickeyhashrmd160_endomorphism[8][3]);
      |                                                                                                                                                                                                                                                                        ^
keyhunt.cpp:2873:243: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2873 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_beta[(j*4)],  endomorphism_beta[(j*4)+1], endomorphism_beta[(j*4)+2], endomorphism_beta[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[8][0],(uint8_t*)publickeyhashrmd160_endomorphism[8][1],(uint8_t*)publickeyhashrmd160_endomorphism[8][2],(uint8_t*)publickeyhashrmd160_endomorphism[8][3]);
      |                                                                                                                                                                                                                                                                                                                         ^
keyhunt.cpp:2873:292: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2873 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_beta[(j*4)],  endomorphism_beta[(j*4)+1], endomorphism_beta[(j*4)+2], endomorphism_beta[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[8][0],(uint8_t*)publickeyhashrmd160_endomorphism[8][1],(uint8_t*)publickeyhashrmd160_endomorphism[8][2],(uint8_t*)publickeyhashrmd160_endomorphism[8][3]);
      |                                                                                                                                                                                                                                                                                                                                                                          ^
keyhunt.cpp:2873:341: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2873 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_beta[(j*4)],  endomorphism_beta[(j*4)+1], endomorphism_beta[(j*4)+2], endomorphism_beta[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[8][0],(uint8_t*)publickeyhashrmd160_endomorphism[8][1],(uint8_t*)publickeyhashrmd160_endomorphism[8][2],(uint8_t*)publickeyhashrmd160_endomorphism[8][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                                           ^
keyhunt.cpp:2874:203: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2874 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0],endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[9][0],(uint8_t*)publickeyhashrmd160_endomorphism[9][1],(uint8_t*)publickeyhashrmd160_endomorphism[9][2],(uint8_t*)publickeyhashrmd160_endomorphism[9][3]);
      |                                                                                                                                                                                                                                                                                 ^
keyhunt.cpp:2874:252: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2874 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0],endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[9][0],(uint8_t*)publickeyhashrmd160_endomorphism[9][1],(uint8_t*)publickeyhashrmd160_endomorphism[9][2],(uint8_t*)publickeyhashrmd160_endomorphism[9][3]);
      |                                                                                                                                                                                                                                                                                                                                  ^
keyhunt.cpp:2874:301: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2874 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0],endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[9][0],(uint8_t*)publickeyhashrmd160_endomorphism[9][1],(uint8_t*)publickeyhashrmd160_endomorphism[9][2],(uint8_t*)publickeyhashrmd160_endomorphism[9][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                   ^
keyhunt.cpp:2874:350: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2874 |                                                                                 secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0],endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[9][0],(uint8_t*)publickeyhashrmd160_endomorphism[9][1],(uint8_t*)publickeyhashrmd160_endomorphism[9][2],(uint8_t*)publickeyhashrmd160_endomorphism[9][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                                                    ^
keyhunt.cpp:2879:203: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2879 |                                                                                 secp->GetHash160(P2PKH,false, endomorphism_beta2[(j*4)],  endomorphism_beta2[(j*4)+1] ,  endomorphism_beta2[(j*4)+2] ,  endomorphism_beta2[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[10][0],(uint8_t*)publickeyhashrmd160_endomorphism[10][1],(uint8_t*)publickeyhashrmd160_endomorphism[10][2],(uint8_t*)publickeyhashrmd160_endomorphism[10][3]);
      |                                                                                                                                                                                                                                                                                 ^
keyhunt.cpp:2879:253: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2879 |                                                                                 secp->GetHash160(P2PKH,false, endomorphism_beta2[(j*4)],  endomorphism_beta2[(j*4)+1] ,  endomorphism_beta2[(j*4)+2] ,  endomorphism_beta2[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[10][0],(uint8_t*)publickeyhashrmd160_endomorphism[10][1],(uint8_t*)publickeyhashrmd160_endomorphism[10][2],(uint8_t*)publickeyhashrmd160_endomorphism[10][3]);
      |                                                                                                                                                                                                                                                                                                                                   ^
keyhunt.cpp:2879:303: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2879 |                                                                                 secp->GetHash160(P2PKH,false, endomorphism_beta2[(j*4)],  endomorphism_beta2[(j*4)+1] ,  endomorphism_beta2[(j*4)+2] ,  endomorphism_beta2[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[10][0],(uint8_t*)publickeyhashrmd160_endomorphism[10][1],(uint8_t*)publickeyhashrmd160_endomorphism[10][2],(uint8_t*)publickeyhashrmd160_endomorphism[10][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                     ^
keyhunt.cpp:2879:353: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2879 |                                                                                 secp->GetHash160(P2PKH,false, endomorphism_beta2[(j*4)],  endomorphism_beta2[(j*4)+1] ,  endomorphism_beta2[(j*4)+2] ,  endomorphism_beta2[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[10][0],(uint8_t*)publickeyhashrmd160_endomorphism[10][1],(uint8_t*)publickeyhashrmd160_endomorphism[10][2],(uint8_t*)publickeyhashrmd160_endomorphism[10][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                                                       ^
keyhunt.cpp:2880:208: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2880 |                                                                                 secp->GetHash160(P2PKH,false, endomorphism_negeted_point[0], endomorphism_negeted_point[1],   endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[11][0],(uint8_t*)publickeyhashrmd160_endomorphism[11][1],(uint8_t*)publickeyhashrmd160_endomorphism[11][2],(uint8_t*)publickeyhashrmd160_endomorphism[11][3]);
      |                                                                                                                                                                                                                                                                                      ^
keyhunt.cpp:2880:258: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2880 |                                                                                 secp->GetHash160(P2PKH,false, endomorphism_negeted_point[0], endomorphism_negeted_point[1],   endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[11][0],(uint8_t*)publickeyhashrmd160_endomorphism[11][1],(uint8_t*)publickeyhashrmd160_endomorphism[11][2],(uint8_t*)publickeyhashrmd160_endomorphism[11][3]);
      |                                                                                                                                                                                                                                                                                                                                        ^
keyhunt.cpp:2880:308: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2880 |                                                                                 secp->GetHash160(P2PKH,false, endomorphism_negeted_point[0], endomorphism_negeted_point[1],   endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[11][0],(uint8_t*)publickeyhashrmd160_endomorphism[11][1],(uint8_t*)publickeyhashrmd160_endomorphism[11][2],(uint8_t*)publickeyhashrmd160_endomorphism[11][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                          ^
keyhunt.cpp:2880:358: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2880 |                                                                                 secp->GetHash160(P2PKH,false, endomorphism_negeted_point[0], endomorphism_negeted_point[1],   endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[11][0],(uint8_t*)publickeyhashrmd160_endomorphism[11][1],(uint8_t*)publickeyhashrmd160_endomorphism[11][2],(uint8_t*)publickeyhashrmd160_endomorphism[11][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                                                            ^
keyhunt.cpp:2890:12: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2890 |                                                                 if(FLAGENDOMORPHISM)    {
      |                                                                    ^               
      |                                                                                     != 0
keyhunt.cpp:2900:108: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2900 |                                                                                 generate_binaddress_eth(endomorphism_negeted_point[k],(uint8_t*)publickeyhashrmd160_endomorphism[5][k]);
      |                                                                                                                                                                                  ^
keyhunt.cpp:2921:14: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2921 |                                                                                 if(FLAGENDOMORPHISM)    {
      |                                                                                    ^               
      |                                                                                                     != 0
keyhunt.cpp:2922:26: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2922 |                                                                                         for(l = 0;l < 6; l++)   {
      |                                                                                                       ^
keyhunt.cpp:2924:16: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2924 |                                                                                                 if(r) {
      |                                                                                                    ^
      |                                                                                                      != 0
keyhunt.cpp:2926:17: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2926 |                                                                                                         if(r) {
      |                                                                                                            ^
      |                                                                                                              != 0
keyhunt.cpp:2970:21: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2970 |                                                                                                                         case 5: //Beta^2 point, prefix 03
      |                                                                                                                              ^
keyhunt.cpp:2987:16: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2987 |                                                                                                 if(r) {
      |                                                                                                    ^
      |                                                                                                      != 0
keyhunt.cpp:2989:17: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 2989 |                                                                                                         if(r) {
      |                                                                                                            ^
      |                                                                                                              != 0
keyhunt.cpp:2996:84: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 2996 |                                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160,20) != 0)  {
      |                                                                                                                                                                                      ^
keyhunt.cpp:3008:14: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3008 |                                                                                 if(FLAGENDOMORPHISM)    {
      |                                                                                    ^               
      |                                                                                                     != 0
keyhunt.cpp:3009:20: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3009 |                                                                                         for(l = 6;l < 12; l++)  {       //We check the array from 6 to 12(excluded) because we save the uncompressed information there
      |                                                                                                 ^
keyhunt.cpp:3009:26: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3009 |                                                                                         for(l = 6;l < 12; l++)  {       //We check the array from 6 to 12(excluded) because we save the uncompressed information there
      |                                                                                                       ^
keyhunt.cpp:3011:16: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3011 |                                                                                                 if(r) {
      |                                                                                                    ^
      |                                                                                                      != 0
keyhunt.cpp:3013:17: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3013 |                                                                                                         if(r) {
      |                                                                                                            ^
      |                                                                                                              != 0
keyhunt.cpp:3018:21: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3018 |                                                                                                                         case 6:
      |                                                                                                                              ^
keyhunt.cpp:3019:21: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3019 |                                                                                                                         case 7:
      |                                                                                                                              ^
keyhunt.cpp:3022:100: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3022 |                                                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                                                                                                    ^
keyhunt.cpp:3027:21: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3027 |                                                                                                                         case 8:
      |                                                                                                                              ^
keyhunt.cpp:3028:21: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3028 |                                                                                                                         case 9:
      |                                                                                                                              ^
keyhunt.cpp:3032:100: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3032 |                                                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                                                                                                    ^
keyhunt.cpp:3037:21: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3037 |                                                                                                                         case 10:
      |                                                                                                                              ^
keyhunt.cpp:3038:21: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3038 |                                                                                                                         case 11:
      |                                                                                                                              ^
keyhunt.cpp:3042:100: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3042 |                                                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                                                                                                    ^
keyhunt.cpp:3055:15: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3055 |                                                                                         if(r) {
      |                                                                                            ^
      |                                                                                              != 0
keyhunt.cpp:3057:16: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3057 |                                                                                                 if(r) {
      |                                                                                                    ^
      |                                                                                                      != 0
keyhunt.cpp:3069:12: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3069 |                                                                 if(FLAGENDOMORPHISM)    {
      |                                                                    ^               
      |                                                                                     != 0
keyhunt.cpp:3071:25: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3071 |                                                                                 for(l = 0;l < 6; l++)   {
      |                                                                                               ^
keyhunt.cpp:3073:15: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3073 |                                                                                         if(r) {
      |                                                                                            ^
      |                                                                                              != 0
keyhunt.cpp:3075:16: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3075 |                                                                                                 if(r) {                                                                                         
      |                                                                                                    ^
      |                                                                                                      != 0
keyhunt.cpp:3084:99: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3084 |                                                                                                                         if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                                                                                            ^
keyhunt.cpp:3094:99: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3094 |                                                                                                                         if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                                                                                            ^
keyhunt.cpp:3100:20: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3100 |                                                                                                                 case 5:
      |                                                                                                                      ^
keyhunt.cpp:3104:99: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3104 |                                                                                                                         if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                                                                                            ^
keyhunt.cpp:3119:14: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3119 |                                                                                 if(r) {
      |                                                                                    ^
      |                                                                                      != 0
keyhunt.cpp:3121:15: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3121 |                                                                                         if(r) {
      |                                                                                            ^
      |                                                                                              != 0
keyhunt.cpp:3134:12: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3134 |                                                                 if(FLAGENDOMORPHISM)    {
      |                                                                    ^               
      |                                                                                     != 0
keyhunt.cpp:3137:13: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3137 |                                                                         if(r) {
      |                                                                            ^
      |                                                                              != 0
keyhunt.cpp:3139:14: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3139 |                                                                                 if(r) {
      |                                                                                    ^
      |                                                                                      != 0
keyhunt.cpp:3149:13: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3149 |                                                                         if(r) {
      |                                                                            ^
      |                                                                              != 0
keyhunt.cpp:3151:14: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3151 |                                                                                 if(r) {
      |                                                                                    ^
      |                                                                                      != 0
keyhunt.cpp:3163:13: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3163 |                                                                         if(r) {
      |                                                                            ^
      |                                                                              != 0
keyhunt.cpp:3165:14: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3165 |                                                                                 if(r) {
      |                                                                                    ^
      |                                                                                      != 0
keyhunt.cpp:3177:13: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3177 |                                                                         if(r) {
      |                                                                            ^
      |                                                                              != 0
keyhunt.cpp:3179:14: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3179 |                                                                                 if(r) {
      |                                                                                    ^
      |                                                                                      != 0
keyhunt.cpp:3192:10: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3192 |                                         if(!FLAGGPU) {
      |                                            ~^      
      |                                                     == 0
keyhunt.cpp:3207:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3207 |                                 if(!FLAGGPU) {
      |                                    ~^      
      |                                             == 0
keyhunt.cpp:3227:39: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3227 |                         }while(count < N_SEQUENTIAL_MAX && continue_flag);
      |                                                            ^            
      |                                                            (             != 0)
keyhunt.cpp:3230:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3230 |                         if(FLAGGPU) {
      |                            ^      
      |                                    != 0
keyhunt.cpp:3238:10: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3238 |         } while(continue_flag);
      |                 ^            
      |                               != 0
keyhunt.cpp:3241:5: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3241 |         if(FLAGGPU) {
      |            ^      
      |                    != 0
keyhunt.cpp:3242:6: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
 3242 |                 if(h_priv_le) free(h_priv_le);
      |                    ^        
      |                              != nullptr
keyhunt.cpp:3242:16: warning: statement should be inside braces [readability-braces-around-statements]
 3242 |                 if(h_priv_le) free(h_priv_le);
      |                              ^                
      |                               {
keyhunt.cpp:3243:6: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
 3243 |                 if(h_pubx_le) free(h_pubx_le);
      |                    ^        
      |                              != nullptr
keyhunt.cpp:3243:16: warning: statement should be inside braces [readability-braces-around-statements]
 3243 |                 if(h_pubx_le) free(h_pubx_le);
      |                              ^                
      |                               {
keyhunt.cpp:3244:6: warning: implicit conversion 'uint32_t *' (aka 'unsigned int *') -> 'bool' [readability-implicit-bool-conversion]
 3244 |                 if(h_puby_le) free(h_puby_le);
      |                    ^        
      |                              != nullptr
keyhunt.cpp:3244:16: warning: statement should be inside braces [readability-braces-around-statements]
 3244 |                 if(h_puby_le) free(h_puby_le);
      |                              ^                
      |                               {
keyhunt.cpp:3262:7: warning: function 'thread_process_vanity' has cognitive complexity of 348 (threshold 25) [readability-function-cognitive-complexity]
 3262 | void *thread_process_vanity(void *vargp)        {
      |       ^
keyhunt.cpp:3299:53: note: +1
 3299 |         bool calculate_y = FLAGSEARCH == SEARCH_UNCOMPRESS || FLAGSEARCH == SEARCH_BOTH;
      |                                                            ^
keyhunt.cpp:3314:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 3314 |         do {
      |         ^
keyhunt.cpp:3315:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 3315 |                 if(FLAGRANDOM){
      |                 ^
keyhunt.cpp:3318:3: note: +1, nesting level increased to 2
 3318 |                 else    {
      |                 ^
keyhunt.cpp:3319:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 3319 |                         if(n_range_start.IsLower(&n_range_end)) {
      |                         ^
keyhunt.cpp:3332:4: note: +1, nesting level increased to 3
 3332 |                         else    {
      |                         ^
keyhunt.cpp:3336:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 3336 |                 if(continue_flag)       {
      |                 ^
keyhunt.cpp:3338:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 3338 |                         if(FLAGMATRIX)  {
      |                         ^
keyhunt.cpp:3344:4: note: +1, nesting level increased to 3
 3344 |                         else    {
      |                         ^
keyhunt.cpp:3345:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 3345 |                                 if(FLAGQUIET == 0)      {
      |                                 ^
keyhunt.cpp:3353:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 3353 |                         do {
      |                         ^
keyhunt.cpp:3360:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 3360 |                                 for(i = 0; i < hLength; i++) {
      |                                 ^
keyhunt.cpp:3370:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 3370 |                                 for(i = 0; i<hLength; i++) {
      |                                 ^
keyhunt.cpp:3384:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 3384 |                                         if(calculate_y) {
      |                                         ^
keyhunt.cpp:3401:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 3401 |                                         if( calculate_y  )      {
      |                                         ^
keyhunt.cpp:3412:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 3412 |                                         if(FLAGENDOMORPHISM)    {
      |                                         ^
keyhunt.cpp:3421:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 3421 |                                                 if( calculate_y  )      {
      |                                                 ^
keyhunt.cpp:3436:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 3436 |                                 if(FLAGENDOMORPHISM)    {
      |                                 ^
keyhunt.cpp:3437:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 3437 |                                         if( calculate_y  )      {
      |                                         ^
keyhunt.cpp:3459:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 3459 |                                 if(calculate_y )        {
      |                                 ^
keyhunt.cpp:3469:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 3469 |                                 if(FLAGENDOMORPHISM)    {
      |                                 ^
keyhunt.cpp:3470:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 3470 |                                         if( calculate_y  )      {
      |                                         ^
keyhunt.cpp:3478:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 3478 |                                 for(j = 0; j < CPU_GRP_SIZE/4;j++)      {
      |                                 ^
keyhunt.cpp:3479:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 3479 |                                         if(FLAGSEARCH == SEARCH_COMPRESS || FLAGSEARCH == SEARCH_BOTH ){
      |                                         ^
keyhunt.cpp:3479:39: note: +1
 3479 |                                         if(FLAGSEARCH == SEARCH_COMPRESS || FLAGSEARCH == SEARCH_BOTH ){
      |                                                                          ^
keyhunt.cpp:3480:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 3480 |                                                 if(FLAGENDOMORPHISM)    {
      |                                                 ^
keyhunt.cpp:3491:7: note: +1, nesting level increased to 6
 3491 |                                                 else    {
      |                                                 ^
keyhunt.cpp:3496:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 3496 |                                         if(FLAGSEARCH == SEARCH_UNCOMPRESS || FLAGSEARCH == SEARCH_BOTH)        {
      |                                         ^
keyhunt.cpp:3496:41: note: +1
 3496 |                                         if(FLAGSEARCH == SEARCH_UNCOMPRESS || FLAGSEARCH == SEARCH_BOTH)        {
      |                                                                            ^
keyhunt.cpp:3497:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 3497 |                                                 if(FLAGENDOMORPHISM)    {
      |                                                 ^
keyhunt.cpp:3498:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 3498 |                                                         for(l = 0; l < 4; l++)  {
      |                                                         ^
keyhunt.cpp:3503:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 3503 |                                                         for(l = 0; l < 4; l++)  {
      |                                                         ^
keyhunt.cpp:3509:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 3509 |                                                         for(l = 0; l < 4; l++)  {
      |                                                         ^
keyhunt.cpp:3515:7: note: +1, nesting level increased to 6
 3515 |                                                 else    {
      |                                                 ^
keyhunt.cpp:3520:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 3520 |                                         for(k = 0; k < 4;k++)   {
      |                                         ^
keyhunt.cpp:3521:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 3521 |                                                 if(FLAGSEARCH == SEARCH_COMPRESS || FLAGSEARCH == SEARCH_BOTH ){
      |                                                 ^
keyhunt.cpp:3521:40: note: +1
 3521 |                                                 if(FLAGSEARCH == SEARCH_COMPRESS || FLAGSEARCH == SEARCH_BOTH ){
      |                                                                                  ^
keyhunt.cpp:3522:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 3522 |                                                         if(FLAGENDOMORPHISM)    {
      |                                                         ^
keyhunt.cpp:3523:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 3523 |                                                                 for(l = 0;l < 6; l++)   {
      |                                                                 ^
keyhunt.cpp:3524:10: note: +9, including nesting penalty of 8, nesting level increased to 9
 3524 |                                                                         if(vanityrmdmatch((uint8_t*)publickeyhashrmd160_endomorphism[l][k]))    {
      |                                                                         ^
keyhunt.cpp:3533:11: note: +10, including nesting penalty of 9, nesting level increased to 10
 3533 |                                                                                 switch(l)       {
      |                                                                                 ^
keyhunt.cpp:3535:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3535 |                                                                                                 if(publickey.y.IsOdd()) {       //if the current publickey is odd that means, we need to negate the keyfound to get the correct key
      |                                                                                                 ^
keyhunt.cpp:3542:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3542 |                                                                                                 if(publickey.y.IsEven())        {       //if the current publickey is even that means, we need to negate the keyfound to get the correct key
      |                                                                                                 ^
keyhunt.cpp:3550:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3550 |                                                                                                 if(publickey.y.IsOdd()) {       //if the current publickey is odd that means, we need to negate the keyfound to get the correct key
      |                                                                                                 ^
keyhunt.cpp:3558:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3558 |                                                                                                 if(publickey.y.IsEven())        {       //if the current publickey is even that means, we need to negate the keyfound to get the correct key
      |                                                                                                 ^
keyhunt.cpp:3566:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3566 |                                                                                                 if(publickey.y.IsOdd()) {       //if the current publickey is odd that means, we need to negate the keyfound to get the correct key
      |                                                                                                 ^
keyhunt.cpp:3574:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3574 |                                                                                                 if(publickey.y.IsEven())        {       //if the current publickey is even that means, we need to negate the keyfound to get the correct key
      |                                                                                                 ^
keyhunt.cpp:3585:8: note: +1, nesting level increased to 7
 3585 |                                                         else    {
      |                                                         ^
keyhunt.cpp:3586:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 3586 |                                                                 for(l = 0;l < 2; l++)   {
      |                                                                 ^
keyhunt.cpp:3587:10: note: +9, including nesting penalty of 8, nesting level increased to 9
 3587 |                                                                         if(vanityrmdmatch((uint8_t*)publickeyhashrmd160_endomorphism[l][k]))    {
      |                                                                         ^
keyhunt.cpp:3594:11: note: +10, including nesting penalty of 9, nesting level increased to 10
 3594 |                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160,20) != 0){
      |                                                                                 ^
keyhunt.cpp:3604:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 3604 |                                                 if(FLAGSEARCH == SEARCH_UNCOMPRESS || FLAGSEARCH == SEARCH_BOTH)        {
      |                                                 ^
keyhunt.cpp:3604:42: note: +1
 3604 |                                                 if(FLAGSEARCH == SEARCH_UNCOMPRESS || FLAGSEARCH == SEARCH_BOTH)        {
      |                                                                                    ^
keyhunt.cpp:3605:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 3605 |                                                         if(FLAGENDOMORPHISM)    {
      |                                                         ^
keyhunt.cpp:3606:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 3606 |                                                                 for(l = 6;l < 12; l++)  {
      |                                                                 ^
keyhunt.cpp:3607:10: note: +9, including nesting penalty of 8, nesting level increased to 9
 3607 |                                                                         if(vanityrmdmatch((uint8_t*)publickeyhashrmd160_endomorphism[l][k]))    {
      |                                                                         ^
keyhunt.cpp:3617:11: note: +10, including nesting penalty of 9, nesting level increased to 10
 3617 |                                                                                 switch(l)       {
      |                                                                                 ^
keyhunt.cpp:3622:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3622 |                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                 ^
keyhunt.cpp:3632:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3632 |                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                 ^
keyhunt.cpp:3642:13: note: +11, including nesting penalty of 10, nesting level increased to 11
 3642 |                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                 ^
keyhunt.cpp:3653:8: note: +1, nesting level increased to 7
 3653 |                                                         else    {
      |                                                         ^
keyhunt.cpp:3654:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 3654 |                                                                 if(vanityrmdmatch((uint8_t*)publickeyhashrmd160_uncompress[k])) {
      |                                                                 ^
keyhunt.cpp:3688:36: note: +1
 3688 |                         }while(count < N_SEQUENTIAL_MAX && continue_flag);
      |                                                         ^
keyhunt.cpp:3264:19: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
 3264 |         struct tothread *tt;
      |                          ^
keyhunt.cpp:3270:6: warning: variable name 'dx' is too short, expected at least 3 characters [readability-identifier-length]
 3270 |         Int dx[CPU_GRP_SIZE / 2 + 1];
      |             ^
keyhunt.cpp:3274:6: warning: variable name 'dy' is too short, expected at least 3 characters [readability-identifier-length]
 3274 |         Int dy;
      |             ^
keyhunt.cpp:3276:6: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
 3276 |         Int _s;
      |             ^
keyhunt.cpp:3277:6: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
 3277 |         Int _p;
      |             ^
keyhunt.cpp:3278:8: warning: variable name 'pp' is too short, expected at least 3 characters [readability-identifier-length]
 3278 |         Point pp;       //point positive
      |               ^
keyhunt.cpp:3279:8: warning: variable name 'pn' is too short, expected at least 3 characters [readability-identifier-length]
 3279 |         Point pn;       //point negative
      |               ^
keyhunt.cpp:3280:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3280 |         int l,pp_offset,pn_offset,i,hLength = (CPU_GRP_SIZE / 2 - 1);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3280:6: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
 3280 |         int l,pp_offset,pn_offset,i,hLength = (CPU_GRP_SIZE / 2 - 1);
      |             ^
keyhunt.cpp:3280:28: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 3280 |         int l,pp_offset,pn_offset,i,hLength = (CPU_GRP_SIZE / 2 - 1);
      |                                   ^
keyhunt.cpp:3281:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3281 |         uint64_t j,count;
      |         ^~~~~~~~~~~~~~~~~
keyhunt.cpp:3281:11: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 3281 |         uint64_t j,count;
      |                  ^
keyhunt.cpp:3282:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3282 |         Point R,temporal,publickey;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3282:8: warning: variable name 'R' is too short, expected at least 3 characters [readability-identifier-length]
 3282 |         Point R,temporal,publickey;
      |               ^
keyhunt.cpp:3283:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3283 |         int thread_number,continue_flag = 1,k;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3283:38: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 3283 |         int thread_number,continue_flag = 1,k;
      |                                             ^
keyhunt.cpp:3285:27: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3285 |         char publickeyhashrmd160[20];
      |                                  ^
keyhunt.cpp:3286:41: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3286 |         char publickeyhashrmd160_uncompress[4][20];
      |                                                ^
keyhunt.cpp:3288:40: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3288 |         char publickeyhashrmd160_endomorphism[12][4][20];
      |                                               ^
keyhunt.cpp:3288:47: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3288 |         char publickeyhashrmd160_endomorphism[12][4][20];
      |                                                      ^
keyhunt.cpp:3290:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3290 |         Int key_mpz,temp_stride,keyfound;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3315:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3315 |                 if(FLAGRANDOM){
      |                    ^         
      |                               != 0
keyhunt.cpp:3336:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3336 |                 if(continue_flag)       {
      |                    ^            
      |                                  != 0
keyhunt.cpp:3338:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3338 |                         if(FLAGMATRIX)  {
      |                            ^         
      |                                       != 0
keyhunt.cpp:3412:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3412 |                                         if(FLAGENDOMORPHISM)    {
      |                                            ^               
      |                                                             != 0
keyhunt.cpp:3436:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3436 |                                 if(FLAGENDOMORPHISM)    {
      |                                    ^               
      |                                                     != 0
keyhunt.cpp:3469:8: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3469 |                                 if(FLAGENDOMORPHISM)    {
      |                                    ^               
      |                                                     != 0
keyhunt.cpp:3480:10: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3480 |                                                 if(FLAGENDOMORPHISM)    {
      |                                                    ^               
      |                                                                     != 0
keyhunt.cpp:3488:207: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3488 |                                                         secp->GetHash160_fromX(P2PKH,0x03,&endomorphism_beta2[(j*4)].x,&endomorphism_beta2[(j*4)+1].x,&endomorphism_beta2[(j*4)+2].x,&endomorphism_beta2[(j*4)+3].x,(uint8_t*)publickeyhashrmd160_endomorphism[5][0],(uint8_t*)publickeyhashrmd160_endomorphism[5][1],(uint8_t*)publickeyhashrmd160_endomorphism[5][2],(uint8_t*)publickeyhashrmd160_endomorphism[5][3]);
      |                                                                                                                                                                                                                                                                ^
keyhunt.cpp:3488:256: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3488 |                                                         secp->GetHash160_fromX(P2PKH,0x03,&endomorphism_beta2[(j*4)].x,&endomorphism_beta2[(j*4)+1].x,&endomorphism_beta2[(j*4)+2].x,&endomorphism_beta2[(j*4)+3].x,(uint8_t*)publickeyhashrmd160_endomorphism[5][0],(uint8_t*)publickeyhashrmd160_endomorphism[5][1],(uint8_t*)publickeyhashrmd160_endomorphism[5][2],(uint8_t*)publickeyhashrmd160_endomorphism[5][3]);
      |                                                                                                                                                                                                                                                                                                                 ^
keyhunt.cpp:3488:305: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3488 |                                                         secp->GetHash160_fromX(P2PKH,0x03,&endomorphism_beta2[(j*4)].x,&endomorphism_beta2[(j*4)+1].x,&endomorphism_beta2[(j*4)+2].x,&endomorphism_beta2[(j*4)+3].x,(uint8_t*)publickeyhashrmd160_endomorphism[5][0],(uint8_t*)publickeyhashrmd160_endomorphism[5][1],(uint8_t*)publickeyhashrmd160_endomorphism[5][2],(uint8_t*)publickeyhashrmd160_endomorphism[5][3]);
      |                                                                                                                                                                                                                                                                                                                                                                  ^
keyhunt.cpp:3488:354: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3488 |                                                         secp->GetHash160_fromX(P2PKH,0x03,&endomorphism_beta2[(j*4)].x,&endomorphism_beta2[(j*4)+1].x,&endomorphism_beta2[(j*4)+2].x,&endomorphism_beta2[(j*4)+3].x,(uint8_t*)publickeyhashrmd160_endomorphism[5][0],(uint8_t*)publickeyhashrmd160_endomorphism[5][1],(uint8_t*)publickeyhashrmd160_endomorphism[5][2],(uint8_t*)publickeyhashrmd160_endomorphism[5][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                                   ^
keyhunt.cpp:3497:10: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3497 |                                                 if(FLAGENDOMORPHISM)    {
      |                                                    ^               
      |                                                                     != 0
keyhunt.cpp:3501:134: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3501 |                                                         secp->GetHash160(P2PKH,false, pts[(j*4)], pts[(j*4)+1], pts[(j*4)+2], pts[(j*4)+3],(uint8_t*)publickeyhashrmd160_endomorphism[6][0],(uint8_t*)publickeyhashrmd160_endomorphism[6][1],(uint8_t*)publickeyhashrmd160_endomorphism[6][2],(uint8_t*)publickeyhashrmd160_endomorphism[6][3]);
      |                                                                                                                                                                                       ^
keyhunt.cpp:3501:183: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3501 |                                                         secp->GetHash160(P2PKH,false, pts[(j*4)], pts[(j*4)+1], pts[(j*4)+2], pts[(j*4)+3],(uint8_t*)publickeyhashrmd160_endomorphism[6][0],(uint8_t*)publickeyhashrmd160_endomorphism[6][1],(uint8_t*)publickeyhashrmd160_endomorphism[6][2],(uint8_t*)publickeyhashrmd160_endomorphism[6][3]);
      |                                                                                                                                                                                                                                        ^
keyhunt.cpp:3501:232: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3501 |                                                         secp->GetHash160(P2PKH,false, pts[(j*4)], pts[(j*4)+1], pts[(j*4)+2], pts[(j*4)+3],(uint8_t*)publickeyhashrmd160_endomorphism[6][0],(uint8_t*)publickeyhashrmd160_endomorphism[6][1],(uint8_t*)publickeyhashrmd160_endomorphism[6][2],(uint8_t*)publickeyhashrmd160_endomorphism[6][3]);
      |                                                                                                                                                                                                                                                                                         ^
keyhunt.cpp:3501:281: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3501 |                                                         secp->GetHash160(P2PKH,false, pts[(j*4)], pts[(j*4)+1], pts[(j*4)+2], pts[(j*4)+3],(uint8_t*)publickeyhashrmd160_endomorphism[6][0],(uint8_t*)publickeyhashrmd160_endomorphism[6][1],(uint8_t*)publickeyhashrmd160_endomorphism[6][2],(uint8_t*)publickeyhashrmd160_endomorphism[6][3]);
      |                                                                                                                                                                                                                                                                                                                                          ^
keyhunt.cpp:3502:201: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3502 |                                                         secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0] ,endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[7][0],(uint8_t*)publickeyhashrmd160_endomorphism[7][1],(uint8_t*)publickeyhashrmd160_endomorphism[7][2],(uint8_t*)publickeyhashrmd160_endomorphism[7][3]);
      |                                                                                                                                                                                                                                                          ^
keyhunt.cpp:3502:250: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3502 |                                                         secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0] ,endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[7][0],(uint8_t*)publickeyhashrmd160_endomorphism[7][1],(uint8_t*)publickeyhashrmd160_endomorphism[7][2],(uint8_t*)publickeyhashrmd160_endomorphism[7][3]);
      |                                                                                                                                                                                                                                                                                                           ^
keyhunt.cpp:3502:299: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3502 |                                                         secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0] ,endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[7][0],(uint8_t*)publickeyhashrmd160_endomorphism[7][1],(uint8_t*)publickeyhashrmd160_endomorphism[7][2],(uint8_t*)publickeyhashrmd160_endomorphism[7][3]);
      |                                                                                                                                                                                                                                                                                                                                                            ^
keyhunt.cpp:3502:348: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3502 |                                                         secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0] ,endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[7][0],(uint8_t*)publickeyhashrmd160_endomorphism[7][1],(uint8_t*)publickeyhashrmd160_endomorphism[7][2],(uint8_t*)publickeyhashrmd160_endomorphism[7][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                             ^
keyhunt.cpp:3506:191: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3506 |                                                         secp->GetHash160(P2PKH,false,endomorphism_beta[(j*4)],  endomorphism_beta[(j*4)+1], endomorphism_beta[(j*4)+2], endomorphism_beta[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[8][0],(uint8_t*)publickeyhashrmd160_endomorphism[8][1],(uint8_t*)publickeyhashrmd160_endomorphism[8][2],(uint8_t*)publickeyhashrmd160_endomorphism[8][3]);
      |                                                                                                                                                                                                                                                ^
keyhunt.cpp:3506:240: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3506 |                                                         secp->GetHash160(P2PKH,false,endomorphism_beta[(j*4)],  endomorphism_beta[(j*4)+1], endomorphism_beta[(j*4)+2], endomorphism_beta[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[8][0],(uint8_t*)publickeyhashrmd160_endomorphism[8][1],(uint8_t*)publickeyhashrmd160_endomorphism[8][2],(uint8_t*)publickeyhashrmd160_endomorphism[8][3]);
      |                                                                                                                                                                                                                                                                                                 ^
keyhunt.cpp:3506:289: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3506 |                                                         secp->GetHash160(P2PKH,false,endomorphism_beta[(j*4)],  endomorphism_beta[(j*4)+1], endomorphism_beta[(j*4)+2], endomorphism_beta[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[8][0],(uint8_t*)publickeyhashrmd160_endomorphism[8][1],(uint8_t*)publickeyhashrmd160_endomorphism[8][2],(uint8_t*)publickeyhashrmd160_endomorphism[8][3]);
      |                                                                                                                                                                                                                                                                                                                                                  ^
keyhunt.cpp:3506:338: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3506 |                                                         secp->GetHash160(P2PKH,false,endomorphism_beta[(j*4)],  endomorphism_beta[(j*4)+1], endomorphism_beta[(j*4)+2], endomorphism_beta[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[8][0],(uint8_t*)publickeyhashrmd160_endomorphism[8][1],(uint8_t*)publickeyhashrmd160_endomorphism[8][2],(uint8_t*)publickeyhashrmd160_endomorphism[8][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                   ^
keyhunt.cpp:3507:200: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3507 |                                                         secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0],endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[9][0],(uint8_t*)publickeyhashrmd160_endomorphism[9][1],(uint8_t*)publickeyhashrmd160_endomorphism[9][2],(uint8_t*)publickeyhashrmd160_endomorphism[9][3]);
      |                                                                                                                                                                                                                                                         ^
keyhunt.cpp:3507:249: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3507 |                                                         secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0],endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[9][0],(uint8_t*)publickeyhashrmd160_endomorphism[9][1],(uint8_t*)publickeyhashrmd160_endomorphism[9][2],(uint8_t*)publickeyhashrmd160_endomorphism[9][3]);
      |                                                                                                                                                                                                                                                                                                          ^
keyhunt.cpp:3507:298: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3507 |                                                         secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0],endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[9][0],(uint8_t*)publickeyhashrmd160_endomorphism[9][1],(uint8_t*)publickeyhashrmd160_endomorphism[9][2],(uint8_t*)publickeyhashrmd160_endomorphism[9][3]);
      |                                                                                                                                                                                                                                                                                                                                                           ^
keyhunt.cpp:3507:347: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3507 |                                                         secp->GetHash160(P2PKH,false,endomorphism_negeted_point[0],endomorphism_negeted_point[1],endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[9][0],(uint8_t*)publickeyhashrmd160_endomorphism[9][1],(uint8_t*)publickeyhashrmd160_endomorphism[9][2],(uint8_t*)publickeyhashrmd160_endomorphism[9][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                            ^
keyhunt.cpp:3512:200: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3512 |                                                         secp->GetHash160(P2PKH,false, endomorphism_beta2[(j*4)],  endomorphism_beta2[(j*4)+1] ,  endomorphism_beta2[(j*4)+2] ,  endomorphism_beta2[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[10][0],(uint8_t*)publickeyhashrmd160_endomorphism[10][1],(uint8_t*)publickeyhashrmd160_endomorphism[10][2],(uint8_t*)publickeyhashrmd160_endomorphism[10][3]);
      |                                                                                                                                                                                                                                                         ^
keyhunt.cpp:3512:250: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3512 |                                                         secp->GetHash160(P2PKH,false, endomorphism_beta2[(j*4)],  endomorphism_beta2[(j*4)+1] ,  endomorphism_beta2[(j*4)+2] ,  endomorphism_beta2[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[10][0],(uint8_t*)publickeyhashrmd160_endomorphism[10][1],(uint8_t*)publickeyhashrmd160_endomorphism[10][2],(uint8_t*)publickeyhashrmd160_endomorphism[10][3]);
      |                                                                                                                                                                                                                                                                                                           ^
keyhunt.cpp:3512:300: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3512 |                                                         secp->GetHash160(P2PKH,false, endomorphism_beta2[(j*4)],  endomorphism_beta2[(j*4)+1] ,  endomorphism_beta2[(j*4)+2] ,  endomorphism_beta2[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[10][0],(uint8_t*)publickeyhashrmd160_endomorphism[10][1],(uint8_t*)publickeyhashrmd160_endomorphism[10][2],(uint8_t*)publickeyhashrmd160_endomorphism[10][3]);
      |                                                                                                                                                                                                                                                                                                                                                             ^
keyhunt.cpp:3512:350: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3512 |                                                         secp->GetHash160(P2PKH,false, endomorphism_beta2[(j*4)],  endomorphism_beta2[(j*4)+1] ,  endomorphism_beta2[(j*4)+2] ,  endomorphism_beta2[(j*4)+3] ,(uint8_t*)publickeyhashrmd160_endomorphism[10][0],(uint8_t*)publickeyhashrmd160_endomorphism[10][1],(uint8_t*)publickeyhashrmd160_endomorphism[10][2],(uint8_t*)publickeyhashrmd160_endomorphism[10][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                               ^
keyhunt.cpp:3513:205: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3513 |                                                         secp->GetHash160(P2PKH,false, endomorphism_negeted_point[0], endomorphism_negeted_point[1],   endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[11][0],(uint8_t*)publickeyhashrmd160_endomorphism[11][1],(uint8_t*)publickeyhashrmd160_endomorphism[11][2],(uint8_t*)publickeyhashrmd160_endomorphism[11][3]);
      |                                                                                                                                                                                                                                                              ^
keyhunt.cpp:3513:255: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3513 |                                                         secp->GetHash160(P2PKH,false, endomorphism_negeted_point[0], endomorphism_negeted_point[1],   endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[11][0],(uint8_t*)publickeyhashrmd160_endomorphism[11][1],(uint8_t*)publickeyhashrmd160_endomorphism[11][2],(uint8_t*)publickeyhashrmd160_endomorphism[11][3]);
      |                                                                                                                                                                                                                                                                                                                ^
keyhunt.cpp:3513:305: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3513 |                                                         secp->GetHash160(P2PKH,false, endomorphism_negeted_point[0], endomorphism_negeted_point[1],   endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[11][0],(uint8_t*)publickeyhashrmd160_endomorphism[11][1],(uint8_t*)publickeyhashrmd160_endomorphism[11][2],(uint8_t*)publickeyhashrmd160_endomorphism[11][3]);
      |                                                                                                                                                                                                                                                                                                                                                                  ^
keyhunt.cpp:3513:355: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3513 |                                                         secp->GetHash160(P2PKH,false, endomorphism_negeted_point[0], endomorphism_negeted_point[1],   endomorphism_negeted_point[2],endomorphism_negeted_point[3],(uint8_t*)publickeyhashrmd160_endomorphism[11][0],(uint8_t*)publickeyhashrmd160_endomorphism[11][1],(uint8_t*)publickeyhashrmd160_endomorphism[11][2],(uint8_t*)publickeyhashrmd160_endomorphism[11][3]);
      |                                                                                                                                                                                                                                                                                                                                                                                                                    ^
keyhunt.cpp:3522:11: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3522 |                                                         if(FLAGENDOMORPHISM)    {
      |                                                            ^               
      |                                                                             != 0
keyhunt.cpp:3523:23: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3523 |                                                                 for(l = 0;l < 6; l++)   {
      |                                                                               ^
keyhunt.cpp:3572:17: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3572 |                                                                                         case 5: //Beta^2 point, prefix 03
      |                                                                                              ^
keyhunt.cpp:3594:80: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3594 |                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160,20) != 0){
      |                                                                                                                                                      ^
keyhunt.cpp:3605:11: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3605 |                                                         if(FLAGENDOMORPHISM)    {
      |                                                            ^               
      |                                                                             != 0
keyhunt.cpp:3606:17: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3606 |                                                                 for(l = 6;l < 12; l++)  {
      |                                                                         ^
keyhunt.cpp:3606:23: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3606 |                                                                 for(l = 6;l < 12; l++)  {
      |                                                                               ^
keyhunt.cpp:3618:17: warning: 6 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3618 |                                                                                         case 6:
      |                                                                                              ^
keyhunt.cpp:3619:17: warning: 7 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3619 |                                                                                         case 7:
      |                                                                                              ^
keyhunt.cpp:3622:96: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3622 |                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                                                                    ^
keyhunt.cpp:3627:17: warning: 8 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3627 |                                                                                         case 8:
      |                                                                                              ^
keyhunt.cpp:3628:17: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3628 |                                                                                         case 9:
      |                                                                                              ^
keyhunt.cpp:3632:96: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3632 |                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                                                                    ^
keyhunt.cpp:3637:17: warning: 10 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3637 |                                                                                         case 10:
      |                                                                                              ^
keyhunt.cpp:3638:17: warning: 11 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3638 |                                                                                         case 11:
      |                                                                                              ^
keyhunt.cpp:3642:96: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3642 |                                                                                                 if(memcmp(publickeyhashrmd160_endomorphism[l][k],publickeyhashrmd160_uncompress[0],20) != 0){
      |                                                                                                                                                                                    ^
keyhunt.cpp:3688:39: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3688 |                         }while(count < N_SEQUENTIAL_MAX && continue_flag);
      |                                                            ^            
      |                                                            (             != 0)
keyhunt.cpp:3690:10: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3690 |         } while(continue_flag);
      |                 ^            
      |                               != 0
keyhunt.cpp:3695:34: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
 3695 | void _swap(struct address_value *a,struct address_value *b)     {
      |                                  ^
keyhunt.cpp:3695:58: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
 3695 | void _swap(struct address_value *a,struct address_value *b)     {
      |                                                          ^
keyhunt.cpp:3696:23: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
 3696 |         struct address_value t;
      |                              ^
keyhunt.cpp:3708:10: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
 3708 |         int64_t p;
      |                 ^
keyhunt.cpp:3710:11: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3710 |                 if(n <= 16) {
      |                         ^
keyhunt.cpp:3719:14: warning: statement should be inside braces [readability-braces-around-statements]
 3719 |                                 if(p > 0) _introsort(arr , depthLimit-1 , p);
      |                                          ^                                   
      |                                           {
keyhunt.cpp:3720:14: warning: statement should be inside braces [readability-braces-around-statements]
 3720 |                                 if(p < n) _introsort(&arr[p+1],depthLimit-1,n-(p+1));
      |                                          ^                                           
      |                                           {
keyhunt.cpp:3727:10: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 3727 |         int64_t j;
      |                 ^
keyhunt.cpp:3728:10: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 3728 |         int64_t i;
      |                 ^
keyhunt.cpp:3733:49: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3733 |                 while(j >= 0 && memcmp(arr[j].value,key.value,20) > 0) {
      |                                                               ^
keyhunt.cpp:3743:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3743 |         int64_t r,left,right;
      |         ^~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3743:10: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 3743 |         int64_t r,left,right;
      |                 ^
keyhunt.cpp:3749:60: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3749 |                 while(left      < right && memcmp(arr[left].value,pivot.value,20) <= 0 )        {
      |                                                                               ^
keyhunt.cpp:3752:62: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3752 |                 while(right >= left && memcmp(arr[right].value,pivot.value,20) > 0)     {
      |                                                                            ^
keyhunt.cpp:3773:61: warning: parameter name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 3773 | void _heapify(struct address_value *arr, int64_t n, int64_t i) {
      |                                                             ^
keyhunt.cpp:3775:10: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
 3775 |         int64_t l = 2 * i + 1;
      |                 ^
keyhunt.cpp:3776:10: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 3776 |         int64_t r = 2 * i + 2;
      |                 ^
keyhunt.cpp:3777:54: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3777 |         if (l < n && memcmp(arr[l].value,arr[largest].value,20) > 0)
      |                                                             ^
keyhunt.cpp:3777:62: warning: statement should be inside braces [readability-braces-around-statements]
 3777 |         if (l < n && memcmp(arr[l].value,arr[largest].value,20) > 0)
      |                                                                     ^
      |                                                                      {
 3778 |                 largest = l;
      |                             
keyhunt.cpp:3779:54: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3779 |         if (r < n && memcmp(arr[r].value,arr[largest].value,20) > 0)
      |                                                             ^
keyhunt.cpp:3779:62: warning: statement should be inside braces [readability-braces-around-statements]
 3779 |         if (r < n && memcmp(arr[r].value,arr[largest].value,20) > 0)
      |                                                                     ^
      |                                                                      {
 3780 |                 largest = r;
      |                             
keyhunt.cpp:3788:10: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 3788 |         int64_t i;
      |                 ^
keyhunt.cpp:3799:36: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
 3799 | void bsgs_swap(struct bsgs_xvalue *a,struct bsgs_xvalue *b)     {
      |                                    ^
keyhunt.cpp:3799:58: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
 3799 | void bsgs_swap(struct bsgs_xvalue *a,struct bsgs_xvalue *b)     {
      |                                                          ^
keyhunt.cpp:3800:21: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
 3800 |         struct bsgs_xvalue t;
      |                            ^
keyhunt.cpp:3814:10: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
 3814 |         int64_t p;
      |                 ^
keyhunt.cpp:3816:11: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3816 |                 if(n <= 16) {
      |                         ^
keyhunt.cpp:3825:14: warning: statement should be inside braces [readability-braces-around-statements]
 3825 |                                 if(p > 0) bsgs_introsort(arr , depthLimit-1 , p);
      |                                          ^                                       
      |                                           {
keyhunt.cpp:3826:14: warning: statement should be inside braces [readability-braces-around-statements]
 3826 |                                 if(p < n) bsgs_introsort(&arr[p+1],depthLimit-1,n-(p+1));
      |                                          ^                                               
      |                                           {
keyhunt.cpp:3834:10: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 3834 |         int64_t j;
      |                 ^
keyhunt.cpp:3835:10: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 3835 |         int64_t i;
      |                 ^
keyhunt.cpp:3850:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3850 |         int64_t r,left,right;
      |         ^~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3850:10: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 3850 |         int64_t r,left,right;
      |                 ^
keyhunt.cpp:3880:63: warning: parameter name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 3880 | void bsgs_heapify(struct bsgs_xvalue *arr, int64_t n, int64_t i) {
      |                                                               ^
keyhunt.cpp:3882:10: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
 3882 |         int64_t l = 2 * i + 1;
      |                 ^
keyhunt.cpp:3883:10: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 3883 |         int64_t r = 2 * i + 2;
      |                 ^
keyhunt.cpp:3884:75: warning: statement should be inside braces [readability-braces-around-statements]
 3884 |         if (l < n && memcmp(arr[l].value,arr[largest].value,BSGS_XVALUE_RAM) > 0)
      |                                                                                  ^
      |                                                                                   {
 3885 |                 largest = l;
      |                             
keyhunt.cpp:3886:75: warning: statement should be inside braces [readability-braces-around-statements]
 3886 |         if (r < n && memcmp(arr[r].value,arr[largest].value,BSGS_XVALUE_RAM) > 0)
      |                                                                                  ^
      |                                                                                   {
 3887 |                 largest = r;
      |                             
keyhunt.cpp:3895:10: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 3895 |         int64_t i;
      |                 ^
keyhunt.cpp:3906:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3906 |         int64_t min,max,half,current;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3907:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3907 |         int r = 0,rcmp;
      |         ^~~~~~~~~~~~~~~
keyhunt.cpp:3907:6: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 3907 |         int r = 0,rcmp;
      |             ^
keyhunt.cpp:3912:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 3912 |         while(!r && half >= 1) {
      |               ~^
      |               (  == 0)
keyhunt.cpp:3914:22: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3914 |                 rcmp = memcmp(data+16,buffer[current+half].value,BSGS_XVALUE_RAM);
      |                                    ^
keyhunt.cpp:3935:7: warning: function 'thread_process_bsgs' has cognitive complexity of 74 (threshold 25) [readability-function-cognitive-complexity]
 3935 | void *thread_process_bsgs(void *vargp)  {
      |       ^
keyhunt.cpp:3968:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 3968 |         if(bsgs_aux % 1024 != 0)        {
      |         ^
keyhunt.cpp:3976:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 3976 |         do      {       
      |         ^
keyhunt.cpp:4000:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 4000 |                 if(base_key.IsGreaterOrEqual(&n_range_end))
      |                 ^
keyhunt.cpp:4003:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 4003 |                 if(FLAGMATRIX)  {
      |                 ^
keyhunt.cpp:4009:3: note: +1, nesting level increased to 2
 4009 |                 else    {
      |                 ^
keyhunt.cpp:4010:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 4010 |                         if(FLAGQUIET == 0){
      |                         ^
keyhunt.cpp:4024:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 4024 |                 for(k = 0; k < bsgs_point_number ; k++) {
      |                 ^
keyhunt.cpp:4025:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 4025 |                         if(bsgs_found[k] == 0)  {
      |                         ^
keyhunt.cpp:4028:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 4028 |                                 while( j < cycles && bsgs_found[k]== 0 )        {
      |                                 ^
keyhunt.cpp:4028:23: note: +1
 4028 |                                 while( j < cycles && bsgs_found[k]== 0 )        {
      |                                                   ^
keyhunt.cpp:4030:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 4030 |                                         for(i = 0; i < hLength; i++) {
      |                                         ^
keyhunt.cpp:4043:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 4043 |                                         for(i = 0; i<hLength; i++) {
      |                                         ^
keyhunt.cpp:4101:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 4101 |                                         for(int i = 0; i<CPU_GRP_SIZE && bsgs_found[k]== 0; i++) {
      |                                         ^
keyhunt.cpp:4101:36: note: +1
 4101 |                                         for(int i = 0; i<CPU_GRP_SIZE && bsgs_found[k]== 0; i++) {
      |                                                                       ^
keyhunt.cpp:4104:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 4104 |                                                 if(r) {
      |                                                 ^
keyhunt.cpp:4106:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 4106 |                                                         if(r)   {
      |                                                         ^
keyhunt.cpp:4119:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 4119 |                                                                 if(filekey != NULL)     {
      |                                                                 ^
keyhunt.cpp:4132:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 4132 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                 ^
keyhunt.cpp:4132:42: note: +1
 4132 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                                                  ^
keyhunt.cpp:4135:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 4135 |                                                                 if(salir)       {
      |                                                                 ^
keyhunt.cpp:3939:19: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
 3939 |         struct tothread* tt;
      |                          ^
keyhunt.cpp:3942:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3942 |         char xpoint_raw[32], *aux_c, *hextemp;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3942:18: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3942 |         char xpoint_raw[32], *aux_c, *hextemp;
      |                         ^
keyhunt.cpp:3945:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3945 |         Int base_key, keyfound;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3947:6: warning: variable name 'dx' is too short, expected at least 3 characters [readability-identifier-length]
 3947 |         Int dx[CPU_GRP_SIZE / 2 + 1];
      |             ^
keyhunt.cpp:3948:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3948 |         Int dy, dyn, _s, _p, km, intaux;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3948:6: warning: variable name 'dy' is too short, expected at least 3 characters [readability-identifier-length]
 3948 |         Int dy, dyn, _s, _p, km, intaux;
      |             ^
keyhunt.cpp:3948:15: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
 3948 |         Int dy, dyn, _s, _p, km, intaux;
      |                      ^
keyhunt.cpp:3948:19: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
 3948 |         Int dy, dyn, _s, _p, km, intaux;
      |                          ^
keyhunt.cpp:3948:23: warning: variable name 'km' is too short, expected at least 3 characters [readability-identifier-length]
 3948 |         Int dy, dyn, _s, _p, km, intaux;
      |                              ^
keyhunt.cpp:3951:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3951 |         Point base_point, point_aux, point_found;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3953:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3953 |         Point pp, pn;
      |         ^~~~~~~~~~~~~
keyhunt.cpp:3953:8: warning: variable name 'pp' is too short, expected at least 3 characters [readability-identifier-length]
 3953 |         Point pp, pn;
      |               ^
keyhunt.cpp:3953:12: warning: variable name 'pn' is too short, expected at least 3 characters [readability-identifier-length]
 3953 |         Point pp, pn;
      |                   ^
keyhunt.cpp:3957:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 3957 |         uint32_t k, l, r, salir, thread_number, cycles;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:3957:11: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 3957 |         uint32_t k, l, r, salir, thread_number, cycles;
      |                  ^
keyhunt.cpp:3957:14: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
 3957 |         uint32_t k, l, r, salir, thread_number, cycles;
      |                     ^
keyhunt.cpp:3957:17: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 3957 |         uint32_t k, l, r, salir, thread_number, cycles;
      |                        ^
keyhunt.cpp:3967:22: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3967 |         cycles = bsgs_aux / 1024;
      |                             ^
keyhunt.cpp:3968:16: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 3968 |         if(bsgs_aux % 1024 != 0)        {
      |                       ^
keyhunt.cpp:4000:46: warning: statement should be inside braces [readability-braces-around-statements]
 4000 |                 if(base_key.IsGreaterOrEqual(&n_range_end))
      |                                                            ^
      |                                                             {
 4001 |                         break;
      |                               
keyhunt.cpp:4003:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4003 |                 if(FLAGMATRIX)  {
      |                    ^         
      |                               != 0
keyhunt.cpp:4027:14: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 4027 |                                 uint32_t j = 0;
      |                                          ^
keyhunt.cpp:4029:10: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 4029 |                                         int i;
      |                                             ^
keyhunt.cpp:4056:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4056 | #if 0
      |  ^
keyhunt.cpp:4073:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4073 | #if 0
      |  ^
keyhunt.cpp:4095:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4095 | #if 0
      |  ^
keyhunt.cpp:4103:76: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4103 |                                                 r = bloom_check(&bloom_bP[((unsigned char)xpoint_raw[0])],xpoint_raw,32);
      |                                                                                                                      ^
keyhunt.cpp:4104:10: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 4104 |                                                 if(r) {
      |                                                    ^
      |                                                      != 0u
keyhunt.cpp:4105:43: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4105 |                                                         r = bsgs_secondcheck(&base_key,((j*1024) + i),k,&keyfound);
      |                                                                                            ^
keyhunt.cpp:4106:11: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 4106 |                                                         if(r)   {
      |                                                            ^
      |                                                              != 0u
keyhunt.cpp:4132:45: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 4132 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                                                     ^    
      |                                                                                                     (     != 0u)
keyhunt.cpp:4135:12: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 4135 |                                                                 if(salir)       {
      |                                                                    ^    
      |                                                                          != 0u
keyhunt.cpp:4163:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4163 |         }while(1);
      |                ^
      |                true
keyhunt.cpp:4171:7: warning: function 'thread_process_bsgs_random' has cognitive complexity of 72 (threshold 25) [readability-function-cognitive-complexity]
 4171 | void *thread_process_bsgs_random(void *vargp)   {
      |       ^
keyhunt.cpp:4204:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 4204 |         if(bsgs_aux % 1024 != 0)        {
      |         ^
keyhunt.cpp:4212:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 4212 |         do      {
      |         ^
keyhunt.cpp:4233:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 4233 |                 if(FLAGMATRIX)  {
      |                 ^
keyhunt.cpp:4239:3: note: +1, nesting level increased to 2
 4239 |                 else{
      |                 ^
keyhunt.cpp:4240:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 4240 |                         if(FLAGQUIET == 0){
      |                         ^
keyhunt.cpp:4260:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 4260 |                 for(k = 0; k < bsgs_point_number ; k++) {
      |                 ^
keyhunt.cpp:4261:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 4261 |                         if(bsgs_found[k] == 0)  {                       
      |                         ^
keyhunt.cpp:4264:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 4264 |                                 while( j < cycles && bsgs_found[k]== 0 )        {
      |                                 ^
keyhunt.cpp:4264:23: note: +1
 4264 |                                 while( j < cycles && bsgs_found[k]== 0 )        {
      |                                                   ^
keyhunt.cpp:4267:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 4267 |                                         for(i = 0; i < hLength; i++) {
      |                                         ^
keyhunt.cpp:4284:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 4284 |                                         for(i = 0; i<hLength; i++) {
      |                                         ^
keyhunt.cpp:4350:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 4350 |                                         for(int i = 0; i<CPU_GRP_SIZE && bsgs_found[k]== 0; i++) {
      |                                         ^
keyhunt.cpp:4350:36: note: +1
 4350 |                                         for(int i = 0; i<CPU_GRP_SIZE && bsgs_found[k]== 0; i++) {
      |                                                                       ^
keyhunt.cpp:4353:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 4353 |                                                 if(r) {
      |                                                 ^
keyhunt.cpp:4355:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 4355 |                                                         if(r)   {
      |                                                         ^
keyhunt.cpp:4368:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 4368 |                                                                 if(filekey != NULL)     {
      |                                                                 ^
keyhunt.cpp:4382:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 4382 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                 ^
keyhunt.cpp:4382:42: note: +1
 4382 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                                                  ^
keyhunt.cpp:4385:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 4385 |                                                                 if(salir)       {
      |                                                                 ^
keyhunt.cpp:4175:19: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
 4175 |         struct tothread *tt;
      |                          ^
keyhunt.cpp:4176:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4176 |         char xpoint_raw[32],*aux_c,*hextemp;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4176:18: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4176 |         char xpoint_raw[32],*aux_c,*hextemp;
      |                         ^
keyhunt.cpp:4177:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4177 |         Int base_key,keyfound,n_range_random;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4178:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4178 |         Point base_point,point_aux,point_found;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4179:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4179 |         uint32_t l,k,r,salir,thread_number,cycles;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4179:11: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
 4179 |         uint32_t l,k,r,salir,thread_number,cycles;
      |                  ^
keyhunt.cpp:4179:13: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 4179 |         uint32_t l,k,r,salir,thread_number,cycles;
      |                    ^
keyhunt.cpp:4179:15: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 4179 |         uint32_t l,k,r,salir,thread_number,cycles;
      |                      ^
keyhunt.cpp:4186:6: warning: variable name 'dx' is too short, expected at least 3 characters [readability-identifier-length]
 4186 |         Int dx[CPU_GRP_SIZE / 2 + 1];
      |             ^
keyhunt.cpp:4189:6: warning: variable name 'dy' is too short, expected at least 3 characters [readability-identifier-length]
 4189 |         Int dy;
      |             ^
keyhunt.cpp:4191:6: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
 4191 |         Int _s;
      |             ^
keyhunt.cpp:4192:6: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
 4192 |         Int _p;
      |             ^
keyhunt.cpp:4193:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4193 |         Int km,intaux;
      |         ^~~~~~~~~~~~~~
keyhunt.cpp:4193:6: warning: variable name 'km' is too short, expected at least 3 characters [readability-identifier-length]
 4193 |         Int km,intaux;
      |             ^
keyhunt.cpp:4194:8: warning: variable name 'pp' is too short, expected at least 3 characters [readability-identifier-length]
 4194 |         Point pp;
      |               ^
keyhunt.cpp:4195:8: warning: variable name 'pn' is too short, expected at least 3 characters [readability-identifier-length]
 4195 |         Point pn;
      |               ^
keyhunt.cpp:4203:22: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4203 |         cycles = bsgs_aux / 1024;
      |                             ^
keyhunt.cpp:4204:16: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4204 |         if(bsgs_aux % 1024 != 0)        {
      |                       ^
keyhunt.cpp:4233:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4233 |                 if(FLAGMATRIX)  {
      |                    ^         
      |                               != 0
keyhunt.cpp:4263:14: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 4263 |                                 uint32_t j = 0;
      |                                          ^
keyhunt.cpp:4266:10: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 4266 |                                         int i;
      |                                             ^
keyhunt.cpp:4299:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4299 | #if 0
      |  ^
keyhunt.cpp:4317:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4317 | #if 0
      |  ^
keyhunt.cpp:4342:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4342 | #if 0
      |  ^
keyhunt.cpp:4352:76: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4352 |                                                 r = bloom_check(&bloom_bP[((unsigned char)xpoint_raw[0])],xpoint_raw,32);
      |                                                                                                                      ^
keyhunt.cpp:4353:10: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 4353 |                                                 if(r) {
      |                                                    ^
      |                                                      != 0u
keyhunt.cpp:4354:43: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4354 |                                                         r = bsgs_secondcheck(&base_key,((j*1024) + i),k,&keyfound);
      |                                                                                            ^
keyhunt.cpp:4355:11: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 4355 |                                                         if(r)   {
      |                                                            ^
      |                                                              != 0u
keyhunt.cpp:4382:45: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 4382 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                                                     ^    
      |                                                                                                     (     != 0u)
keyhunt.cpp:4385:12: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 4385 |                                                                 if(salir)       {
      |                                                                    ^    
      |                                                                          != 0u
keyhunt.cpp:4418:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4418 |         }while(1);
      |                ^
      |                true
keyhunt.cpp:4428:48: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
 4428 | int bsgs_secondcheck(Int *start_range,uint32_t a,uint32_t k_index,Int *privatekey)      {
      |                                                ^
keyhunt.cpp:4429:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4429 |         int i = 0,found = 0,r = 0;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4429:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 4429 |         int i = 0,found = 0,r = 0;
      |             ^
keyhunt.cpp:4429:22: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 4429 |         int i = 0,found = 0,r = 0;
      |                             ^
keyhunt.cpp:4431:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4431 |         Point base_point,point_aux;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4432:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4432 |         Point BSGS_Q, BSGS_S,BSGS_Q_AMP;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4433:18: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4433 |         char xpoint_raw[32];
      |                         ^
keyhunt.cpp:4454:69: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4454 |                 r = bloom_check(&bloom_bPx2nd[(uint8_t) xpoint_raw[0]],xpoint_raw,32);
      |                                                                                   ^
keyhunt.cpp:4455:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4455 |                 if(r)   {
      |                    ^
      |                      != 0
keyhunt.cpp:4459:13: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4459 |         }while(i < 32 && !found);
      |                    ^
keyhunt.cpp:4459:20: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4459 |         }while(i < 32 && !found);
      |                          ~^    
      |                          (      == 0)
keyhunt.cpp:4463:47: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
 4463 | int bsgs_thirdcheck(Int *start_range,uint32_t a,uint32_t k_index,Int *privatekey)       {
      |                                               ^
keyhunt.cpp:4464:11: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 4464 |         uint64_t j = 0;
      |                  ^
keyhunt.cpp:4465:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4465 |         int i = 0,found = 0,r = 0;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4465:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 4465 |         int i = 0,found = 0,r = 0;
      |             ^
keyhunt.cpp:4465:22: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 4465 |         int i = 0,found = 0,r = 0;
      |                             ^
keyhunt.cpp:4466:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4466 |         Int base_key,calculatedkey;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4467:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4467 |         Point base_point,point_aux;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4468:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4468 |         Point BSGS_Q, BSGS_S,BSGS_Q_AMP;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4469:18: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4469 |         char xpoint_raw[32];
      |                         ^
keyhunt.cpp:4485:68: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4485 |                 r = bloom_check(&bloom_bPx3rd[(uint8_t)xpoint_raw[0]],xpoint_raw,32);
      |                                                                                  ^
keyhunt.cpp:4486:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4486 |                 if(r)   {
      |                    ^
      |                      != 0
keyhunt.cpp:4488:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4488 |                         if(r)   {
      |                            ^
      |                              != 0
keyhunt.cpp:4523:13: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4523 |         }while(i < 32 && !found);
      |                    ^
keyhunt.cpp:4523:20: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4523 |         }while(i < 32 && !found);
      |                          ~^    
      |                          (      == 0)
keyhunt.cpp:4531:21: warning: variable name 'ts' is too short, expected at least 3 characters [readability-identifier-length]
 4531 |     struct timespec ts;
      |                     ^
keyhunt.cpp:4532:32: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4532 |     ts.tv_sec = milliseconds / 1000;
      |                                ^
keyhunt.cpp:4533:34: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4533 |     ts.tv_nsec = (milliseconds % 1000) * 1000000;
      |                                  ^
keyhunt.cpp:4533:42: warning: 1000000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4533 |     ts.tv_nsec = (milliseconds % 1000) * 1000000;
      |                                          ^
keyhunt.cpp:4544:8: warning: variable name 'G' is too short, expected at least 3 characters [readability-identifier-length]
 4544 |         Point G = secp->ComputePublicKey(&stride);
      |               ^
keyhunt.cpp:4545:8: warning: variable name 'g' is too short, expected at least 3 characters [readability-identifier-length]
 4545 |         Point g;
      |               ^
keyhunt.cpp:4561:7: warning: function 'thread_bPload' has cognitive complexity of 27 (threshold 25) [readability-function-cognitive-complexity]
 4561 | void *thread_bPload(void *vargp)        {
      |       ^
keyhunt.cpp:4585:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 4585 |         if( ((tt->to - tt->from) % CPU_GRP_SIZE )  != 0)        {
      |         ^
keyhunt.cpp:4594:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 4594 |         for(uint64_t s=0;s<nbStep;s++) {
      |         ^
keyhunt.cpp:4595:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 4595 |                 for(i = 0; i < hLength; i++) {
      |                 ^
keyhunt.cpp:4609:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 4609 |                 for(i = 0; i<hLength; i++) {
      |                 ^
keyhunt.cpp:4671:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 4671 |                 for(j=0;j<CPU_GRP_SIZE;j++)     {
      |                 ^
keyhunt.cpp:4680:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 4680 |                         if(i_counter < bsgs_m3) {
      |                         ^
keyhunt.cpp:4681:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 4681 |                                 if(!FLAGREADEDFILE3)    {
      |                                 ^
keyhunt.cpp:4685:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 4685 |                                 if(!FLAGREADEDFILE4)    {
      |                                 ^
keyhunt.cpp:4697:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 4697 |                         if(i_counter < bsgs_m2 && !FLAGREADEDFILE2)     {
      |                         ^
keyhunt.cpp:4697:27: note: +1
 4697 |                         if(i_counter < bsgs_m2 && !FLAGREADEDFILE2)     {
      |                                                ^
keyhunt.cpp:4708:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 4708 |                         if(i_counter < to && !FLAGREADEDFILE1 ) {
      |                         ^
keyhunt.cpp:4708:22: note: +1
 4708 |                         if(i_counter < to && !FLAGREADEDFILE1 ) {
      |                                           ^
keyhunt.cpp:4564:16: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4564 |         char rawvalue[32];
      |                       ^
keyhunt.cpp:4565:17: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
 4565 |         struct bPload *tt;
      |                        ^
keyhunt.cpp:4566:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4566 |         uint64_t i_counter,j,nbStep,to;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4566:21: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 4566 |         uint64_t i_counter,j,nbStep,to;
      |                            ^
keyhunt.cpp:4566:30: warning: variable name 'to' is too short, expected at least 3 characters [readability-identifier-length]
 4566 |         uint64_t i_counter,j,nbStep,to;
      |                                     ^
keyhunt.cpp:4570:6: warning: variable name 'dx' is too short, expected at least 3 characters [readability-identifier-length]
 4570 |         Int dx[CPU_GRP_SIZE / 2 + 1];
      |             ^
keyhunt.cpp:4572:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4572 |         Int dy,dyn,_s,_p;
      |         ^~~~~~~~~~~~~~~~~
keyhunt.cpp:4572:6: warning: variable name 'dy' is too short, expected at least 3 characters [readability-identifier-length]
 4572 |         Int dy,dyn,_s,_p;
      |             ^
keyhunt.cpp:4572:13: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
 4572 |         Int dy,dyn,_s,_p;
      |                    ^
keyhunt.cpp:4572:16: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
 4572 |         Int dy,dyn,_s,_p;
      |                       ^
keyhunt.cpp:4573:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4573 |         Point pp,pn;
      |         ^~~~~~~~~~~~
keyhunt.cpp:4573:8: warning: variable name 'pp' is too short, expected at least 3 characters [readability-identifier-length]
 4573 |         Point pp,pn;
      |               ^
keyhunt.cpp:4573:11: warning: variable name 'pn' is too short, expected at least 3 characters [readability-identifier-length]
 4573 |         Point pp,pn;
      |                  ^
keyhunt.cpp:4575:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4575 |         int i,bloom_bP_index,hLength = (CPU_GRP_SIZE / 2 - 1) ,threadid;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4575:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 4575 |         int i,bloom_bP_index,hLength = (CPU_GRP_SIZE / 2 - 1) ,threadid;
      |             ^
keyhunt.cpp:4577:6: warning: variable name 'km' is too short, expected at least 3 characters [readability-identifier-length]
 4577 |         Int km((uint64_t)(tt->from + 1));
      |             ^
keyhunt.cpp:4594:15: warning: loop variable name 's' is too short, expected at least 2 characters [readability-identifier-length]
 4594 |         for(uint64_t s=0;s<nbStep;s++) {
      |                      ^
keyhunt.cpp:4623:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4623 | #if 0
      |  ^
keyhunt.cpp:4641:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4641 | #if 0
      |  ^
keyhunt.cpp:4664:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4664 | #if 0
      |  ^
keyhunt.cpp:4681:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4681 |                                 if(!FLAGREADEDFILE3)    {
      |                                    ~^              
      |                                                     == 0
keyhunt.cpp:4682:47: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4682 |                                         memcpy(bPtable[i_counter].value,rawvalue+16,BSGS_XVALUE_RAM);
      |                                                                                  ^
keyhunt.cpp:4685:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4685 |                                 if(!FLAGREADEDFILE4)    {
      |                                    ~^              
      |                                                     == 0
keyhunt.cpp:4697:31: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4697 |                         if(i_counter < bsgs_m2 && !FLAGREADEDFILE2)     {
      |                                                   ~^              
      |                                                   (                == 0)
keyhunt.cpp:4708:26: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4708 |                         if(i_counter < to && !FLAGREADEDFILE1 ) {
      |                                              ~^
      |                                              (                == 0)
keyhunt.cpp:4756:16: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4756 |         char rawvalue[32];
      |                       ^
keyhunt.cpp:4757:17: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
 4757 |         struct bPload *tt;
      |                        ^
keyhunt.cpp:4758:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4758 |         uint64_t i_counter,j,nbStep; //,to;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4758:21: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 4758 |         uint64_t i_counter,j,nbStep; //,to;
      |                            ^
keyhunt.cpp:4761:6: warning: variable name 'dx' is too short, expected at least 3 characters [readability-identifier-length]
 4761 |         Int dx[CPU_GRP_SIZE / 2 + 1];
      |             ^
keyhunt.cpp:4763:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4763 |         Int dy,dyn,_s,_p;
      |         ^~~~~~~~~~~~~~~~~
keyhunt.cpp:4763:6: warning: variable name 'dy' is too short, expected at least 3 characters [readability-identifier-length]
 4763 |         Int dy,dyn,_s,_p;
      |             ^
keyhunt.cpp:4763:13: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
 4763 |         Int dy,dyn,_s,_p;
      |                    ^
keyhunt.cpp:4763:16: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
 4763 |         Int dy,dyn,_s,_p;
      |                       ^
keyhunt.cpp:4764:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4764 |         Point pp,pn;
      |         ^~~~~~~~~~~~
keyhunt.cpp:4764:8: warning: variable name 'pp' is too short, expected at least 3 characters [readability-identifier-length]
 4764 |         Point pp,pn;
      |               ^
keyhunt.cpp:4764:11: warning: variable name 'pn' is too short, expected at least 3 characters [readability-identifier-length]
 4764 |         Point pp,pn;
      |                  ^
keyhunt.cpp:4765:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4765 |         int i,bloom_bP_index,hLength = (CPU_GRP_SIZE / 2 - 1) ,threadid;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4765:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 4765 |         int i,bloom_bP_index,hLength = (CPU_GRP_SIZE / 2 - 1) ,threadid;
      |             ^
keyhunt.cpp:4767:6: warning: variable name 'km' is too short, expected at least 3 characters [readability-identifier-length]
 4767 |         Int km((uint64_t)(tt->from +1 ));
      |             ^
keyhunt.cpp:4783:15: warning: loop variable name 's' is too short, expected at least 2 characters [readability-identifier-length]
 4783 |         for(uint64_t s=0;s<nbStep;s++) {
      |                      ^
keyhunt.cpp:4812:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4812 | #if 0
      |  ^
keyhunt.cpp:4830:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4830 | #if 0
      |  ^
keyhunt.cpp:4853:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 4853 | #if 0
      |  ^
keyhunt.cpp:4864:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4864 |                                 if(!FLAGREADEDFILE3)    {
      |                                    ~^              
      |                                                     == 0
keyhunt.cpp:4865:47: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4865 |                                         memcpy(bPtable[i_counter].value,rawvalue+16,BSGS_XVALUE_RAM);
      |                                                                                  ^
keyhunt.cpp:4868:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4868 |                                 if(!FLAGREADEDFILE4)    {
      |                                    ~^              
      |                                                     == 0
keyhunt.cpp:4880:31: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 4880 |                         if(i_counter < bsgs_m2 && !FLAGREADEDFILE2)     {
      |                                                   ~^              
      |                                                   (                == 0)
keyhunt.cpp:4941:30: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4941 |         unsigned char bin_publickey[64];
      |                                     ^
keyhunt.cpp:4943:39: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4943 |         publickey.y.Get32Bytes(bin_publickey+32);
      |                                              ^
keyhunt.cpp:4944:28: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4944 |         KECCAK_256(bin_publickey, 64, bin_publickey);
      |                                   ^
keyhunt.cpp:4945:35: warning: 12 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4945 |         memcpy(dst_address,bin_publickey+12,20);
      |                                          ^
keyhunt.cpp:4945:38: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4945 |         memcpy(dst_address,bin_publickey+12,20);
      |                                             ^
keyhunt.cpp:4951:7: warning: function 'thread_process_bsgs_dance' has cognitive complexity of 89 (threshold 25) [readability-function-cognitive-complexity]
 4951 | void *thread_process_bsgs_dance(void *vargp)    {
      |       ^
keyhunt.cpp:4972:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 4972 |         if(bsgs_aux % 1024 != 0)        {
      |         ^
keyhunt.cpp:4986:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 4986 |         do      {
      |         ^
keyhunt.cpp:4993:2: note: +2, including nesting penalty of 1, nesting level increased to 2
 4993 |         switch(r)       {
      |         ^
keyhunt.cpp:4995:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 4995 |                         if(n_range_end.IsGreater(&BSGS_CURRENT))        {
      |                         ^
keyhunt.cpp:5001:6: note: +4, including nesting penalty of 3, nesting level increased to 4
 5001 |                                         if(n_range_end.IsLower(&BSGS_CURRENT))  {
      |                                         ^
keyhunt.cpp:5004:6: note: +1, nesting level increased to 4
 5004 |                                         else    {
      |                                         ^
keyhunt.cpp:5008:4: note: +1, nesting level increased to 3
 5008 |                         else    {
      |                         ^
keyhunt.cpp:5013:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 5013 |                         if(BSGS_CURRENT.IsLower(&n_range_end))  {
      |                         ^
keyhunt.cpp:5022:4: note: +1, nesting level increased to 3
 5022 |                         else    {
      |                         ^
keyhunt.cpp:5036:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5036 |                 if(entrar == 0)
      |                 ^
keyhunt.cpp:5039:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5039 |                 if(FLAGMATRIX)  {
      |                 ^
keyhunt.cpp:5045:3: note: +1, nesting level increased to 2
 5045 |                 else    {
      |                 ^
keyhunt.cpp:5046:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 5046 |                         if(FLAGQUIET == 0){
      |                         ^
keyhunt.cpp:5064:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5064 |                 for(k = 0; k < bsgs_point_number ; k++) {
      |                 ^
keyhunt.cpp:5065:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 5065 |                         if(bsgs_found[k] == 0)  {
      |                         ^
keyhunt.cpp:5068:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 5068 |                                 while( j < cycles && bsgs_found[k]== 0 )        {
      |                                 ^
keyhunt.cpp:5068:23: note: +1
 5068 |                                 while( j < cycles && bsgs_found[k]== 0 )        {
      |                                                   ^
keyhunt.cpp:5072:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 5072 |                                         for(i = 0; i < hLength; i++) {
      |                                         ^
keyhunt.cpp:5089:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 5089 |                                         for(i = 0; i<hLength; i++) {
      |                                         ^
keyhunt.cpp:5155:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 5155 |                                         for(int i = 0; i<CPU_GRP_SIZE && bsgs_found[k]== 0; i++) {
      |                                         ^
keyhunt.cpp:5155:36: note: +1
 5155 |                                         for(int i = 0; i<CPU_GRP_SIZE && bsgs_found[k]== 0; i++) {
      |                                                                       ^
keyhunt.cpp:5158:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 5158 |                                                 if(r) {
      |                                                 ^
keyhunt.cpp:5160:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 5160 |                                                         if(r)   {
      |                                                         ^
keyhunt.cpp:5173:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 5173 |                                                                 if(filekey != NULL)     {
      |                                                                 ^
keyhunt.cpp:5187:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 5187 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                 ^
keyhunt.cpp:5187:42: note: +1
 5187 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                                                  ^
keyhunt.cpp:5190:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 5190 |                                                                 if(salir)       {
      |                                                                 ^
keyhunt.cpp:4955:6: warning: variable name 'dx' is too short, expected at least 3 characters [readability-identifier-length]
 4955 |         Int dx[CPU_GRP_SIZE / 2 + 1];
      |             ^
keyhunt.cpp:4956:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4956 |         Point pp,pn,startP,base_point,point_aux,point_found;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4956:8: warning: variable name 'pp' is too short, expected at least 3 characters [readability-identifier-length]
 4956 |         Point pp,pn,startP,base_point,point_aux,point_found;
      |               ^
keyhunt.cpp:4956:11: warning: variable name 'pn' is too short, expected at least 3 characters [readability-identifier-length]
 4956 |         Point pp,pn,startP,base_point,point_aux,point_found;
      |                  ^
keyhunt.cpp:4958:19: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
 4958 |         struct tothread *tt;
      |                          ^
keyhunt.cpp:4959:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4959 |         char xpoint_raw[32],*aux_c,*hextemp;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4959:18: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4959 |         char xpoint_raw[32],*aux_c,*hextemp;
      |                         ^
keyhunt.cpp:4960:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4960 |         Int base_key,keyfound,dy,dyn,_s,_p,km,intaux;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4960:24: warning: variable name 'dy' is too short, expected at least 3 characters [readability-identifier-length]
 4960 |         Int base_key,keyfound,dy,dyn,_s,_p,km,intaux;
      |                               ^
keyhunt.cpp:4960:31: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
 4960 |         Int base_key,keyfound,dy,dyn,_s,_p,km,intaux;
      |                                      ^
keyhunt.cpp:4960:34: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
 4960 |         Int base_key,keyfound,dy,dyn,_s,_p,km,intaux;
      |                                         ^
keyhunt.cpp:4960:37: warning: variable name 'km' is too short, expected at least 3 characters [readability-identifier-length]
 4960 |         Int base_key,keyfound,dy,dyn,_s,_p,km,intaux;
      |                                            ^
keyhunt.cpp:4962:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 4962 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:4962:11: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 4962 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |                  ^
keyhunt.cpp:4962:13: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
 4962 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |                    ^
keyhunt.cpp:4962:15: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 4962 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |                      ^
keyhunt.cpp:4971:22: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4971 |         cycles = bsgs_aux / 1024;
      |                             ^
keyhunt.cpp:4972:16: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 4972 |         if(bsgs_aux % 1024 != 0)        {
      |                       ^
keyhunt.cpp:5036:18: warning: statement should be inside braces [readability-braces-around-statements]
 5036 |                 if(entrar == 0)
      |                                ^
      |                                 {
 5037 |                         break;
      |                               
keyhunt.cpp:5039:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 5039 |                 if(FLAGMATRIX)  {
      |                    ^         
      |                               != 0
keyhunt.cpp:5067:14: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 5067 |                                 uint32_t j = 0;
      |                                          ^
keyhunt.cpp:5070:10: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 5070 |                                         int i;
      |                                             ^
keyhunt.cpp:5104:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 5104 | #if 0
      |  ^
keyhunt.cpp:5122:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 5122 | #if 0
      |  ^
keyhunt.cpp:5147:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 5147 | #if 0
      |  ^
keyhunt.cpp:5157:76: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5157 |                                                 r = bloom_check(&bloom_bP[((unsigned char)xpoint_raw[0])],xpoint_raw,32);
      |                                                                                                                      ^
keyhunt.cpp:5158:10: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5158 |                                                 if(r) {
      |                                                    ^
      |                                                      != 0u
keyhunt.cpp:5159:43: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5159 |                                                         r = bsgs_secondcheck(&base_key,((j*1024) + i),k,&keyfound);
      |                                                                                            ^
keyhunt.cpp:5160:11: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5160 |                                                         if(r)   {
      |                                                            ^
      |                                                              != 0u
keyhunt.cpp:5187:45: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5187 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                                                     ^    
      |                                                                                                     (     != 0u)
keyhunt.cpp:5190:12: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5190 |                                                                 if(salir)       {
      |                                                                    ^    
      |                                                                          != 0u
keyhunt.cpp:5221:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 5221 |         }while(1);
      |                ^
      |                true
keyhunt.cpp:5229:7: warning: function 'thread_process_bsgs_backward' has cognitive complexity of 81 (threshold 25) [readability-function-cognitive-complexity]
 5229 | void *thread_process_bsgs_backward(void *vargp) {
      |       ^
keyhunt.cpp:5260:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 5260 |         if(bsgs_aux % 1024 != 0)        {
      |         ^
keyhunt.cpp:5272:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 5272 |         do      {
      |         ^
keyhunt.cpp:5279:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5279 |                 if(n_range_end.IsGreater(&n_range_start))       {
      |                 ^
keyhunt.cpp:5281:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 5281 |                         if(n_range_end.IsLower(&n_range_start)) {
      |                         ^
keyhunt.cpp:5284:4: note: +1, nesting level increased to 3
 5284 |                         else    {
      |                         ^
keyhunt.cpp:5288:3: note: +1, nesting level increased to 2
 5288 |                 else    {
      |                 ^
keyhunt.cpp:5296:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5296 |                 if(entrar == 0)
      |                 ^
keyhunt.cpp:5299:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5299 |                 if(FLAGMATRIX)  {
      |                 ^
keyhunt.cpp:5305:3: note: +1, nesting level increased to 2
 5305 |                 else    {
      |                 ^
keyhunt.cpp:5306:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 5306 |                         if(FLAGQUIET == 0){
      |                         ^
keyhunt.cpp:5324:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5324 |                 for(k = 0; k < bsgs_point_number ; k++) {
      |                 ^
keyhunt.cpp:5325:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 5325 |                         if(bsgs_found[k] == 0)  {
      |                         ^
keyhunt.cpp:5328:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 5328 |                                 while( j < cycles && bsgs_found[k]== 0 )        {
      |                                 ^
keyhunt.cpp:5328:23: note: +1
 5328 |                                 while( j < cycles && bsgs_found[k]== 0 )        {
      |                                                   ^
keyhunt.cpp:5330:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 5330 |                                         for(i = 0; i < hLength; i++) {
      |                                         ^
keyhunt.cpp:5347:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 5347 |                                         for(i = 0; i<hLength; i++) {
      |                                         ^
keyhunt.cpp:5413:6: note: +5, including nesting penalty of 4, nesting level increased to 5
 5413 |                                         for(int i = 0; i<CPU_GRP_SIZE && bsgs_found[k]== 0; i++) {
      |                                         ^
keyhunt.cpp:5413:36: note: +1
 5413 |                                         for(int i = 0; i<CPU_GRP_SIZE && bsgs_found[k]== 0; i++) {
      |                                                                       ^
keyhunt.cpp:5416:7: note: +6, including nesting penalty of 5, nesting level increased to 6
 5416 |                                                 if(r) {
      |                                                 ^
keyhunt.cpp:5418:8: note: +7, including nesting penalty of 6, nesting level increased to 7
 5418 |                                                         if(r)   {
      |                                                         ^
keyhunt.cpp:5431:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 5431 |                                                                 if(filekey != NULL)     {
      |                                                                 ^
keyhunt.cpp:5445:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 5445 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                 ^
keyhunt.cpp:5445:42: note: +1
 5445 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                                                  ^
keyhunt.cpp:5448:9: note: +8, including nesting penalty of 7, nesting level increased to 8
 5448 |                                                                 if(salir)       {
      |                                                                 ^
keyhunt.cpp:5232:19: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
 5232 |         struct tothread *tt;
      |                          ^
keyhunt.cpp:5233:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5233 |         char xpoint_raw[32],*aux_c,*hextemp;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5233:18: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5233 |         char xpoint_raw[32],*aux_c,*hextemp;
      |                         ^
keyhunt.cpp:5234:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5234 |         Int base_key,keyfound;
      |         ^~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5235:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5235 |         Point base_point,point_aux,point_found;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5236:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5236 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5236:11: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 5236 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |                  ^
keyhunt.cpp:5236:13: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
 5236 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |                    ^
keyhunt.cpp:5236:15: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 5236 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |                      ^
keyhunt.cpp:5243:6: warning: variable name 'dx' is too short, expected at least 3 characters [readability-identifier-length]
 5243 |         Int dx[CPU_GRP_SIZE / 2 + 1];
      |             ^
keyhunt.cpp:5246:6: warning: variable name 'dy' is too short, expected at least 3 characters [readability-identifier-length]
 5246 |         Int dy;
      |             ^
keyhunt.cpp:5248:6: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
 5248 |         Int _s;
      |             ^
keyhunt.cpp:5249:6: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
 5249 |         Int _p;
      |             ^
keyhunt.cpp:5250:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5250 |         Int km,intaux;
      |         ^~~~~~~~~~~~~~
keyhunt.cpp:5250:6: warning: variable name 'km' is too short, expected at least 3 characters [readability-identifier-length]
 5250 |         Int km,intaux;
      |             ^
keyhunt.cpp:5251:8: warning: variable name 'pp' is too short, expected at least 3 characters [readability-identifier-length]
 5251 |         Point pp;
      |               ^
keyhunt.cpp:5252:8: warning: variable name 'pn' is too short, expected at least 3 characters [readability-identifier-length]
 5252 |         Point pn;
      |               ^
keyhunt.cpp:5259:22: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5259 |         cycles = bsgs_aux / 1024;
      |                             ^
keyhunt.cpp:5260:16: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5260 |         if(bsgs_aux % 1024 != 0)        {
      |                       ^
keyhunt.cpp:5296:18: warning: statement should be inside braces [readability-braces-around-statements]
 5296 |                 if(entrar == 0)
      |                                ^
      |                                 {
 5297 |                         break;
      |                               
keyhunt.cpp:5299:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 5299 |                 if(FLAGMATRIX)  {
      |                    ^         
      |                               != 0
keyhunt.cpp:5327:14: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 5327 |                                 uint32_t j = 0;
      |                                          ^
keyhunt.cpp:5329:10: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 5329 |                                         int i;
      |                                             ^
keyhunt.cpp:5362:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 5362 | #if 0
      |  ^
keyhunt.cpp:5380:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 5380 | #if 0
      |  ^
keyhunt.cpp:5405:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 5405 | #if 0
      |  ^
keyhunt.cpp:5415:76: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5415 |                                                 r = bloom_check(&bloom_bP[((unsigned char)xpoint_raw[0])],xpoint_raw,32);
      |                                                                                                                      ^
keyhunt.cpp:5416:10: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5416 |                                                 if(r) {
      |                                                    ^
      |                                                      != 0u
keyhunt.cpp:5417:43: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5417 |                                                         r = bsgs_secondcheck(&base_key,((j*1024) + i),k,&keyfound);
      |                                                                                            ^
keyhunt.cpp:5418:11: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5418 |                                                         if(r)   {
      |                                                            ^
      |                                                              != 0u
keyhunt.cpp:5445:45: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5445 |                                                                 for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                                                     ^    
      |                                                                                                     (     != 0u)
keyhunt.cpp:5448:12: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5448 |                                                                 if(salir)       {
      |                                                                    ^    
      |                                                                          != 0u
keyhunt.cpp:5478:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 5478 |         }while(1);
      |                ^
      |                true
keyhunt.cpp:5486:7: warning: function 'thread_process_bsgs_both' has cognitive complexity of 89 (threshold 25) [readability-function-cognitive-complexity]
 5486 | void *thread_process_bsgs_both(void *vargp)     {
      |       ^
keyhunt.cpp:5518:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 5518 |         if(bsgs_aux % 1024 != 0)        {
      |         ^
keyhunt.cpp:5531:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 5531 |         do      {
      |         ^
keyhunt.cpp:5539:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5539 |                 switch(r)       {
      |                 ^
keyhunt.cpp:5541:5: note: +3, including nesting penalty of 2, nesting level increased to 3
 5541 |                                 if(n_range_end.IsGreater(&BSGS_CURRENT))        {
      |                                 ^
keyhunt.cpp:5547:7: note: +4, including nesting penalty of 3, nesting level increased to 4
 5547 |                                                 if(n_range_end.IsLower(&BSGS_CURRENT))  {
      |                                                 ^
keyhunt.cpp:5550:7: note: +1, nesting level increased to 4
 5550 |                                                 else    {
      |                                                 ^
keyhunt.cpp:5554:5: note: +1, nesting level increased to 3
 5554 |                                 else    {
      |                                 ^
keyhunt.cpp:5559:5: note: +3, including nesting penalty of 2, nesting level increased to 3
 5559 |                                 if(BSGS_CURRENT.IsLower(&n_range_end))  {
      |                                 ^
keyhunt.cpp:5568:5: note: +1, nesting level increased to 3
 5568 |                                 else    {
      |                                 ^
keyhunt.cpp:5579:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5579 |                 if(entrar == 0)
      |                 ^
keyhunt.cpp:5583:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5583 |                 if(FLAGMATRIX)  {
      |                 ^
keyhunt.cpp:5589:3: note: +1, nesting level increased to 2
 5589 |                 else    {
      |                 ^
keyhunt.cpp:5590:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 5590 |                         if(FLAGQUIET == 0){
      |                         ^
keyhunt.cpp:5608:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 5608 |                 for(k = 0; k < bsgs_point_number ; k++) {
      |                 ^
keyhunt.cpp:5609:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 5609 |                         if(bsgs_found[k] == 0)  {
      |                         ^
keyhunt.cpp:5612:6: note: +4, including nesting penalty of 3, nesting level increased to 4
 5612 |                                         while( j < cycles && bsgs_found[k]== 0 )        {
      |                                         ^
keyhunt.cpp:5612:24: note: +1
 5612 |                                         while( j < cycles && bsgs_found[k]== 0 )        {
      |                                                           ^
keyhunt.cpp:5614:7: note: +5, including nesting penalty of 4, nesting level increased to 5
 5614 |                                                 for(i = 0; i < hLength; i++) {
      |                                                 ^
keyhunt.cpp:5631:7: note: +5, including nesting penalty of 4, nesting level increased to 5
 5631 |                                                 for(i = 0; i<hLength; i++) {
      |                                                 ^
keyhunt.cpp:5697:7: note: +5, including nesting penalty of 4, nesting level increased to 5
 5697 |                                                 for(int i = 0; i<CPU_GRP_SIZE && bsgs_found[k]== 0; i++) {
      |                                                 ^
keyhunt.cpp:5697:37: note: +1
 5697 |                                                 for(int i = 0; i<CPU_GRP_SIZE && bsgs_found[k]== 0; i++) {
      |                                                                               ^
keyhunt.cpp:5700:8: note: +6, including nesting penalty of 5, nesting level increased to 6
 5700 |                                                         if(r) {
      |                                                         ^
keyhunt.cpp:5702:9: note: +7, including nesting penalty of 6, nesting level increased to 7
 5702 |                                                                 if(r)   {
      |                                                                 ^
keyhunt.cpp:5715:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 5715 |                                                                         if(filekey != NULL)     {
      |                                                                         ^
keyhunt.cpp:5729:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 5729 |                                                                         for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                         ^
keyhunt.cpp:5729:43: note: +1
 5729 |                                                                         for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                                                          ^
keyhunt.cpp:5732:10: note: +8, including nesting penalty of 7, nesting level increased to 8
 5732 |                                                                         if(salir)       {
      |                                                                         ^
keyhunt.cpp:5489:19: warning: variable name 'tt' is too short, expected at least 3 characters [readability-identifier-length]
 5489 |         struct tothread *tt;
      |                          ^
keyhunt.cpp:5490:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5490 |         char xpoint_raw[32],*aux_c,*hextemp;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5490:18: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5490 |         char xpoint_raw[32],*aux_c,*hextemp;
      |                         ^
keyhunt.cpp:5491:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5491 |         Int base_key,keyfound;
      |         ^~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5492:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5492 |         Point base_point,point_aux,point_found;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5493:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5493 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5493:11: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 5493 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |                  ^
keyhunt.cpp:5493:13: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
 5493 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |                    ^
keyhunt.cpp:5493:15: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 5493 |         uint32_t k,l,r,salir,thread_number,entrar,cycles;
      |                      ^
keyhunt.cpp:5500:6: warning: variable name 'dx' is too short, expected at least 3 characters [readability-identifier-length]
 5500 |         Int dx[CPU_GRP_SIZE / 2 + 1];
      |             ^
keyhunt.cpp:5503:6: warning: variable name 'dy' is too short, expected at least 3 characters [readability-identifier-length]
 5503 |         Int dy;
      |             ^
keyhunt.cpp:5505:6: warning: variable name '_s' is too short, expected at least 3 characters [readability-identifier-length]
 5505 |         Int _s;
      |             ^
keyhunt.cpp:5506:6: warning: variable name '_p' is too short, expected at least 3 characters [readability-identifier-length]
 5506 |         Int _p;
      |             ^
keyhunt.cpp:5507:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5507 |         Int km,intaux;
      |         ^~~~~~~~~~~~~~
keyhunt.cpp:5507:6: warning: variable name 'km' is too short, expected at least 3 characters [readability-identifier-length]
 5507 |         Int km,intaux;
      |             ^
keyhunt.cpp:5508:8: warning: variable name 'pp' is too short, expected at least 3 characters [readability-identifier-length]
 5508 |         Point pp;
      |               ^
keyhunt.cpp:5509:8: warning: variable name 'pn' is too short, expected at least 3 characters [readability-identifier-length]
 5509 |         Point pn;
      |               ^
keyhunt.cpp:5517:22: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5517 |         cycles = bsgs_aux / 1024;
      |                             ^
keyhunt.cpp:5518:16: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5518 |         if(bsgs_aux % 1024 != 0)        {
      |                       ^
keyhunt.cpp:5579:18: warning: statement should be inside braces [readability-braces-around-statements]
 5579 |                 if(entrar == 0)
      |                                ^
      |                                 {
 5580 |                         break;
      |                               
keyhunt.cpp:5583:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 5583 |                 if(FLAGMATRIX)  {
      |                    ^         
      |                               != 0
keyhunt.cpp:5611:15: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 5611 |                                         uint32_t j = 0;
      |                                                  ^
keyhunt.cpp:5613:11: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 5613 |                                                 int i;
      |                                                     ^
keyhunt.cpp:5646:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 5646 | #if 0
      |  ^
keyhunt.cpp:5664:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 5664 | #if 0
      |  ^
keyhunt.cpp:5689:2: warning: preprocessor condition is always 'false', consider removing both the condition and its contents [readability-avoid-unconditional-preprocessor-if]
 5689 | #if 0
      |  ^
keyhunt.cpp:5699:77: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5699 |                                                         r = bloom_check(&bloom_bP[((unsigned char)xpoint_raw[0])],xpoint_raw,32);
      |                                                                                                                              ^
keyhunt.cpp:5700:11: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5700 |                                                         if(r) {
      |                                                            ^
      |                                                              != 0u
keyhunt.cpp:5701:44: warning: 1024 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5701 |                                                                 r = bsgs_secondcheck(&base_key,((j*1024) + i),k,&keyfound);
      |                                                                                                    ^
keyhunt.cpp:5702:12: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5702 |                                                                 if(r)   {
      |                                                                    ^
      |                                                                      != 0u
keyhunt.cpp:5729:46: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5729 |                                                                         for(l = 0; l < bsgs_point_number && salir; l++) {
      |                                                                                                             ^    
      |                                                                                                             (     != 0u)
keyhunt.cpp:5732:13: warning: implicit conversion 'uint32_t' (aka 'unsigned int') -> 'bool' [readability-implicit-bool-conversion]
 5732 |                                                                         if(salir)       {
      |                                                                            ^    
      |                                                                                  != 0u
keyhunt.cpp:5763:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 5763 |         }while(1);
      |                ^
      |                true
keyhunt.cpp:5776:37: warning: pointer parameter 'rawbuffer' can be pointer to const [readability-non-const-parameter]
  223 | void set_minikey(char *buffer,char *rawbuffer,int length)       {
      |                                     ^
      |                               const 
keyhunt.cpp:5795:24: warning: 57 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5795 |         if(rawbuffer[index] < 57){
      |                               ^
keyhunt.cpp:5805:3: warning: do not use 'else' after 'return' [readability-else-after-return]
 5805 |                 else    {
      |                 ^~~~    ~
 5806 |                         return false;
      |                         ~~~~~~~~~~~~~
 5807 |                 }
      |                 ~
keyhunt.cpp:5823:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5823 |         int i = 20,j = 0;
      |         ^~~~~~~~~~~~~~~~~
keyhunt.cpp:5823:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 5823 |         int i = 20,j = 0;
      |             ^
keyhunt.cpp:5823:10: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5823 |         int i = 20,j = 0;
      |                 ^
keyhunt.cpp:5823:13: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 5823 |         int i = 20,j = 0;
      |                    ^
keyhunt.cpp:5826:21: warning: 57 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5826 |                 if(rawbuffer[i] > 57)   {        // Handling carry-over if value exceeds 57
      |                                   ^
keyhunt.cpp:5827:34: warning: 58 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5827 |                         rawbuffer[i] = rawbuffer[i] % 58;
      |                                                       ^
keyhunt.cpp:5855:28: warning: pointer parameter 'src0' can be pointer to const [readability-non-const-parameter]
  168 | void sha256sse_22(uint8_t *src0, uint8_t *src1, uint8_t *src2, uint8_t *src3, uint8_t *dst0, uint8_t *dst1, uint8_t *dst2, uint8_t *dst3)       {
      |                            ^
      |                   const 
keyhunt.cpp:5855:43: warning: pointer parameter 'src1' can be pointer to const [readability-non-const-parameter]
  168 | void sha256sse_22(uint8_t *src0, uint8_t *src1, uint8_t *src2, uint8_t *src3, uint8_t *dst0, uint8_t *dst1, uint8_t *dst2, uint8_t *dst3)       {
      |                                           ^
      |                                  const 
keyhunt.cpp:5855:58: warning: pointer parameter 'src2' can be pointer to const [readability-non-const-parameter]
  168 | void sha256sse_22(uint8_t *src0, uint8_t *src1, uint8_t *src2, uint8_t *src3, uint8_t *dst0, uint8_t *dst1, uint8_t *dst2, uint8_t *dst3)       {
      |                                                          ^
      |                                                 const 
keyhunt.cpp:5855:73: warning: pointer parameter 'src3' can be pointer to const [readability-non-const-parameter]
  168 | void sha256sse_22(uint8_t *src0, uint8_t *src1, uint8_t *src2, uint8_t *src3, uint8_t *dst0, uint8_t *dst1, uint8_t *dst2, uint8_t *dst3)       {
      |                                                                         ^
      |                                                                const 
keyhunt.cpp:5856:12: warning: variable name 'b0' is too short, expected at least 3 characters [readability-identifier-length]
 5856 |   uint32_t b0[16];
      |            ^
keyhunt.cpp:5856:15: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5856 |   uint32_t b0[16];
      |               ^
keyhunt.cpp:5857:12: warning: variable name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
 5857 |   uint32_t b1[16];
      |            ^
keyhunt.cpp:5857:15: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5857 |   uint32_t b1[16];
      |               ^
keyhunt.cpp:5858:12: warning: variable name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
 5858 |   uint32_t b2[16];
      |            ^
keyhunt.cpp:5858:15: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5858 |   uint32_t b2[16];
      |               ^
keyhunt.cpp:5859:12: warning: variable name 'b3' is too short, expected at least 3 characters [readability-identifier-length]
 5859 |   uint32_t b3[16];
      |            ^
keyhunt.cpp:5859:15: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5859 |   uint32_t b3[16];
      |               ^
keyhunt.cpp:5886:28: warning: pointer parameter 'src0' can be pointer to const [readability-non-const-parameter]
  169 | void sha256sse_23(uint8_t *src0, uint8_t *src1, uint8_t *src2, uint8_t *src3, uint8_t *dst0, uint8_t *dst1, uint8_t *dst2, uint8_t *dst3)       {
      |                            ^
      |                   const 
keyhunt.cpp:5886:43: warning: pointer parameter 'src1' can be pointer to const [readability-non-const-parameter]
  169 | void sha256sse_23(uint8_t *src0, uint8_t *src1, uint8_t *src2, uint8_t *src3, uint8_t *dst0, uint8_t *dst1, uint8_t *dst2, uint8_t *dst3)       {
      |                                           ^
      |                                  const 
keyhunt.cpp:5886:58: warning: pointer parameter 'src2' can be pointer to const [readability-non-const-parameter]
  169 | void sha256sse_23(uint8_t *src0, uint8_t *src1, uint8_t *src2, uint8_t *src3, uint8_t *dst0, uint8_t *dst1, uint8_t *dst2, uint8_t *dst3)       {
      |                                                          ^
      |                                                 const 
keyhunt.cpp:5886:73: warning: pointer parameter 'src3' can be pointer to const [readability-non-const-parameter]
  169 | void sha256sse_23(uint8_t *src0, uint8_t *src1, uint8_t *src2, uint8_t *src3, uint8_t *dst0, uint8_t *dst1, uint8_t *dst2, uint8_t *dst3)       {
      |                                                                         ^
      |                                                                const 
keyhunt.cpp:5887:12: warning: variable name 'b0' is too short, expected at least 3 characters [readability-identifier-length]
 5887 |   uint32_t b0[16];
      |            ^
keyhunt.cpp:5887:15: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5887 |   uint32_t b0[16];
      |               ^
keyhunt.cpp:5888:12: warning: variable name 'b1' is too short, expected at least 3 characters [readability-identifier-length]
 5888 |   uint32_t b1[16];
      |            ^
keyhunt.cpp:5888:15: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5888 |   uint32_t b1[16];
      |               ^
keyhunt.cpp:5889:12: warning: variable name 'b2' is too short, expected at least 3 characters [readability-identifier-length]
 5889 |   uint32_t b2[16];
      |            ^
keyhunt.cpp:5889:15: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5889 |   uint32_t b2[16];
      |               ^
keyhunt.cpp:5890:12: warning: variable name 'b3' is too short, expected at least 3 characters [readability-identifier-length]
 5890 |   uint32_t b3[16];
      |            ^
keyhunt.cpp:5890:15: warning: 16 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5890 |   uint32_t b3[16];
      |               ^
keyhunt.cpp:5934:7: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 5934 |         bool r = false;
      |              ^
keyhunt.cpp:5935:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5935 |         int i,j,cmpA,cmpB,result;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5935:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 5935 |         int i,j,cmpA,cmpB,result;
      |             ^
keyhunt.cpp:5935:8: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 5935 |         int i,j,cmpA,cmpB,result;
      |               ^
keyhunt.cpp:5945:60: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5945 |                                         cmpA = memcmp(vanity_rmd_limit_values_A[i][j],rmdhash,20);
      |                                                                                               ^
keyhunt.cpp:5946:60: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5946 |                                         cmpB = memcmp(vanity_rmd_limit_values_B[i][j],rmdhash,20);
      |                                                                                               ^
keyhunt.cpp:5964:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5964 |         char *hextemp,*hexrmd,public_key_hex[131],address[50],rmdhash[20];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5964:39: warning: 131 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5964 |         char *hextemp,*hexrmd,public_key_hex[131],address[50],rmdhash[20];
      |                                              ^
keyhunt.cpp:5964:52: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5964 |         char *hextemp,*hexrmd,public_key_hex[131],address[50],rmdhash[20];
      |                                                           ^
keyhunt.cpp:5964:64: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5964 |         char *hextemp,*hexrmd,public_key_hex[131],address[50],rmdhash[20];
      |                                                                       ^
keyhunt.cpp:5970:25: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5970 |         hexrmd = tohex(rmdhash,20);
      |                                ^
keyhunt.cpp:5995:5: warning: function 'addvanity' has cognitive complexity of 30 (threshold 25) [readability-function-cognitive-complexity]
 5995 | int addvanity(char *target)     {
      |     ^
keyhunt.cpp:6006:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6006 |         if(targetsize >= 30 )   {
      |         ^
keyhunt.cpp:6023:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6023 |         do      {
      |         ^
keyhunt.cpp:6026:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6026 |                 if(raw_value_length < 25)       {
      |                 ^
keyhunt.cpp:6030:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6030 |                 if(raw_value_length == 25)      {
      |                 ^
keyhunt.cpp:6053:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6053 |         do      {
      |         ^
keyhunt.cpp:6056:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6056 |                 if(raw_value_length < 25)       {
      |                 ^
keyhunt.cpp:6060:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6060 |                 if(raw_value_length == 25)      {
      |                 ^
keyhunt.cpp:6078:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6078 |         if(values_A_size >= 1 && values_B_size >= 1)    {
      |         ^
keyhunt.cpp:6078:24: note: +1
 6078 |         if(values_A_size >= 1 && values_B_size >= 1)    {
      |                               ^
keyhunt.cpp:6079:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6079 |                 if(values_A_size != values_B_size)      {
      |                 ^
keyhunt.cpp:6080:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6080 |                         if(values_A_size > values_B_size)
      |                         ^
keyhunt.cpp:6082:4: note: +1, nesting level increased to 3
 6082 |                         else
      |                         ^
keyhunt.cpp:6085:3: note: +1, nesting level increased to 2
 6085 |                 else    {
      |                 ^
keyhunt.cpp:6088:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6088 |                 for(j = 0; j < r; j++)  {
      |                 ^
keyhunt.cpp:6090:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6090 |                         if(minimun_bytes < vanity_rmd_minimun_bytes_check_length)       {
      |                         ^
keyhunt.cpp:6101:2: note: +1, nesting level increased to 1
 6101 |         else    {
      |         ^
keyhunt.cpp:6102:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6102 |                 for(j = 0; j < values_A_size;j++)       {
      |                 ^
keyhunt.cpp:6108:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6108 |                 for(j = 0; j < values_B_size;j++)       {
      |                 ^
keyhunt.cpp:5996:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5996 |         unsigned char raw_value_A[50],raw_value_B[50];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5996:28: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5996 |         unsigned char raw_value_A[50],raw_value_B[50];
      |                                   ^
keyhunt.cpp:5996:44: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5996 |         unsigned char raw_value_A[50],raw_value_B[50];
      |                                                   ^
keyhunt.cpp:5997:19: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 5997 |         char target_copy[50];
      |                          ^
keyhunt.cpp:5998:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 5998 |         int stringsize,targetsize,j,r = 0;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:5998:28: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
 5998 |         int stringsize,targetsize,j,r = 0;
      |                                   ^
keyhunt.cpp:5998:30: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 5998 |         int stringsize,targetsize,j,r = 0;
      |                                     ^
keyhunt.cpp:6000:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6000 |         int values_A_size = 0,values_B_size = 0,minimun_bytes;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6001:21: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6001 |         raw_value_length = 50;
      |                            ^
keyhunt.cpp:6004:23: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6004 |         memset(raw_value_A,0,50);
      |                              ^
keyhunt.cpp:6005:23: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6005 |         memset(target_copy,0,50);
      |                              ^
keyhunt.cpp:6006:19: warning: 30 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6006 |         if(targetsize >= 30 )   {
      |                          ^
keyhunt.cpp:6024:22: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6024 |                 raw_value_length = 50;
      |                                    ^
keyhunt.cpp:6026:25: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6026 |                 if(raw_value_length < 25)       {
      |                                       ^
keyhunt.cpp:6030:26: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6030 |                 if(raw_value_length == 25)      {
      |                                        ^
keyhunt.cpp:6035:72: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6035 |                         vanity_rmd_limit_values_A[vanity_rmd_targets][j] = (uint8_t*)calloc(20,1);
      |                                                                                             ^
keyhunt.cpp:6038:76: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6038 |                         memcpy(vanity_rmd_limit_values_A[vanity_rmd_targets][j] ,raw_value_A +1,20);
      |                                                                                                 ^
keyhunt.cpp:6045:29: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6045 |         }while(raw_value_length <= 25);
      |                                    ^
keyhunt.cpp:6048:23: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6048 |         memset(raw_value_B,0,50);
      |                              ^
keyhunt.cpp:6049:23: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6049 |         memset(target_copy,0,50);
      |                              ^
keyhunt.cpp:6054:22: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6054 |                 raw_value_length = 50;
      |                                    ^
keyhunt.cpp:6056:25: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6056 |                 if(raw_value_length < 25)       {
      |                                       ^
keyhunt.cpp:6060:26: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6060 |                 if(raw_value_length == 25)      {
      |                                        ^
keyhunt.cpp:6066:72: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6066 |                         vanity_rmd_limit_values_B[vanity_rmd_targets][j] = (uint8_t*)calloc(20,1);
      |                                                                                             ^
keyhunt.cpp:6068:74: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6068 |                         memcpy(vanity_rmd_limit_values_B[vanity_rmd_targets][j],raw_value_B+1,20);
      |                                                                                               ^
keyhunt.cpp:6076:29: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6076 |         }while(raw_value_length <= 25);
      |                                    ^
keyhunt.cpp:6080:37: warning: statement should be inside braces [readability-braces-around-statements]
 6080 |                         if(values_A_size > values_B_size)
      |                                                          ^
      |                                                           {
 6081 |                                 r = values_B_size;
 6082 |                         else
      |                         } 
keyhunt.cpp:6082:8: warning: statement should be inside braces [readability-braces-around-statements]
 6082 |                         else
      |                             ^
      |                              {
 6083 |                                 r = values_A_size;
      |                                                   
keyhunt.cpp:6089:138: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6089 |                         minimun_bytes =  minimum_same_bytes(vanity_rmd_limit_values_A[vanity_rmd_targets][j],vanity_rmd_limit_values_B[vanity_rmd_targets][j],20);
      |                                                                                                                                                               ^
keyhunt.cpp:6125:39: warning: parameter name 'A' is too short, expected at least 3 characters [readability-identifier-length]
 6125 | int minimum_same_bytes(unsigned char* A,unsigned char* B, int length) {
      |                                       ^
keyhunt.cpp:6125:39: warning: pointer parameter 'A' can be pointer to const [readability-non-const-parameter]
  174 | int minimum_same_bytes(unsigned char* A,unsigned char* B, int length) {
      |                                       ^
      |                        const 
keyhunt.cpp:6125:56: warning: parameter name 'B' is too short, expected at least 3 characters [readability-identifier-length]
 6125 | int minimum_same_bytes(unsigned char* A,unsigned char* B, int length) {
      |                                                        ^
keyhunt.cpp:6125:56: warning: pointer parameter 'B' can be pointer to const [readability-non-const-parameter]
  174 | int minimum_same_bytes(unsigned char* A,unsigned char* B, int length) {
      |                                                        ^
      |                                         const 
keyhunt.cpp:6150:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6150 |         char *hextemp,*hexrmd,public_key_hex[132],address[50],rmdhash[20];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6150:39: warning: 132 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6150 |         char *hextemp,*hexrmd,public_key_hex[132],address[50],rmdhash[20];
      |                                              ^
keyhunt.cpp:6150:52: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6150 |         char *hextemp,*hexrmd,public_key_hex[132],address[50],rmdhash[20];
      |                                                           ^
keyhunt.cpp:6150:64: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6150 |         char *hextemp,*hexrmd,public_key_hex[132],address[50],rmdhash[20];
      |                                                                       ^
keyhunt.cpp:6151:19: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6151 |         memset(address,0,50);
      |                          ^
keyhunt.cpp:6152:26: warning: 132 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6152 |         memset(public_key_hex,0,132);
      |                                 ^
keyhunt.cpp:6157:25: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6157 |         hexrmd = tohex(rmdhash,20);
      |                                ^
keyhunt.cpp:6184:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6184 |         char *hextemp,address[43],hash[20];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6184:24: warning: 43 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6184 |         char *hextemp,address[43],hash[20];
      |                               ^
keyhunt.cpp:6184:33: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6184 |         char *hextemp,address[43],hash[20];
      |                                        ^
keyhunt.cpp:6190:17: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6190 |         tohex_dst(hash,20,address+2);
      |                        ^
keyhunt.cpp:6211:20: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
 6211 | bool isBase58(char c) {
      |                    ^
keyhunt.cpp:6228:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6228 |         int i,k;
      |         ^~~~~~~~
keyhunt.cpp:6228:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 6228 |         int i,k;
      |             ^
keyhunt.cpp:6228:8: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 6228 |         int i,k;
      |               ^
keyhunt.cpp:6234:54: warning: statement should be inside braces [readability-braces-around-statements]
 6234 |         if(!initBloomFilter(vanity_bloom, vanity_rmd_total))
      |                                                             ^
      |                                                              {
 6235 |                 return false;
      |                              
keyhunt.cpp:6248:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6248 |         int i,k,len;
      |         ^~~~~~~~~~~~
keyhunt.cpp:6248:6: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 6248 |         int i,k,len;
      |             ^
keyhunt.cpp:6248:8: warning: variable name 'k' is too short, expected at least 3 characters [readability-identifier-length]
 6248 |         int i,k,len;
      |               ^
keyhunt.cpp:6249:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6249 |         char aux[100],*hextemp;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6249:11: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6249 |         char aux[100],*hextemp;
      |                  ^
keyhunt.cpp:6259:10: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6259 |                 while(!feof(fileDescriptor))    {
      |                       ~^                   
      |                                             == 0
keyhunt.cpp:6260:24: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6260 |                         hextemp = fgets(aux,100,fileDescriptor);
      |                                             ^
keyhunt.cpp:6264:25: warning: 36 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6264 |                                 if(len > 0 && len < 36){
      |                                                     ^
keyhunt.cpp:6278:38: warning: statement should be inside braces [readability-braces-around-statements]
 6278 |         if(!initBloomFilter(vanity_bloom,N))
      |                                             ^
      |                                              {
 6279 |                 return false;
      |                              
keyhunt.cpp:6289:6: warning: function 'readFileAddress' has cognitive complexity of 53 (threshold 25) [readability-function-cognitive-complexity]
 6289 | bool readFileAddress(char *fileName)    {
      |      ^
keyhunt.cpp:6299:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6299 |         if(FLAGSAVEREADFILE)    {       /* if the flag is set to REAd and SAVE the file firs we need to check it the file exist*/
      |         ^
keyhunt.cpp:6300:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6300 |                 if(!sha256_file((const char*)fileName,checksum)){
      |                 ^
keyhunt.cpp:6307:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6307 |                 if(fileDescriptor != NULL)      {
      |                 ^
keyhunt.cpp:6324:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6324 |                         if(bytesRead != 32)     {
      |                         ^
keyhunt.cpp:6332:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6332 |                         if(bytesRead != sizeof(struct bloom))   {
      |                         ^
keyhunt.cpp:6341:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6341 |                         if(bloom.bf == NULL)    {
      |                         ^
keyhunt.cpp:6349:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6349 |                         if(bytesRead != bloom.bytes)    {
      |                         ^
keyhunt.cpp:6354:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6354 |                         if(FLAGSKIPCHECKSUM == 0){
      |                         ^
keyhunt.cpp:6367:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 6367 |                                 if(memcmp(checksum,bloomChecksum,32) != 0)      {
      |                                 ^
keyhunt.cpp:6384:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6384 |                         if(bytesRead != 32)     {
      |                         ^
keyhunt.cpp:6391:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6391 |                         if(bytesRead != sizeof(uint64_t))       {
      |                         ^
keyhunt.cpp:6401:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6401 |                         if(addressTable == NULL)        {
      |                         ^
keyhunt.cpp:6408:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6408 |                         if(bytesRead != dataSize)       {
      |                         ^
keyhunt.cpp:6413:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6413 |                         if(FLAGSKIPCHECKSUM == 0)       {
      |                         ^
keyhunt.cpp:6416:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 6416 |                                 if(memcmp(checksum,dataChecksum,32) != 0)       {
      |                                 ^
keyhunt.cpp:6428:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6428 |         if(FLAGVANITY)  {
      |         ^
keyhunt.cpp:6431:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6431 |         if(!FLAGREADEDFILE1)    {
      |         ^
keyhunt.cpp:6435:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6435 |                 switch(FLAGMODE)        {
      |                 ^
keyhunt.cpp:6437:5: note: +3, including nesting penalty of 2, nesting level increased to 3
 6437 |                                 if(FLAGCRYPTO == CRYPTO_BTC)    {
      |                                 ^
keyhunt.cpp:6440:5: note: +3, including nesting penalty of 2, nesting level increased to 3
 6440 |                                 if(FLAGCRYPTO == CRYPTO_ETH)    {
      |                                 ^
keyhunt.cpp:6291:21: warning: 30 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6291 |         char fileBloomName[30]; /* Actually it is Bloom and Table but just to keep the variable name short*/
      |                            ^
keyhunt.cpp:6292:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6292 |         uint8_t checksum[32],hexPrefix[9];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6292:19: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6292 |         uint8_t checksum[32],hexPrefix[9];
      |                          ^
keyhunt.cpp:6292:33: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6292 |         uint8_t checksum[32],hexPrefix[9];
      |                                        ^
keyhunt.cpp:6293:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6293 |         char dataChecksum[32],bloomChecksum[32];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6293:20: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6293 |         char dataChecksum[32],bloomChecksum[32];
      |                           ^
keyhunt.cpp:6293:38: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6293 |         char dataChecksum[32],bloomChecksum[32];
      |                                             ^
keyhunt.cpp:6299:5: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6299 |         if(FLAGSAVEREADFILE)    {       /* if the flag is set to REAd and SAVE the file firs we need to check it the file exist*/
      |            ^               
      |                             != 0
keyhunt.cpp:6305:26: warning: 30 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6305 |                 snprintf(fileBloomName,30,"data_%s.dat",hexPrefix);
      |                                        ^
keyhunt.cpp:6323:38: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6323 |                         bytesRead = fread(bloomChecksum,1,32,fileDescriptor);
      |                                                           ^
keyhunt.cpp:6324:20: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6324 |                         if(bytesRead != 32)     {
      |                                         ^
keyhunt.cpp:6357:12: warning: redundant explicit casting to the same type 'uint8_t *' (aka 'unsigned char *') as the sub-expression, remove this casting [readability-redundant-casting]
 6357 |                                 sha256((uint8_t*)bloom.bf,bloom.bytes,(uint8_t*)checksum);
      |                                        ^~~~~~~~~~
./bloom/bloom.h:44:12: note: source type originates from referencing this member
   44 |   uint8_t *bf;
      |   ~~~~~~~~~^
keyhunt.cpp:6367:38: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6367 |                                 if(memcmp(checksum,bloomChecksum,32) != 0)      {
      |                                                                  ^
keyhunt.cpp:6383:37: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6383 |                         bytesRead = fread(dataChecksum,1,32,fileDescriptor);
      |                                                          ^
keyhunt.cpp:6384:20: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6384 |                         if(bytesRead != 32)     {
      |                                         ^
keyhunt.cpp:6398:73: warning: redundant explicit casting to the same type 'double' as the sub-expression, remove this casting [readability-redundant-casting]
 6398 |                         printf("[+] Allocating memory for %" PRIu64 " elements: %.2f MB\n",N,(double)(((double) sizeof(struct address_value)*N)/(double)1048576));
      |                                                                                              ^~~~~~~~~                                                         ~
      |                                                                                              (                                                                 )
keyhunt.cpp:6398:132: warning: 1048576 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6398 |                         printf("[+] Allocating memory for %" PRIu64 " elements: %.2f MB\n",N,(double)(((double) sizeof(struct address_value)*N)/(double)1048576));
      |                                                                                                                                                         ^
keyhunt.cpp:6416:37: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6416 |                                 if(memcmp(checksum,dataChecksum,32) != 0)       {
      |                                                                 ^
keyhunt.cpp:6428:5: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6428 |         if(FLAGVANITY)  {
      |            ^         
      |                       != 0
keyhunt.cpp:6431:6: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6431 |         if(!FLAGREADEDFILE1)    {
      |            ~^              
      |                             == 0
keyhunt.cpp:6459:6: warning: function 'forceReadFileAddress' has cognitive complexity of 26 (threshold 25) [readability-function-cognitive-complexity]
 6459 | bool forceReadFileAddress(char *fileName)       {
      |      ^
keyhunt.cpp:6468:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6468 |         if(fileDescriptor == NULL)      {
      |         ^
keyhunt.cpp:6475:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6475 |         while(!feof(fileDescriptor))    {
      |         ^
keyhunt.cpp:6478:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6478 |                 if(hextemp == aux)      {                       
      |                 ^
keyhunt.cpp:6480:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6480 |                         if(r > 20)      { 
      |                         ^
keyhunt.cpp:6492:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6492 |         if(!initBloomFilter(&bloom,numberItems))
      |         ^
keyhunt.cpp:6496:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6496 |         while(i < numberItems)  {
      |         ^
keyhunt.cpp:6503:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6503 |                 if(r > 0 && r <= 40)    {
      |                 ^
keyhunt.cpp:6503:12: note: +1
 6503 |                 if(r > 0 && r <= 40)    {
      |                          ^
keyhunt.cpp:6504:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6504 |                         if(r<40 && isValidBase58String(aux))    {       //Address
      |                         ^
keyhunt.cpp:6504:12: note: +1
 6504 |                         if(r<40 && isValidBase58String(aux))    {       //Address
      |                                 ^
keyhunt.cpp:6507:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 6507 |                                 if(raw_value_length == 25)      {
      |                                 ^
keyhunt.cpp:6515:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6515 |                         if(r == 40 && isValidHex(aux))  {       //RMD
      |                         ^
keyhunt.cpp:6515:15: note: +1
 6515 |                         if(r == 40 && isValidHex(aux))  {       //RMD
      |                                    ^
keyhunt.cpp:6523:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6523 |                 if(!validAddress)       {
      |                 ^
keyhunt.cpp:6463:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6463 |         uint64_t numberItems,i;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6463:23: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 6463 |         uint64_t numberItems,i;
      |                              ^
keyhunt.cpp:6464:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6464 |         size_t r,raw_value_length;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6464:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 6464 |         size_t r,raw_value_length;
      |                ^
keyhunt.cpp:6465:19: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6465 |         uint8_t rawvalue[50];
      |                          ^
keyhunt.cpp:6466:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6466 |         char aux[100],*hextemp;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6466:11: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6466 |         char aux[100],*hextemp;
      |                  ^
keyhunt.cpp:6475:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6475 |         while(!feof(fileDescriptor))    {
      |               ~^                   
      |                                     == 0
keyhunt.cpp:6476:23: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6476 |                 hextemp = fgets(aux,100,fileDescriptor);
      |                                     ^
keyhunt.cpp:6480:11: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6480 |                         if(r > 20)      { 
      |                                ^
keyhunt.cpp:6486:21: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6486 |         MAXLENGTHADDRESS = 20;          /*20 bytes beacuase we only need the data in binary*/
      |                            ^
keyhunt.cpp:6488:81: warning: redundant explicit casting to the same type 'double' as the sub-expression, remove this casting [readability-redundant-casting]
 6488 |         printf("[+] Allocating memory for %" PRIu64 " elements: %.2f MB\n",numberItems,(double)(((double) sizeof(struct address_value)*numberItems)/(double)1048576));
      |                                                                                        ^~~~~~~~~                                                                   ~
      |                                                                                        (                                                                           )
keyhunt.cpp:6488:150: warning: 1048576 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6488 |         printf("[+] Allocating memory for %" PRIu64 " elements: %.2f MB\n",numberItems,(double)(((double) sizeof(struct address_value)*numberItems)/(double)1048576));
      |                                                                                                                                                             ^
keyhunt.cpp:6492:42: warning: statement should be inside braces [readability-braces-around-statements]
 6492 |         if(!initBloomFilter(&bloom,numberItems))
      |                                                 ^
      |                                                  {
 6493 |                 return false;
      |                              
keyhunt.cpp:6498:16: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6498 |                 memset(aux,0,100);
      |                              ^
keyhunt.cpp:6500:3: warning: Value stored to 'hextemp' is never read [clang-analyzer-deadcode.DeadStores]
 6500 |                 hextemp = fgets(aux,100,fileDescriptor);
      |                 ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6500:3: note: Value stored to 'hextemp' is never read
 6500 |                 hextemp = fgets(aux,100,fileDescriptor);
      |                 ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6500:23: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6500 |                 hextemp = fgets(aux,100,fileDescriptor);
      |                                     ^
keyhunt.cpp:6503:20: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6503 |                 if(r > 0 && r <= 40)    {
      |                                  ^
keyhunt.cpp:6504:9: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6504 |                         if(r<40 && isValidBase58String(aux))    {       //Address
      |                              ^
keyhunt.cpp:6505:24: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6505 |                                 raw_value_length = 25;
      |                                                    ^
keyhunt.cpp:6507:28: warning: 25 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6507 |                                 if(raw_value_length == 25)      {
      |                                                        ^
keyhunt.cpp:6515:12: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6515 |                         if(r == 40 && isValidHex(aux))  {       //RMD
      |                                 ^
keyhunt.cpp:6515:18: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6515 |                         if(r == 40 && isValidHex(aux))  {       //RMD
      |                                       ^              
      |                                       (               != 0)
keyhunt.cpp:6536:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6536 |         uint64_t numberItems,i;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6536:23: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 6536 |         uint64_t numberItems,i;
      |                              ^
keyhunt.cpp:6537:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 6537 |         size_t r;
      |                ^
keyhunt.cpp:6538:19: warning: 50 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6538 |         uint8_t rawvalue[50];
      |                          ^
keyhunt.cpp:6539:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6539 |         char aux[100],*hextemp;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6539:11: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6539 |         char aux[100],*hextemp;
      |                  ^
keyhunt.cpp:6547:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6547 |         while(!feof(fileDescriptor))    {
      |               ~^                   
      |                                     == 0
keyhunt.cpp:6548:23: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6548 |                 hextemp = fgets(aux,100,fileDescriptor);
      |                                     ^
keyhunt.cpp:6552:12: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6552 |                         if(r >= 40)     { 
      |                                 ^
keyhunt.cpp:6559:21: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6559 |         MAXLENGTHADDRESS = 20;          /*20 bytes beacuase we only need the data in binary*/
      |                            ^
keyhunt.cpp:6562:81: warning: redundant explicit casting to the same type 'double' as the sub-expression, remove this casting [readability-redundant-casting]
 6562 |         printf("[+] Allocating memory for %" PRIu64 " elements: %.2f MB\n",numberItems,(double)(((double) sizeof(struct address_value)*numberItems)/(double)1048576));
      |                                                                                        ^~~~~~~~~                                                                   ~
      |                                                                                        (                                                                           )
keyhunt.cpp:6562:150: warning: 1048576 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6562 |         printf("[+] Allocating memory for %" PRIu64 " elements: %.2f MB\n",numberItems,(double)(((double) sizeof(struct address_value)*numberItems)/(double)1048576));
      |                                                                                                                                                             ^
keyhunt.cpp:6567:32: warning: statement should be inside braces [readability-braces-around-statements]
 6567 |         if(!initBloomFilter(&bloom,N))
      |                                       ^
      |                                        {
 6568 |                 return false;
      |                              
keyhunt.cpp:6573:16: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6573 |                 memset(aux,0,100);
      |                              ^
keyhunt.cpp:6575:3: warning: Value stored to 'hextemp' is never read [clang-analyzer-deadcode.DeadStores]
 6575 |                 hextemp = fgets(aux,100,fileDescriptor);
      |                 ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6575:3: note: Value stored to 'hextemp' is never read
 6575 |                 hextemp = fgets(aux,100,fileDescriptor);
      |                 ^         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6575:23: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6575 |                 hextemp = fgets(aux,100,fileDescriptor);
      |                                     ^
keyhunt.cpp:6578:11: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6578 |                 if(r >= 40 && r <= 42){
      |                         ^
keyhunt.cpp:6578:22: warning: 42 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6578 |                 if(r >= 40 && r <= 42){
      |                                    ^
keyhunt.cpp:6580:10: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6580 |                                 case 40:
      |                                      ^
keyhunt.cpp:6581:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6581 |                                         if(isValidHex(aux)){
      |                                            ^              
      |                                                            != 0
keyhunt.cpp:6589:10: warning: 42 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6589 |                                 case 42:
      |                                      ^
keyhunt.cpp:6590:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6590 |                                         if(isValidHex(aux+2)){
      |                                            ^                
      |                                                              != 0
keyhunt.cpp:6612:6: warning: function 'forceReadFileXPoint' has cognitive complexity of 38 (threshold 25) [readability-function-cognitive-complexity]
 6612 | bool forceReadFileXPoint(char *fileName)        {
      |      ^
keyhunt.cpp:6621:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6621 |         if(fileDescriptor == NULL)      {
      |         ^
keyhunt.cpp:6627:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6627 |         while(!feof(fileDescriptor))    {
      |         ^
keyhunt.cpp:6630:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6630 |                 if(hextemp == aux)      {                       
      |                 ^
keyhunt.cpp:6632:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6632 |                         if(r >= 40)     { 
      |                         ^
keyhunt.cpp:6647:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6647 |         if(!initBloomFilter(&bloom,N))
      |         ^
keyhunt.cpp:6651:2: note: +1, including nesting penalty of 0, nesting level increased to 1
 6651 |         while(i < N)    {
      |         ^
keyhunt.cpp:6655:3: note: +2, including nesting penalty of 1, nesting level increased to 2
 6655 |                 if(hextemp == aux)      {
      |                 ^
keyhunt.cpp:6660:4: note: +3, including nesting penalty of 2, nesting level increased to 3
 6660 |                         if(isValidHex(hextemp)) {
      |                         ^
keyhunt.cpp:6661:5: note: +4, including nesting penalty of 3, nesting level increased to 4
 6661 |                                 switch(lenaux)  {
      |                                 ^
keyhunt.cpp:6664:7: note: +5, including nesting penalty of 4, nesting level increased to 5
 6664 |                                                 if(r)   {
      |                                                 ^
keyhunt.cpp:6668:7: note: +1, nesting level increased to 5
 6668 |                                                 else    {
      |                                                 ^
keyhunt.cpp:6674:7: note: +5, including nesting penalty of 4, nesting level increased to 5
 6674 |                                                 if(r)   {
      |                                                 ^
keyhunt.cpp:6678:7: note: +1, nesting level increased to 5
 6678 |                                                 else    {
      |                                                 ^
keyhunt.cpp:6684:7: note: +5, including nesting penalty of 4, nesting level increased to 5
 6684 |                                                 if(r)   {
      |                                                 ^
keyhunt.cpp:6688:7: note: +1, nesting level increased to 5
 6688 |                                                 else    {
      |                                                 ^
keyhunt.cpp:6697:4: note: +1, nesting level increased to 3
 6697 |                         else    {
      |                         ^
keyhunt.cpp:6702:3: note: +1, nesting level increased to 2
 6702 |                 else    {
      |                 ^
keyhunt.cpp:6615:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6615 |         uint64_t numberItems,i;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6615:23: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 6615 |         uint64_t numberItems,i;
      |                              ^
keyhunt.cpp:6616:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6616 |         size_t r,lenaux;
      |         ^~~~~~~~~~~~~~~~
keyhunt.cpp:6616:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 6616 |         size_t r,lenaux;
      |                ^
keyhunt.cpp:6617:19: warning: 100 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6617 |         uint8_t rawvalue[100];
      |                          ^
keyhunt.cpp:6618:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6618 |         char aux[1000],*hextemp;
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6618:11: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6618 |         char aux[1000],*hextemp;
      |                  ^
keyhunt.cpp:6627:9: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6627 |         while(!feof(fileDescriptor))    {
      |               ~^                   
      |                                     == 0
keyhunt.cpp:6628:23: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6628 |                 hextemp = fgets(aux,1000,fileDescriptor);
      |                                     ^
keyhunt.cpp:6632:12: warning: 40 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6632 |                         if(r >= 40)     { 
      |                                 ^
keyhunt.cpp:6639:21: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6639 |         MAXLENGTHADDRESS = 20;          /*20 bytes beacuase we only need the data in binary*/
      |                            ^
keyhunt.cpp:6641:81: warning: redundant explicit casting to the same type 'double' as the sub-expression, remove this casting [readability-redundant-casting]
 6641 |         printf("[+] Allocating memory for %" PRIu64 " elements: %.2f MB\n",numberItems,(double)(((double) sizeof(struct address_value)*numberItems)/(double)1048576));
      |                                                                                        ^~~~~~~~~                                                                   ~
      |                                                                                        (                                                                           )
keyhunt.cpp:6641:150: warning: 1048576 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6641 |         printf("[+] Allocating memory for %" PRIu64 " elements: %.2f MB\n",numberItems,(double)(((double) sizeof(struct address_value)*numberItems)/(double)1048576));
      |                                                                                                                                                             ^
keyhunt.cpp:6647:32: warning: statement should be inside braces [readability-braces-around-statements]
 6647 |         if(!initBloomFilter(&bloom,N))
      |                                       ^
      |                                        {
 6648 |                 return false;
      |                              
keyhunt.cpp:6652:16: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6652 |                 memset(aux,0,1000);
      |                              ^
keyhunt.cpp:6653:23: warning: 1000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6653 |                 hextemp = fgets(aux,1000,fileDescriptor);
      |                                     ^
keyhunt.cpp:6660:7: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6660 |                         if(isValidHex(hextemp)) {
      |                            ^                  
      |                                                != 0
keyhunt.cpp:6662:11: warning: 64 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6662 |                                         case 64:        /*X value*/
      |                                              ^
keyhunt.cpp:6664:10: warning: implicit conversion 'size_t' (aka 'unsigned long') -> 'bool' [readability-implicit-bool-conversion]
 6664 |                                                 if(r)   {
      |                                                    ^
      |                                                      != 0u
keyhunt.cpp:6665:46: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6665 |                                                         memcpy(addressTable[i].value,rawvalue,20);
      |                                                                                               ^
keyhunt.cpp:6672:11: warning: 66 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6672 |                                         case 66:        /*Compress publickey*/
      |                                              ^
keyhunt.cpp:6674:10: warning: implicit conversion 'size_t' (aka 'unsigned long') -> 'bool' [readability-implicit-bool-conversion]
 6674 |                                                 if(r)   {
      |                                                    ^
      |                                                      != 0u
keyhunt.cpp:6675:46: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6675 |                                                         memcpy(addressTable[i].value,rawvalue,20);
      |                                                                                               ^
keyhunt.cpp:6682:11: warning: 130 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6682 |                                         case 130:       /* Uncompress publickey length*/
      |                                              ^
keyhunt.cpp:6684:10: warning: implicit conversion 'size_t' (aka 'unsigned long') -> 'bool' [readability-implicit-bool-conversion]
 6684 |                                                 if(r)   {
      |                                                    ^
      |                                                      != 0u
keyhunt.cpp:6685:49: warning: 20 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6685 |                                                                 memcpy(addressTable[i].value,rawvalue+2,20);
      |                                                                                                         ^
keyhunt.cpp:6718:7: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
 6718 |         bool r = true;
      |              ^
keyhunt.cpp:6720:20: warning: 10000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6720 |         if(items_bloom <= 10000)        {
      |                           ^
keyhunt.cpp:6721:28: warning: 10000 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6721 |                 if(bloom_init2(bloom_arg,10000,0.000001) == 1){
      |                                          ^
keyhunt.cpp:6721:34: warning: 0.000001 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6721 |                 if(bloom_init2(bloom_arg,10000,0.000001) == 1){
      |                                                ^
keyhunt.cpp:6727:60: warning: 0.000001 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6727 |                 if(bloom_init2(bloom_arg,FLAGBLOOMMULTIPLIER*items_bloom,0.000001)      == 1){
      |                                                                          ^
keyhunt.cpp:6732:64: warning: redundant explicit casting to the same type 'double' as the sub-expression, remove this casting [readability-redundant-casting]
 6732 |         printf("[+] Loading data to the bloomfilter total: %.2f MB\n",(double)(((double) bloom_arg->bytes)/(double)1048576));
      |                                                                       ^~~~~~~~~                                           ~
      |                                                                       (                                                   )
keyhunt.cpp:6732:109: warning: 1048576 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6732 |         printf("[+] Loading data to the bloomfilter total: %.2f MB\n",(double)(((double) bloom_arg->bytes)/(double)1048576));
      |                                                                                                                    ^
keyhunt.cpp:6738:5: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6738 |         if(FLAGSAVEREADFILE && !FLAGREADEDFILE1)        {
      |            ^
      |            (                != 0)
keyhunt.cpp:6738:26: warning: implicit conversion 'int' -> 'bool' [readability-implicit-bool-conversion]
 6738 |         if(FLAGSAVEREADFILE && !FLAGREADEDFILE1)        {
      |                                ~^              
      |                                (                == 0)
keyhunt.cpp:6740:22: warning: 30 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6740 |                 char fileBloomName[30];
      |                                    ^
keyhunt.cpp:6741:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6741 |                 uint8_t checksum[32],hexPrefix[9];
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6741:20: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6741 |                 uint8_t checksum[32],hexPrefix[9];
      |                                  ^
keyhunt.cpp:6741:34: warning: 9 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6741 |                 uint8_t checksum[32],hexPrefix[9];
      |                                                ^
keyhunt.cpp:6742:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
 6742 |                 char dataChecksum[32],bloomChecksum[32];
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
keyhunt.cpp:6742:21: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6742 |                 char dataChecksum[32],bloomChecksum[32];
      |                                   ^
keyhunt.cpp:6742:39: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6742 |                 char dataChecksum[32],bloomChecksum[32];
      |                                                     ^
keyhunt.cpp:6745:19: warning: redundant explicit casting to the same type 'const char *' as the sub-expression, remove this casting [readability-redundant-casting]
 6745 |                 if(!sha256_file((const char*)fileName,checksum)){
      |                                 ^~~~~~~~~~~~~
keyhunt.cpp:6736:36: note: source type originates from referencing this parameter
 6736 | void writeFileIfNeeded(const char *fileName)    {
      |                              ~~~~~~^
keyhunt.cpp:6750:26: warning: 30 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6750 |                 snprintf(fileBloomName,30,"data_%s.dat",hexPrefix);
      |                                        ^
keyhunt.cpp:6772:11: warning: redundant explicit casting to the same type 'uint8_t *' (aka 'unsigned char *') as the sub-expression, remove this casting [readability-redundant-casting]
 6772 |                         sha256((uint8_t*)bloom.bf,bloom.bytes,(uint8_t*)bloomChecksum);
      |                                ^~~~~~~~~~
./bloom/bloom.h:44:12: note: source type originates from referencing this member
   44 |   uint8_t *bf;
      |   ~~~~~~~~~^
keyhunt.cpp:6774:40: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6774 |                         bytesWrite = fwrite(bloomChecksum,1,32,fileDescriptor);
      |                                                             ^
keyhunt.cpp:6775:21: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6775 |                         if(bytesWrite != 32)    {
      |                                          ^
keyhunt.cpp:6810:39: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6810 |                         bytesWrite = fwrite(dataChecksum,1,32,fileDescriptor);
      |                                                            ^
keyhunt.cpp:6811:21: warning: 32 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
 6811 |                         if(bytesWrite != 32)    {
      |                                          ^
keyhunt.cpp:6838:25: warning: parameter name 'i' is too short, expected at least 3 characters [readability-identifier-length]
 6838 | void calcualteindex(int i,Int *key)     {
      |                         ^
2674 warnings and 15 errors generated.
Error while processing /home/engine/project/albertobsd-keyhunt/keyhunt.cpp.
Suppressed 1560 warnings (1553 in non-user code, 7 with check filters).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
Found compiler error(s).
